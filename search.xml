<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Anaconda设置镜像源</title>
    <url>/post/c3fd64c3.html</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<p>在使用安装<code>conda</code>
安装某些包会出现慢或安装失败问题，所以可以修改镜像源为国内镜像源来解决这个问题，这里记录一下。主要有两个方面的内容：</p>
<ul>
<li>显示所有channel</li>
<li>更换channel</li>
<li>移除镜像源</li>
</ul>
<span id="more"></span>
<h2 id="显示所有channel">显示所有channel</h2>
<p>首先，<code>conda config --show</code>能够显示出所有<code>conda</code>的config信息。
如果我们只想看channels的信息，输入<code>conda config --show channels</code>即可</p>
<h2 id="添加镜像源">添加镜像源</h2>
<p>这里添加的是清华源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/</span><br><span class="line">conda config --<span class="built_in">set</span> show_channel_urls yes</span><br></pre></td></tr></table></figure>
<p>其中<code>conda config --set show_channel_urls yes</code>的意思是从channel中安装包时显示channel的url，这样就可以知道包的安装来源了。</p>
<p>执行<code>conda config --show channels</code>，得到的结果如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">channels:</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class="line">  - defaults</span><br></pre></td></tr></table></figure>
<h2 id="移除镜像源">移除镜像源</h2>
<p>使用<code>conda config --remove channels url地址</code>可以删除对应的镜像，如</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda config --remove channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/</span><br></pre></td></tr></table></figure>
<p>就可以删除刚刚添加的清华镜像源，这时执行<code>conda config --show channels</code>，得到的结果如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">channels:</span><br><span class="line">  - defaults</span><br></pre></td></tr></table></figure>
<h2 id="一些其他的conda指令">一些其他的conda指令</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda install &lt;包名&gt; <span class="comment">#安装指定包</span></span><br><span class="line">conda remove &lt;包名&gt;  <span class="comment">#移除指定包</span></span><br><span class="line">conda update &lt;包名&gt;  <span class="comment">#更新指定包</span></span><br><span class="line"></span><br><span class="line">conda update conda <span class="comment">#更新conda,当提示你确认更新时，键入y继续。</span></span><br><span class="line"><span class="comment">#更新conda后，继续进行Anaconda更新</span></span><br><span class="line">conda update anaconda <span class="comment">#出现提示时，键入y继续。</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>环境配置</category>
      </categories>
      <tags>
        <tag>Anaconda</tag>
        <tag>镜像源</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7安装OpenJDK14</title>
    <url>/post/584b409a.html</url>
    <content><![CDATA[<h2 id="检查并卸载原本有的java版本">检查并卸载原本有的java版本</h2>
<h3
id="查看centos7自带的jdk是否已安装">查看Centos7自带的JDK是否已安装</h3>
<p>在命令行输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure>
<p>如果出现以下结果，则说明已安装，需要先卸载，否则的话直接跳过这一步。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openjdk version <span class="string">&quot;1.8.0 102&quot;</span></span><br><span class="line">OpenJDK Runtime Environment (build 1.8.0_102-b14)</span><br><span class="line">OpenJDK 64-Bit Server VM(build 25.102-bi4, mixed mode)</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h3 id="查看已安装文件">查看已安装文件</h3>
<p>首先查看文件，在命令行输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -qa | grep java</span><br></pre></td></tr></table></figure>
<p>会出现如下信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java-1.7.0-openjdk-1.7.0.I11-2.6.7.8.el7.x86_64</span><br><span class="line">python-javapackages-3.4.1-11.el7.noarch</span><br><span class="line">tzdata-java-2016g-2.el7.noarch</span><br><span class="line">javapackages-tools-3.4.1-11.el7.noarch</span><br><span class="line">java-1.8.0-openjdk-1.8.0.102-4.b14.el7.x86_64</span><br><span class="line">java-1.8.0-openjdk-headless-1.8.0.102-4.b14.el7.x86_64</span><br><span class="line">java-1.7.0-openjdk-headless-1.7.0.111-2.6.7.8.el7.x86_64</span><br></pre></td></tr></table></figure>
<h3 id="删除相关的文件">删除相关的文件</h3>
<p>在命令行输入（把上面出现的全部删除，把命令中的 * 替换成文件名）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y remove java-*.*.*</span><br></pre></td></tr></table></figure>
<h3 id="判断是否全部删除">判断是否全部删除</h3>
<p>在命令行输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -qa | grep java</span><br></pre></td></tr></table></figure>
<p>无文件，表示删除成功！</p>
<h2 id="安装openjdk-14">安装OpenJDK 14</h2>
<h3 id="下载解压">下载解压</h3>
<p>安装相关软件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum -y install curl</span><br></pre></td></tr></table></figure>
<p>下载二进制包:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -O https://download.java.net/java/GA/jdk14/076bab302c7b4508975440c56f6cc26a/36/GPL/openjdk-14_linux-x64_bin.tar.gz</span><br></pre></td></tr></table></figure>
<p>使用tar命令解压缩下载的OpenJDK 14归档文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar xvf openjdk-14_linux-x64_bin.tar.gz</span><br></pre></td></tr></table></figure>
<p>将结果文件夹移动到<em>/ opt</em>目录。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mv jdk-14 /opt/</span><br></pre></td></tr></table></figure>
<h3 id="环境配置">环境配置</h3>
<p>配置Java环境：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo tee /etc/profile.d/jdk14.sh &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">export JAVA_HOME=/opt/jdk-14</span></span><br><span class="line"><span class="string">export PATH=\$PATH:\$JAVA_HOME/bin</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>
<p>获取您的配置文件并检查 <code>java</code> 命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile.d/jdk14.sh</span><br></pre></td></tr></table></figure>
<p>确认Java版本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="variable">$JAVA_HOME</span></span><br><span class="line">/opt/jdk-14</span><br><span class="line"></span><br><span class="line">$ java -version</span><br><span class="line">openjdk version <span class="string">&quot;14&quot;</span> 2020-03-17</span><br><span class="line">OpenJDK Runtime Environment (build 14+36-1461)</span><br><span class="line">OpenJDK 64-Bit Server VM (build 14+36-1461, mixed mode, sharing)</span><br></pre></td></tr></table></figure>
<h2 id="测试java安装">测试Java安装</h2>
<p>顺便来编写第一个Java程序。</p>
<p>打开文本编辑器，输入以下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>把代码保存为文件，文件名必须是<code>Hello.java</code>，而且文件名也要注意大小写，因为要和定义的类名<code>Hello</code>完全保持一致。</p>
<p>编译Java代码:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ javac Hello.java</span><br></pre></td></tr></table></figure>
<p>如果源代码无误，上述命令不会有任何输出，而当前目录下会产生一个<code>Hello.class</code>文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ls</span><br><span class="line">Hello.class	Hello.java</span><br></pre></td></tr></table></figure>
<p>执行<code>Hello.class</code>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ java Hello</span><br><span class="line">Hello, World!</span><br></pre></td></tr></table></figure>
<p>测试成功，环境配置完成。</p>
]]></content>
      <categories>
        <category>环境配置</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>openJDK</tag>
        <tag>centos7</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7安装python3.8.1</title>
    <url>/post/2f518ecf.html</url>
    <content><![CDATA[<h2 id="写在前面">写在前面</h2>
<p>最近又在学习CentOS，需要安装一下python，但是CentOS7上默认自带了Python
2，没有Python 3。所以就决定安装一个，这里记录一下。</p>
<h2 id="查看-python-版本号">查看 Python 版本号</h2>
<p>如果Linux 上安装有 Python
（一般为默认安装），只需要输入简单的命令，就可以查看 Python
的版本号：</p>
<span id="more"></span>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python -V</span><br><span class="line">Python 2.7.5</span><br></pre></td></tr></table></figure>
<p>或者是：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python --version</span><br><span class="line">Python 2.7.5</span><br></pre></td></tr></table></figure>
<p>可以看出，系统自带的 Python 版本是 2.7.5。</p>
<h2 id="安装python依存关系">安装Python依存关系</h2>
<p>我们将从源代码安装Python，因此请安装Python安装所需的软件包：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo yum -y groupinstall <span class="string">&quot;Development Tools&quot;</span></span><br><span class="line">$ sudo yum -y install openssl-devel bzip2-devel libffi-devel</span><br></pre></td></tr></table></figure>
<p>确认gcc可用：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gcc --version</span><br><span class="line">gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-39)</span><br></pre></td></tr></table></figure>
<h2 id="下载python-3.8.1软件包并解压">下载Python 3.8.1软件包并解压</h2>
<p>现在下载Python 3.8.1版本的软件包，在命令行中可运行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo yum -y install wget</span><br><span class="line">$ wget https://www.python.org/ftp/python/3.8.1/Python-3.8.1.tgz</span><br></pre></td></tr></table></figure>
<p>想要下载其他版本可以到<a
href="https://www.python.org/downloads/">python下载地址</a>下载其他版本。</p>
<p>解压缩包：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tar xvf Python-3.8.1.tgz</span><br></pre></td></tr></table></figure>
<p>进入解压缩后的目录:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> Python-3.8*/</span><br></pre></td></tr></table></figure>
<h2 id="创建安装目录">创建安装目录</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkdir /usr/<span class="built_in">local</span>/python3</span><br></pre></td></tr></table></figure>
<h2 id="编译并安装">编译并安装</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./configure --prefix=/usr/<span class="built_in">local</span>/python3</span><br><span class="line">$ make &amp;&amp; make install</span><br></pre></td></tr></table></figure>
<h2 id="建立软链接">建立软链接</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ln -s /usr/<span class="built_in">local</span>/python3/bin/python3 /usr/<span class="built_in">local</span>/bin/python3</span><br><span class="line">$ ln -s /usr/<span class="built_in">local</span>/python3/bin/pip3 /usr/<span class="built_in">local</span>/bin/pip3</span><br></pre></td></tr></table></figure>
<h2 id="验证是否成功">验证是否成功</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python3 -V</span><br><span class="line">Python 3.8.1</span><br><span class="line">$ pip3 -V</span><br><span class="line">pip 19.2.3 from /usr/<span class="built_in">local</span>/python3/lib/python3.8/site-packages/pip (python 3.8)</span><br></pre></td></tr></table></figure>
<h2 id="参考">参考</h2>
<p><a
href="https://www.cnblogs.com/anxminise/p/9650206.html">Centos7安装Python3.7</a></p>
<p><a href="https://ywnz.com/linux/6297.html">在CentOS 7/CentOS
8发行版上安装Python 3.8.1版本的方法</a></p>
]]></content>
      <categories>
        <category>环境配置</category>
      </categories>
      <tags>
        <tag>centos7</tag>
        <tag>Linux</tag>
        <tag>python</tag>
        <tag>环境配置</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker设置HTTP/HTTPS代理</title>
    <url>/post/4315e63f.html</url>
    <content><![CDATA[<h2 id="写在前面">写在前面</h2>
<p>最近刚刚开始学习docker，抽了两天的空余时间了解了一下docker，今天正式在我的电脑上安装并使用docker，因为众所周知的原因，Docker在国内的使用比较艰难，虽然很多组织在国内提供了<code>mirror</code>，可以拉取各种官方镜像,但是大量的组织或个人的镜像都在docker
hub，这一部分并没有被镜像同步。所以就需要给docker设置代理，帮助我们更好的使用docker。</p>
<span id="more"></span>
<h2 id="docker简介">Docker简介</h2>
<p>Docker容器与虚拟机类似，但原理上，容器是将操作系统层虚拟化，虚拟机则是虚拟化硬件，因此容器更具有便携性、高效地利用服务器。
容器更多的用于表示
软件的一个标准化单元。由于容器的标准化，因此它可以无视基础设施（Infrastructure）的差异，部署到任何一个地方。另外，Docker也为容器提供更强的业界的隔离兼容。</p>
<h2 id="前提条件">前提条件</h2>
<ul>
<li>拥有一个HTTP代理</li>
<li>Linux发行版的服务管理器使用的是systemd</li>
<li>我的系统是Ubuntu18.04，docker版本是19.03，能够正常设置</li>
</ul>
<h2 id="httphttps-proxy">HTTP/HTTPS proxy</h2>
<p>好了从这里开始就开始配置代理了。</p>
<h3
id="为docker服务创建docker.service.d-目录">为docker服务创建docker.service.d
目录：</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /etc/systemd/system/docker.service.d</span><br></pre></td></tr></table></figure>
<h3 id="创建http-或者https-代理文件并修改">创建HTTP 或者HTTPS
代理文件并修改:</h3>
<ul>
<li>HTTP:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/systemd/system/docker.service.d/http-proxy.conf</span><br></pre></td></tr></table></figure>
<p>然后按
'i'切换到输入模式，将以下配置填入，其中代理IP和端口根据你自己的情况来定。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Service]</span><br><span class="line">Environment=<span class="string">&quot;HTTP_PROXY=http://proxy.example.com:80/&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>HTTPS:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/systemd/system/docker.service.d/https-proxy.conf</span><br></pre></td></tr></table></figure>
<p>同样的，按
'i'切换到输入模式，将以下配置填入，其中代理IP和端口根据你自己的情况来定。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Service]</span><br><span class="line">Environment=<span class="string">&quot;HTTPS_PROXY=https://proxy.example.com:443/&quot;</span></span><br></pre></td></tr></table></figure>
<h3
id="局域网或者国内的registry不使用代理">局域网或者国内的registry不使用代理</h3>
<p>如果有局域网或者国内的registry，我们还需要使用 NO_PROXY
变量声明一下，比如你可以能国内的daocloud.io放有镜像:</p>
<ul>
<li>HTTP:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Service]</span><br><span class="line">Environment=<span class="string">&quot;HTTP_PROXY=http://proxy.example.com:80/&quot;</span> <span class="string">&quot;NO_PROXY=localhost,127.0.0.1,daocloud.io&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>HTTPS:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Service]</span><br><span class="line">Environment=<span class="string">&quot;HTTPS_PROXY=https://proxy.example.com:443/&quot;</span> <span class="string">&quot;NO_PROXY=localhost,127.0.0.1,daocloud.io&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="完成修改后刷新systemd配置">完成修改后刷新systemd配置</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure>
<h3 id="重启docker">重启Docker</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>
<h3 id="验证配置是否已加载">验证配置是否已加载</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl show --property=Environment docker</span><br></pre></td></tr></table></figure>
<p>输出应类似于以下语句：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Environment=HTTP_PROXY=http://proxy.example.com:80/</span><br><span class="line">or</span><br><span class="line">Environment=HTTPS_PROXY=https://proxy.example.com:443/</span><br></pre></td></tr></table></figure>
<p>好了，现在就可以愉快的使用Docker了。</p>
<h2 id="参考文档">参考文档：</h2>
<p><a href="https://docs.docker.com/config/daemon/systemd/"
class="uri">https://docs.docker.com/config/daemon/systemd/</a></p>
]]></content>
      <categories>
        <category>环境配置</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>proxy</tag>
        <tag>代理</tag>
      </tags>
  </entry>
  <entry>
    <title>Debian&amp;Ubuntu设置静态ip</title>
    <url>/post/8c930c05.html</url>
    <content><![CDATA[<h2 id="写在前面">写在前面</h2>
<p>最近开了几个虚拟机做实验，通过<code>ssh</code>连接上去，为了避免IP更换带来麻烦，所以设置一下静态IP,这里记录一下，方便查阅。</p>
<h2 id="环境">环境</h2>
<ul>
<li>Debian10系统</li>
<li>NAT模式</li>
</ul>
<span id="more"></span>
<h2 id="配置静态ip">配置静态IP</h2>
<h3 id="备份原有配置文件">备份原有配置文件</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp /etc/network/interfaces /etc/network/interfacesbak <span class="comment">#备份原有配置文件</span></span><br></pre></td></tr></table></figure>
<h3 id="配置静态ip-1">配置静态IP</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim  /etc/network/interfaces <span class="comment">#编辑网卡配置文件</span></span><br></pre></td></tr></table></figure>
<p>将内容修改为以下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># The loopback network interface</span></span><br><span class="line">auto lo</span><br><span class="line"><span class="comment">#iface lo inet loopback</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The primary network interface</span></span><br><span class="line">allow-hotplug ens33</span><br><span class="line"><span class="comment">#iface ens33 inet dhcp</span></span><br><span class="line"></span><br><span class="line">auto ens33</span><br><span class="line">iface ens33 inet static</span><br><span class="line">address 192.168.162.136</span><br><span class="line">gateway 192.168.162.2</span><br><span class="line">netmask 255.255.255.0</span><br></pre></td></tr></table></figure>
<h2 id="配置dns服务">配置DNS服务</h2>
<p>Debian的DNS配置保存在文件<code>/etc/resolv.conf</code>里面。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/resolv.conf</span><br></pre></td></tr></table></figure>
<p>将以下内容填入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nameserver 8.8.8.8</span><br><span class="line">nameserver 114.114.114.114</span><br></pre></td></tr></table></figure>
<h2 id="重启网络">重启网络</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/init.d/networking restart</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>环境配置</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Debian</tag>
        <tag>Ubuntu</tag>
        <tag>静态IP</tag>
      </tags>
  </entry>
  <entry>
    <title>Gmail邮箱注册，谷歌账号注册</title>
    <url>/post/b02ca219.html</url>
    <content><![CDATA[<h2 id="写在前面">写在前面</h2>
<p>由于谷歌的政策原因，如今注册一个谷歌账户可以说是难上加难了，但是有时候又会有用谷歌服务的需求，所以这里就来分享一下如何快速地注册一个谷歌账户。</p>
<h2 id="说明">说明</h2>
<ul>
<li>一定要用【手机】注册（亲测电脑注册不上）</li>
<li>该方法不需要科学上网</li>
<li>在这篇文章发布时是可以注册的，但是也有可能以后谷歌政策的修改导致注册不上的情况，所以该方法有效期不定，但是目前看来还是很稳定的</li>
</ul>
<span id="more"></span>
<h2 id="注册过程">注册过程</h2>
<h3
id="下载手机版qq邮箱或者网易邮箱大师">下载手机版QQ邮箱或者网易邮箱大师</h3>
<p>这两款软件都可以在各大应用商店找到，二者选其一下载即可，因为这两款邮箱工具都自带谷歌邮箱服务加速，无需我们自己准备梯子！本文使用<strong>QQ邮箱</strong>演示。</p>
<h2 id="开始注册">开始注册</h2>
<ul>
<li>首先打开QQ邮箱，滑到底部，找到<strong>添加账户</strong>选项，点击</li>
</ul>
<p><img
src="http://figure.cruisetian.top/img/Snipaste_2020-06-13_13-01-24.png" /></p>
<ul>
<li>然后在跳出的页面选择<strong>Gmail</strong></li>
</ul>
<p><img
src="http://figure.cruisetian.top/img/Snipaste_2020-06-13_13-01-50.png" /></p>
<ul>
<li>点击<strong>创建账号</strong></li>
</ul>
<p><img
src="http://figure.cruisetian.top/img/Snipaste_2020-06-13_13-02-10.png" /></p>
<ul>
<li>在接下来跳出的窗口中填入自己的各项信息以后点击<strong>下一步</strong></li>
</ul>
<p><img
src="http://figure.cruisetian.top/img/Snipaste_2020-06-13_13-03-50.png" /></p>
<ul>
<li>之后会跳转到填写手机号的界面，在国家那里拉到最后，选择<strong>中国
+86</strong>，然后直接填写手机号即可，然后点击<strong>下一步</strong></li>
</ul>
<p><img
src="http://figure.cruisetian.top/img/Snipaste_2020-06-13_13-21-05.png" /></p>
<ul>
<li>跳转到验证界面以后输入你刚刚输入的手机号收到的验证码，点击<strong>下一步</strong></li>
</ul>
<p><img
src="http://figure.cruisetian.top/img/Snipaste_2020-06-13_13-21-45.png" /></p>
<ul>
<li>之后完善一下个人信息，填写一下生日，性别什么的就好了，辅助邮箱这个可填可不填，填写好以后点击<strong>下一步</strong>即可</li>
</ul>
<p><img
src="http://figure.cruisetian.top/img/Snipaste_2020-06-13_13-23-23.png" /></p>
<ul>
<li>最后就是一些政策性的东西，自己看一看，根据自己的需求选择同意还是拒绝就好，操作完成以后账号就注册完成了</li>
</ul>
<h2 id="后记">后记</h2>
<p>整个过程比较简单，这里就是提供一个方法，如果还有其他方式，也欢迎留言交流。</p>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>Gmail</tag>
        <tag>谷歌账户</tag>
        <tag>国内注册</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows terminal安装使用及美化(1)</title>
    <url>/post/c0de6c42.html</url>
    <content><![CDATA[<h2 id="写在前面">写在前面</h2>
<p>最近在做课程大作业，因为我用的是Windows10，所以需要频繁使用<code>cmd</code>和<code>power shell</code>，但是原本的窗口实在是，太丑了不管是<code>cmd</code>的傻大黑粗和难看的字体，还是<code>power shell</code>那奇异的蓝色背景，都是一言难尽，正好最近微软发布了<code>Windows terminal 1.0</code>,所以我就折腾了一下，搞出了一个稍微好看一点的终端，在这里记录一下。（其实还是为了折腾2333)</p>
<span id="more"></span>
<h2 id="安装">安装</h2>
<ol type="1">
<li>直接在 Windows 10 的 <code>应用商店</code> 里面安装。</li>
</ol>
<ul>
<li>桌面左下角点击 窗口图标， 输入 <code>store</code> , 点击打开
应用商店。</li>
<li>点击右上角搜索图标，输入 <code>terminal</code> ，选择
<code>Windows Terminal</code></li>
<li>根据提示选择安装即可。</li>
</ul>
<ol start="2" type="1">
<li><p>在GitHub下载安装</p>
<p>GitHub地址：<a href="https://github.com/microsoft/terminal/releases"
class="uri">https://github.com/microsoft/terminal/releases</a></p></li>
</ol>
<h2 id="基础设置">基础设置</h2>
<p>打开刚刚安装的<code>Windows terminal</code>（可以在开始菜单找到），默认打开的是<code>power shell</code>的蓝色界面，然后点击上面菜单栏的<strong>+</strong>旁边的向下箭头，选择设置；或者用快捷键<code>Ctrl+,</code>，打开设置文件。</p>
<p><img
src="http://figure.cruisetian.top/img/Snipaste_2020-05-23_20-03-28.png" /></p>
<h3 id="设定缺省shell">设定缺省shell</h3>
<p>先找到 “profiles” 配置项，看里面 cmd.exe 对应的 <code>guid</code>
是什么，拷贝 cmd.exe 对应的 <code>guid</code> 到 “defaultProfile”
中，这样再打开Windows
terminal打开的就是cmd了，当然你也可以自己设置这个参数。</p>
<h3 id="设定选中即复制">设定选中即复制</h3>
<p>修改 “copyOnSelect” 选项的值为 <code>true</code> ，如下所示</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;copyOnSelect&quot;</span>: <span class="literal">true</span>,</span><br></pre></td></tr></table></figure>
<p>这样就只需要选中就可以自动复制到剪贴板了，比较方便。</p>
<h3 id="设定字体">设定字体</h3>
<p>在你使用的profile中加入如下配置即可</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;fontFace&quot;</span> : <span class="string">&quot;Consolas&quot;</span>,</span><br><span class="line"><span class="string">&quot;fontSize&quot;</span> : <span class="number">12</span>,</span><br></pre></td></tr></table></figure>
<p><code>fontFace</code> 是字体名， 比如
Consolas、NSimsun、SimHei、Consolas，必须是本机能找到的字体文件。
<code>fontSize</code> 是字体大小。</p>
<p>比如我的设置：</p>
<p><img
src="http://figure.cruisetian.top/img/Snipaste_2020-05-23_20-32-27.png" /></p>
<h3 id="设定配色">设定配色</h3>
<p>在“schema”配置项自行修改，每个人要求不一样，这里放一下我的配置</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;schemes&quot;</span>: [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Campbell&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">&quot;cursorColor&quot;</span>: <span class="string">&quot;#FFFFFF&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;selectionBackground&quot;</span>: <span class="string">&quot;#ffffff&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">&quot;background&quot;</span>: <span class="string">&quot;#063d3a&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;foreground&quot;</span>: <span class="string">&quot;#ece4e4&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">&quot;black&quot;</span>: <span class="string">&quot;#0C0C0C&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;blue&quot;</span>: <span class="string">&quot;#0037DA&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;cyan&quot;</span>: <span class="string">&quot;#3A96DD&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;green&quot;</span>: <span class="string">&quot;#13A10E&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;purple&quot;</span>: <span class="string">&quot;#881798&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;red&quot;</span>: <span class="string">&quot;#C50F1F&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;white&quot;</span>: <span class="string">&quot;#CCCCCC&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;yellow&quot;</span>: <span class="string">&quot;#C19C00&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;brightBlack&quot;</span>: <span class="string">&quot;#767676&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;brightBlue&quot;</span>: <span class="string">&quot;#3B78FF&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;brightCyan&quot;</span>: <span class="string">&quot;#61D6D6&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;brightGreen&quot;</span>: <span class="string">&quot;#16C60C&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;brightPurple&quot;</span>: <span class="string">&quot;#B4009E&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;brightRed&quot;</span>: <span class="string">&quot;#E74856&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;brightWhite&quot;</span>: <span class="string">&quot;#F2F2F2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;brightYellow&quot;</span>: <span class="string">&quot;#F9F1A5&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">],</span><br></pre></td></tr></table></figure>
<p>大家可以在可以调色的文本编辑器中打开设置文件 settings.json
，直观的调整为你喜欢的颜色，推荐VS Code。</p>
]]></content>
      <categories>
        <category>软件分享</category>
      </categories>
      <tags>
        <tag>windows terminal</tag>
        <tag>设置</tag>
        <tag>终端</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux统计文件夹下文件数目</title>
    <url>/post/eb44878c.html</url>
    <content><![CDATA[<p>Linux下有三个命令：<code>ls</code>、<code>grep</code>、<code>wc</code>。通过这三个命令的组合可以统计目录下文件及文件夹的个数。</p>
<ul>
<li>统计当前目录下文件的个数（不包括目录）</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ls -l | grep <span class="string">&quot;^-&quot;</span> | wc -l</span><br></pre></td></tr></table></figure>
<ul>
<li>统计当前目录下文件的个数（包括子目录）</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ls -lR| grep <span class="string">&quot;^-&quot;</span> | wc -l</span><br></pre></td></tr></table></figure>
<ul>
<li>查看某目录下文件夹(目录)的个数（包括子目录）</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ls -lR | grep <span class="string">&quot;^d&quot;</span> | wc -l</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p><strong>命令解析：</strong></p>
<ul>
<li><code>ls -l</code></li>
</ul>
<p>长列表输出该目录下文件信息(注意这里的文件是指目录、链接、设备文件等)，每一行对应一个文件或目录，<code>ls -lR</code>是列出所有文件，包括子目录。</p>
<ul>
<li><code>grep "^-"</code>
过滤<code>ls</code>的输出信息，只保留一般文件，只保留目录是<code>grep "^d"</code>。</li>
<li><code>wc -l</code>
统计输出信息的行数，统计结果就是输出信息的行数，一行信息对应一个文件，所以就是文件的个数。</li>
</ul>
]]></content>
      <categories>
        <category>常用</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>命令</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows potplayer设置</title>
    <url>/post/4050cd22.html</url>
    <content><![CDATA[<h2 id="几个参考链接">几个参考链接：</h2>
<p><a href="https://vcb-s.com/archives/7228">基础软件安装及配置</a> , <a
href="https://bbs.vcb-s.com/thread-7492-1-1.html">补充教程</a></p>
<p><a
href="https://zhuanlan.zhihu.com/p/163458215">皮肤及直播源配置</a></p>
<p><a
href="https://tieba.baidu.com/p/7171344019?fid=1264436&amp;pid=137236746573#137236746573">百度贴吧进阶配置</a></p>
<h2 id="遇见的问题及解决">遇见的问题及解决</h2>
<ul>
<li><h3
id="设置完以后倍速播放只有声音倍速画面不倍速">设置完以后倍速播放只有声音倍速，画面不倍速</h3></li>
</ul>
<blockquote>
<p>按下快捷键<code>shift+x</code>，打开声音处理滤镜，成功解决</p>
</blockquote>
]]></content>
      <categories>
        <category>软件分享</category>
      </categories>
      <tags>
        <tag>设置</tag>
        <tag>potplayer</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows terminal安装使用及美化(2)</title>
    <url>/post/ebf33f81.html</url>
    <content><![CDATA[<h2 id="写在前面">写在前面</h2>
<p>上一个part只写了一些基础配置，这个part就写一写进阶的配置。主要包括power
shell的美化，以及添加新的terminal，比如<code>git-bash</code>等。</p>
<h2 id="美化power-shell">美化Power shell</h2>
<p>本文我们用 <code>oh-my-posh</code> 在 PowerShell
中实现Linux中<code>oh-my-zsh</code> 的样子，部分效果如下：</p>
<figure>
<img data-src="http://figure.cruisetian.top/img/indications.png"
alt="来自oh-my-posh官方主页" />
<figcaption aria-hidden="true">来自oh-my-posh官方主页</figcaption>
</figure>
<blockquote>
<p>上一次失败命令（×）、管理员权限指示（⚡）、显示所登录的用户名和域名、所在工作目录指示（蓝色领带）、posh-git模块提供的Git状态指示器（黄色领带）</p>
</blockquote>
<span id="more"></span>
<h3 id="安装oh-my-posh和posh-git">安装oh-my-posh（和posh-git）</h3>
<p>首先需要以管理员权限启动
PowerShell，以便执行安装操作。(windows10快捷键为<code>Windows+X</code>,然后按A，选择管理员运行power
shell)</p>
<p>首先安装Chocolatey</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Set-ExecutionPolicy</span> Bypass <span class="literal">-Scope</span> <span class="keyword">Process</span> <span class="literal">-Force</span>; <span class="built_in">iex</span> ((<span class="built_in">New-Object</span> System.Net.WebClient).DownloadString(<span class="string">&#x27;https://chocolatey.org/install.ps1&#x27;</span>))</span><br></pre></td></tr></table></figure>
<p>用 Chocolatey安装 ConEmu</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">choco install ConEmu</span><br></pre></td></tr></table></figure>
<p>然后，运行命令以安装 posh-git，这是 oh-my-posh 的依赖</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Install-Module</span> posh<span class="literal">-git</span> <span class="literal">-Scope</span> CurrentUser</span><br></pre></td></tr></table></figure>
<p>接下来，运行命令以安装 oh-my-posh 本身</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Install-Module</span> <span class="built_in">oh</span><span class="literal">-my</span><span class="literal">-posh</span> <span class="literal">-Scope</span> CurrentUser</span><br></pre></td></tr></table></figure>
<h3 id="基本设置">基本设置</h3>
<p>安装完成后，输入</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Import-Module</span> posh<span class="literal">-git</span></span><br><span class="line"><span class="built_in">Import-Module</span> <span class="built_in">oh</span><span class="literal">-my</span><span class="literal">-posh</span></span><br><span class="line"><span class="comment">#Set-Theme PowerLine</span></span><br><span class="line"><span class="built_in">Set-PoshPrompt</span> <span class="literal">-Theme</span> Paradox <span class="comment"># oh-my-posh3以后更改为此命令</span></span><br></pre></td></tr></table></figure>
<p><strong>如果你的电脑里没有安装Git，在输入<code>Import-Module posh-git</code>会报错，解决方法是<a
href="https://git-scm.com/">安装Git</a>或者把这一行去掉，相应的下面的配置文件也要删除这一句</strong></p>
<p>但是这次使用<code>Import-Module</code>的指令，再次启动PowerShell就会发现没有效果，这是因为这些指令仅限于本次会话的PowerShell有效，因此，若要使这一效果在每次启动的时候都有效，那就要将其添加到启动脚本中。</p>
<p>使用记事本打开PS配置文件（如无则创建该文件）</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!(<span class="built_in">Test-Path</span> <span class="literal">-Path</span> <span class="variable">$PROFILE</span> )) &#123; <span class="built_in">New-Item</span> <span class="literal">-Type</span> File <span class="literal">-Path</span> <span class="variable">$PROFILE</span> <span class="literal">-Force</span> &#125;</span><br><span class="line">notepad <span class="variable">$PROFILE</span></span><br></pre></td></tr></table></figure>
<p>随后，在打开的记事本窗口里，在文末加入下面内容，以让Powershell在启动之时应用主题，然后保存。（仅对当前用户生效）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Import-Module posh-git</span><br><span class="line">Import-Module oh-my-posh</span><br><span class="line">Set-Theme Paradox</span><br></pre></td></tr></table></figure>
<p>关闭脚本禁用：允许Powershell运行脚本</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set-executionpolicy</span> remotesigned</span><br></pre></td></tr></table></figure>
<p>再度打开Powershell之时，你就会发现power shell变成了下面这副样子</p>
<p><img
src="http://figure.cruisetian.top/img/Snipaste_2020-05-23_21-21-05.png" /></p>
<p>还是很丑，所以我们使用Windows terminal进行配置</p>
<h3 id="windows-terminal配置">Windows terminal配置</h3>
<p>打开Windows
terminal，然后在下箭头处展开列表，选中设置打开JSON配置文件（也可使用默认的“Ctrl+,”组合键）后定位到profiles区域，可单独对不同终端进行配置。</p>
<p>其中各个参数的注释如下，可以选择自行修改</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;profiles&quot;</span> :</span><br><span class="line">    [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;acrylicOpacity&quot;</span> : <span class="number">0.70</span>, <span class="comment">//亚克力背景透明度（需启用useAcrylic）</span></span><br><span class="line">            <span class="attr">&quot;background&quot;</span> : <span class="string">&quot;#012456&quot;</span>, <span class="comment">//背景颜色，PS默认为蓝色</span></span><br><span class="line">            <span class="attr">&quot;closeOnExit&quot;</span> : <span class="literal">true</span>, <span class="comment">//关闭窗口的时候退出所有挂载的程序</span></span><br><span class="line">            <span class="attr">&quot;colorScheme&quot;</span> : <span class="string">&quot;Dracula&quot;</span>, <span class="comment">//配色方案（Dracula需导入）</span></span><br><span class="line">            <span class="attr">&quot;commandline&quot;</span> : <span class="string">&quot;powershell.exe&quot;</span>, <span class="comment">//此处终端打开PS</span></span><br><span class="line">            <span class="attr">&quot;cursorColor&quot;</span> : <span class="string">&quot;#FFFFFF&quot;</span>, <span class="comment">//光标颜色</span></span><br><span class="line">            <span class="attr">&quot;cursorShape&quot;</span> : <span class="string">&quot;bar&quot;</span>, <span class="comment">//光标形状（默认为bar，即条状）</span></span><br><span class="line">            <span class="attr">&quot;fontFace&quot;</span> : <span class="string">&quot;Consolas&quot;</span>, <span class="comment">//所用字体</span></span><br><span class="line">            <span class="attr">&quot;fontSize&quot;</span> : <span class="number">14</span>, <span class="comment">//字体大小</span></span><br><span class="line">            <span class="attr">&quot;guid&quot;</span> : <span class="string">&quot;&#123;61c54bbd-c2c6-5271-96e7-009a87ff44bf&#125;&quot;</span>, <span class="comment">//唯一标识符，随机生成</span></span><br><span class="line">            <span class="attr">&quot;historySize&quot;</span> : <span class="number">9001</span>, <span class="comment">//缓存大小</span></span><br><span class="line">            <span class="attr">&quot;icon&quot;</span> : <span class="string">&quot;ms-appx:///ProfileIcons/&#123;61c54bbd-c2c6-5271-96e7-009a87ff44bf&#125;.png&quot;</span>, <span class="comment">//图标</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span> : <span class="string">&quot;Windows PowerShell&quot;</span>, <span class="comment">//在下拉菜单里显示的名称</span></span><br><span class="line">            <span class="attr">&quot;tabTitle&quot;</span> : <span class="string">&quot;Windows PowerShell&quot;</span>, <span class="comment">//在选项卡上显示的名称</span></span><br><span class="line">            <span class="attr">&quot;padding&quot;</span> : <span class="string">&quot;0, 0, 0, 0&quot;</span>, <span class="comment">//内容的边框距，默认填充全部空间</span></span><br><span class="line">            <span class="attr">&quot;snapOnInput&quot;</span> : <span class="literal">true</span>, <span class="comment">//输入的时候自动滚动到输入位置</span></span><br><span class="line">            <span class="attr">&quot;startingDirectory&quot;</span> : <span class="string">&quot;%USERPROFILE%&quot;</span>, <span class="comment">//初始工作目录，默认为用户目录</span></span><br><span class="line">            <span class="attr">&quot;useAcrylic&quot;</span> : <span class="literal">true</span> <span class="comment">//使用亚克力效果</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure>
<p>这里贴一下我自己用的修改项，各个参数的效果我都用比较易懂的语言写在后面了</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;foreground&quot;</span> : <span class="string">&quot;#ffffff&quot;</span>,         <span class="comment">//字体颜色</span></span><br><span class="line"><span class="comment">//&quot;cursorColor&quot; : &quot;#fbff00&quot;,        //光标颜色</span></span><br><span class="line"><span class="string">&quot;cursorShape&quot;</span> : <span class="string">&quot;bar&quot;</span>,              <span class="comment">//光标类型</span></span><br><span class="line"><span class="string">&quot;startingDirectory&quot;</span> : <span class="string">&quot;%USERPROFILE%&quot;</span>, <span class="comment">//初始工作目录，默认为用户目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//设置背景</span></span><br><span class="line"><span class="string">&quot;acrylicOpacity&quot;</span>: <span class="number">0.6</span>,  <span class="comment">//背景毛玻璃不透明度</span></span><br><span class="line"><span class="string">&quot;useAcrylic&quot;</span>: <span class="literal">true</span>,     <span class="comment">//背景使用毛玻璃效果</span></span><br><span class="line"><span class="string">&quot;background&quot;</span>: <span class="string">&quot;#0c0c0c&quot;</span>    <span class="comment">//背景颜色</span></span><br></pre></td></tr></table></figure>
<h3 id="下载个性化字体支持特殊符号">下载个性化字体，支持特殊符号</h3>
<p>因为这个主题有一些特殊符号，比如闪电，叉号等，默认字体不支持，就会放几个框框在哪里，比较难看，所以下载一个支持特殊符号的字体并应用，字体链接如下：<a
href="https://github.com/adam7/delugia-code/releases/download/v1910.04.1/Delugia.Nerd.Font.Complete.ttf"
class="uri">https://github.com/adam7/delugia-code/releases/download/v1910.04.1/Delugia.Nerd.Font.Complete.ttf</a></p>
<p>下载完以后点击安装即可，然后在power shell的json设置项，将字体改为
"Delugia Nerd Font"，即</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;fontFace&quot;</span>: <span class="string">&quot;Delugia Nerd Font&quot;</span>,</span><br></pre></td></tr></table></figure>
<h2 id="增加一个新的终端以bash为例">增加一个新的终端（以bash为例）</h2>
<p>打开Windows terminal的配置文件（Win+,)</p>
<h3 id="新增一个-profile">新增一个 profile</h3>
<p>我们把原来的一个 profile
复制一份出来，这样我们就能够写一份自己的终端配置了。然后在下面粘贴一下，并进行一些修改，就比如我这样。</p>
<p><img
src="http://figure.cruisetian.top/img/Snipaste_2020-05-23_21-52-52.png" /></p>
<h3 id="修改参数">修改参数</h3>
<p>其中你粘贴下去的文件有一些项必须要修改</p>
<ul>
<li><code>guid</code> 必须使用新的跟其他终端不重复的
guid，可以使用下面的guid的工具来生成：<a
href="https://www.uuidgenerator.net/guid">在线guid生成工具</a></li>
<li><code>commandline</code>
你需要改成你的新的终端的路径，如果你是通过安装 Git for Windows 而安装的
Git Bash，那么默认路径就是
<code>C:\Program Files\Git\bin\bash.exe</code>，否则请修改为你自己定义的路径</li>
<li><code>name</code> 改为终端的名称，这个大家可以自定义</li>
</ul>
<p>下面这些参数根据自己需要来修改</p>
<ul>
<li><code>useAcrylic</code> 使用毛玻璃效果</li>
<li><code>acrylicOpacity</code> 毛玻璃效果透明度</li>
<li><code>fontFace</code> 字体名称</li>
<li><code>fontSize</code> 字号大小</li>
<li><code>icon</code> 图标，路径修改为你自己图标的路径</li>
<li><code>startingDirectory</code> 初始路径</li>
</ul>
<p>这里提供一个git-bash的图标，有需要的可以自取</p>
<p><img data-src="http://figure.cruisetian.top/img/git-bash.jpg" /></p>
<p>最后保存这个配置文件，再点击Windows
terminal的向下箭头，就可以看到你自己自定义的配置了。</p>
]]></content>
      <categories>
        <category>软件分享</category>
      </categories>
      <tags>
        <tag>windows terminal</tag>
        <tag>设置</tag>
        <tag>终端</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows terminal安装使用及美化(3)</title>
    <url>/post/f2e80ec0.html</url>
    <content><![CDATA[<h2 id="写在前面">写在前面</h2>
<p>之前两个part写了一些关于Windows
terminal的基础和进阶配置，配置好以后用了两天感觉不错，所以就准备把它作为Windows下主要使用的命令行工具，所以决定把它加到右键菜单里去，在这里记录一下过程，也算是有关Windows
terminal的高阶分享吧。</p>
<span id="more"></span>
<h2 id="添加过程">添加过程</h2>
<h3 id="测试变量">测试变量</h3>
<p>下面的两个变量后面的操作需要使用到。所以，先测试下是否正常。用
<code>cmd</code> 分别输入这 2 句命令(使用<code>gitbash</code>无效的)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> %USERPROFILE%</span><br><span class="line"><span class="built_in">echo</span> %LOCALAPPDATA%</span><br></pre></td></tr></table></figure>
<p>如果有报错，接下来的操作，请把对应的部分进行替换。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">%USERPROFILE% =&gt; C:\Users\&#123;username&#125;</span><br><span class="line">%LOCALAPPDATA% =&gt; C:\Users\&#123;userName&#125;\AppData\Local</span><br></pre></td></tr></table></figure>
<p><strong>注意</strong> <code>&#123;userName&#125;</code>为自己的用户名</p>
<h3 id="获取图标">获取图标</h3>
<p>创建 Terminal 文件夹，用来存放图标。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir <span class="string">&quot;%USERPROFILE%\AppData\Local\Terminal&quot;</span></span><br></pre></td></tr></table></figure>
<p>从微软的Github上下载Windows Terminal的图标，地址如下:<a
href="https://github.com/microsoft/terminal/blob/master/res/terminal.ico"
class="uri">https://github.com/microsoft/terminal/blob/master/res/terminal.ico</a>
然后将图标保存到<code>%USERPROFILE%\AppData\Local\Terminal</code>目录中。</p>
<h3 id="添加注册表文件">添加注册表文件</h3>
<p>新建一个文件，文件名随意
比如<code>wt.reg</code>。记得保存为<code>.reg</code>文件(名称随意，后缀名不可以错)，并添加以下内容然后保存。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Windows Registry Editor Version <span class="number">5.00</span></span><br><span class="line"></span><br><span class="line">[<span class="meta">HKEY_CLASSES_ROOT\Directory\Background\shell\wt</span>]</span><br><span class="line">@=<span class="string">&quot;Windows Terminal Here&quot;</span></span><br><span class="line"><span class="string">&quot;Icon&quot;</span>=<span class="string">&quot;%USERPROFILE%\\AppData\\Local\\Terminal\\terminal.ico&quot;</span></span><br><span class="line"></span><br><span class="line">[<span class="meta">HKEY_CLASSES_ROOT\Directory\Background\shell\wt\command</span>]</span><br><span class="line">@=<span class="string">&quot;C:\\Users\\&#123;username&#125;\\AppData\\Local\\Microsoft\\WindowsApps\\wt.exe&quot;</span></span><br></pre></td></tr></table></figure>
<p><strong>注意</strong> 上面的<code>&#123;userName&#125;</code>为自己的用户名</p>
<p>然后双击执行这个<code>.reg</code>文件就可以了。这时候就会发现右键菜单里面有了Windows
Terminal Here选项。</p>
<h3 id="真正的windows-terminal-here">真正的Windows terminal "Here"</h3>
<p>执行完上面的操作你会发现虽然右键可以打开Windows
terminal，但是在任何文件夹打开的 Windows terminal
都不是当前的目录，这还怎么叫做<code>here</code>呢。继续配置</p>
<p>打开Windows terminal的配置文件（在Windows
terminal向下箭头的设置中），找到
<code>startingDirectory</code>改为：<code>./</code>
即：<code>"startingDirectory": "./"</code>，就可以做到在当前目录打开啦。</p>
<h2 id="后记">后记</h2>
<p>到这里，Windows
terminal的配置就基本结束啦，如果想要更多其它的效果，大家可以自己折腾，有什么不理解的或者更好的想法也可以在评论区里说出来，大家一起交流。</p>
]]></content>
      <categories>
        <category>软件分享</category>
      </categories>
      <tags>
        <tag>windows terminal</tag>
        <tag>设置</tag>
        <tag>终端</tag>
      </tags>
  </entry>
  <entry>
    <title>goindex-在国内使用你的谷歌网盘</title>
    <url>/post/1d96ecd4.html</url>
    <content><![CDATA[<h2 id="写在前面">写在前面</h2>
<p>谷歌云盘是一款极其好用的网盘，使用体验吊打百度网盘，不限速，而且甚至还可以获得无限空间，至于如何获得无限空间，这里就不说明了，有兴趣的可以自行谷歌。但是这么好用的一款网盘，由于大家都知道的原因，在国内并不能使用，只能科学上网使用，有时候需要下载文件时就需要浪费宝贵的代理流量，毕竟都是钱啊，所以今天就在这里分享一下通过Cloudflare来实现在国内访问并下载你谷歌网盘中的文件，不用消耗代理流量。</p>
<span id="more"></span>
<h2 id="注册cloudflare账户">注册Cloudflare账户</h2>
<p>Cloudflare是一个知名的提供免费的CDN服务和域名解析服务的服务商</p>
<p>首先注册一个Cloudflare账户，到下面这个地址：<a
href="https://dash.cloudflare.com/sign-up">Cloudflare注册</a>.</p>
<p><img
src="http://figure.cruisetian.top/img/Snipaste_2020-06-12_19-34-42.png" /></p>
<p>注册完以后登录，可能会提示你添加站点，点击右上角你的账户标识然后点击<strong>账户主页</strong>就好了，在这个页面可以验证一下邮箱</p>
<p><img
src="http://figure.cruisetian.top/img/Snipaste_2020-06-12_19-38-30.png" /></p>
<p><img
src="http://figure.cruisetian.top/img/Snipaste_2020-06-12_19-40-56.png" /></p>
<p>验证完以后重新回到主页，点击右边的<strong>Workers</strong>,然后定义一个自己的名字，后来会显示在你的访问你的goindex服务的域名中，然后点击<strong>Set
Up</strong></p>
<p><img
src="http://figure.cruisetian.top/img/Snipaste_2020-06-12_19-44-52.png" /></p>
<p>进入到下一个界面，点击<strong>Continue with Free</strong></p>
<p><img
src="http://figure.cruisetian.top/img/Snipaste_2020-06-12_19-48-11.png" /></p>
<p>然后接下来可以开始创建Workers，先做一些准备工作</p>
<h2 id="获取workers代码">获取Workers代码</h2>
<p>首先进入下面这个网址：<a
href="https://gdindex-code-builder.glitch.me/">goindex code
builder</a>,(进入可能有点慢，稍微等一会)</p>
<p>进入以后按照步骤进行即可，点击<strong>Click me</strong></p>
<p><img
src="http://figure.cruisetian.top/img/Snipaste_2020-06-12_19-57-18.png" /></p>
<p>之后会跳转到登录谷歌账号的页面，选择你注册Cloudflare账户的账号登录，之后的一些权限点<strong>允许</strong>即可，这时候会得到一行代码，点击右边复制按钮复制代码</p>
<p><img
src="http://figure.cruisetian.top/img/Snipaste_2020-06-12_19-59-45.png" /></p>
<p>然后返回刚刚的网址将复制的代码粘贴进入<strong>Authorization
Code</strong>框，然后接下来登录谷歌云盘，选择你想要部署的文件夹，点进去，此时浏览器的地址栏应该是这个样子的</p>
<p><img
src="http://figure.cruisetian.top/img/Snipaste_2020-06-12_20-04-35.png" /></p>
<p>然后将浏览器的地址栏<strong>folders</strong>后面的部分复制下来，粘贴进<strong>Default
Root ID</strong>框内</p>
<p><img
src="http://figure.cruisetian.top/img/Snipaste_2020-06-12_20-06-46.png" /></p>
<p>然后接下来的配置就自己选择配置一下就好了，填完以后点击<strong>Get
Code</strong>按钮</p>
<p><img
src="http://figure.cruisetian.top/img/Snipaste_2020-06-12_20-07-51.png" /></p>
<p>这时候你会得到一堆代码，点击<strong>Copy the code to
clipboard</strong>即可。</p>
<p><img
src="http://figure.cruisetian.top/img/Snipaste_2020-06-12_20-10-54.png" /></p>
<h2 id="创建workers">创建Workers</h2>
<p>回到Cloudflare页面，点击<strong>Create a Worker</strong></p>
<p><img
src="http://figure.cruisetian.top/img/Snipaste_2020-06-12_20-12-52.png" /></p>
<p>将原来<strong>Script</strong>框内的代码删除，然后把刚刚复制的代码粘贴进去，其中代码最开头的<code>self.props</code>中的内容可以修改，根据自己的需求进行修改即可</p>
<p><img
src="http://figure.cruisetian.top/img/Snipaste_2020-06-12_20-16-39.png" /></p>
<p>然后可以修改一下workers的名字，一般默认的比较长，不太好记</p>
<p><img
src="http://figure.cruisetian.top/img/Snipaste_2020-06-12_20-18-06.png" /></p>
<p>然后点击右侧的<strong>Preview</strong>预览一下生成的界面，下面展示的网址就是你之后要不翻墙访问你的谷歌云盘要输入的网址，可以复制一下</p>
<p><img
src="http://figure.cruisetian.top/img/Snipaste_2020-06-12_20-23-40.png" /></p>
<p>如果预览没有问题就点击底部的<strong>Save and
Deploy</strong>部署Workers即可</p>
<p><img
src="http://figure.cruisetian.top/img/Snipaste_2020-06-12_20-20-51.png" /></p>
<p>之后就可以在浏览器输入刚刚复制的地址进行访问了。</p>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>goindex</tag>
        <tag>谷歌云盘</tag>
        <tag>Google Drive</tag>
        <tag>国内使用</tag>
      </tags>
  </entry>
  <entry>
    <title>conda安装虚拟环境</title>
    <url>/post/7615c371.html</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<p>不同的代码往往需要特定的运行环境。比如说有些代码需要在python3.6的环境下运行，有些代码需要在python2.7的环境下运行。这时就可以通过创建虚拟环境来营造代码运行适合的环境，而不会影响到自己本来的生产环境，所以就记录以下<code>conda</code>安装虚拟环境的命令，方便查阅。</p>
<p><code>conda</code>的安装就不在这里详述，自行安装。</p>
<span id="more"></span>
<h2 id="conda安装虚拟环境">conda安装虚拟环境</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda create -n your_env_name python=version（2.7、3.6等)</span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda create -n py3.7.3 python=3.7.3</span><br></pre></td></tr></table></figure>
<p>会出现以下结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Collecting package metadata (current_repodata.json): <span class="keyword">done</span></span><br><span class="line">Solving environment: failed with repodata from current_repodata.json, will retry with next repodata <span class="built_in">source</span>.</span><br><span class="line">Collecting package metadata (repodata.json): <span class="keyword">done</span></span><br><span class="line">Solving environment: <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Package Plan ##</span></span><br><span class="line"></span><br><span class="line">  environment location: /root/anaconda3/envs/py3.7.3</span><br><span class="line"></span><br><span class="line">  added / updated specs:</span><br><span class="line">    - python=3.7.3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">The following packages will be downloaded:</span><br><span class="line"></span><br><span class="line">    package                    |            build</span><br><span class="line">    ---------------------------|-----------------</span><br><span class="line">    _libgcc_mutex-0.1          |             main           3 KB  https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class="line">    ca-certificates-2020.6.24  |                0         125 KB  https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class="line">    certifi-2020.6.20          |           py37_0         156 KB  https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class="line">    libedit-3.1.20191231       |       h7b6447c_0         167 KB  https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class="line">    libffi-3.2.1               |       hd88cf55_4          40 KB  https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class="line">    libgcc-ng-9.1.0            |       hdf63c60_0         5.1 MB  https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class="line">    libstdcxx-ng-9.1.0         |       hdf63c60_0         3.1 MB  https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class="line">    ncurses-6.2                |       he6710b0_1         817 KB  https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class="line">    openssl-1.1.1g             |       h7b6447c_0         2.5 MB  https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class="line">    pip-20.1.1                 |           py37_1         1.7 MB  https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class="line">    python-3.7.3               |       h0371630_0        32.1 MB  https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class="line">    readline-7.0               |       h7b6447c_5         324 KB  https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class="line">    setuptools-47.3.1          |           py37_0         514 KB  https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class="line">    sqlite-3.32.3              |       h62c20be_0         1.1 MB  https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class="line">    tk-8.6.10                  |       hbc83047_0         3.0 MB  https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class="line">    wheel-0.34.2               |           py37_0          51 KB  https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class="line">    xz-5.2.5                   |       h7b6447c_0         341 KB  https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class="line">    zlib-1.2.11                |       h7b6447c_3         103 KB  https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class="line">    ------------------------------------------------------------</span><br><span class="line">                                           Total:        51.2 MB</span><br><span class="line"></span><br><span class="line">The following NEW packages will be INSTALLED:</span><br><span class="line"></span><br><span class="line">  _libgcc_mutex      anaconda/pkgs/main/linux-64::_libgcc_mutex-0.1-main</span><br><span class="line">  ca-certificates    anaconda/pkgs/main/linux-64::ca-certificates-2020.6.24-0</span><br><span class="line">  certifi            anaconda/pkgs/main/linux-64::certifi-2020.6.20-py37_0</span><br><span class="line">  libedit            anaconda/pkgs/main/linux-64::libedit-3.1.20191231-h7b6447c_0</span><br><span class="line">  libffi             anaconda/pkgs/main/linux-64::libffi-3.2.1-hd88cf55_4</span><br><span class="line">  libgcc-ng          anaconda/pkgs/main/linux-64::libgcc-ng-9.1.0-hdf63c60_0</span><br><span class="line">  libstdcxx-ng       anaconda/pkgs/main/linux-64::libstdcxx-ng-9.1.0-hdf63c60_0</span><br><span class="line">  ncurses            anaconda/pkgs/main/linux-64::ncurses-6.2-he6710b0_1</span><br><span class="line">  openssl            anaconda/pkgs/main/linux-64::openssl-1.1.1g-h7b6447c_0</span><br><span class="line">  pip                anaconda/pkgs/main/linux-64::pip-20.1.1-py37_1</span><br><span class="line">  python             anaconda/pkgs/main/linux-64::python-3.7.3-h0371630_0</span><br><span class="line">  readline           anaconda/pkgs/main/linux-64::readline-7.0-h7b6447c_5</span><br><span class="line">  setuptools         anaconda/pkgs/main/linux-64::setuptools-47.3.1-py37_0</span><br><span class="line">  sqlite             anaconda/pkgs/main/linux-64::sqlite-3.32.3-h62c20be_0</span><br><span class="line">  tk                 anaconda/pkgs/main/linux-64::tk-8.6.10-hbc83047_0</span><br><span class="line">  wheel              anaconda/pkgs/main/linux-64::wheel-0.34.2-py37_0</span><br><span class="line">  xz                 anaconda/pkgs/main/linux-64::xz-5.2.5-h7b6447c_0</span><br><span class="line">  zlib               anaconda/pkgs/main/linux-64::zlib-1.2.11-h7b6447c_3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Proceed ([y]/n)? y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Downloading and Extracting Packages</span><br><span class="line">libedit-3.1.20191231 | 167 KB    | <span class="comment">################################### | 100%</span></span><br><span class="line">xz-5.2.5             | 341 KB    | <span class="comment">################################### | 100%</span></span><br><span class="line">wheel-0.34.2         | 51 KB     | <span class="comment">################################### | 100%</span></span><br><span class="line">pip-20.1.1           | 1.7 MB    | <span class="comment">################################### | 100%</span></span><br><span class="line">openssl-1.1.1g       | 2.5 MB    | <span class="comment">################################### | 100%</span></span><br><span class="line">python-3.7.3         | 32.1 MB   | <span class="comment">################################### | 100%</span></span><br><span class="line">libstdcxx-ng-9.1.0   | 3.1 MB    | <span class="comment">################################### | 100%</span></span><br><span class="line">ca-certificates-2020 | 125 KB    | <span class="comment">################################### | 100%</span></span><br><span class="line">libffi-3.2.1         | 40 KB     | <span class="comment">################################### | 100%</span></span><br><span class="line">ncurses-6.2          | 817 KB    | <span class="comment">################################### | 100%</span></span><br><span class="line">certifi-2020.6.20    | 156 KB    | <span class="comment">################################### | 100%</span></span><br><span class="line">libgcc-ng-9.1.0      | 5.1 MB    | <span class="comment">################################### | 100%</span></span><br><span class="line">_libgcc_mutex-0.1    | 3 KB      | <span class="comment">################################### | 100%</span></span><br><span class="line">zlib-1.2.11          | 103 KB    | <span class="comment">################################### | 100%</span></span><br><span class="line">tk-8.6.10            | 3.0 MB    | <span class="comment">################################### | 100%</span></span><br><span class="line">setuptools-47.3.1    | 514 KB    | <span class="comment">################################### | 100%</span></span><br><span class="line">readline-7.0         | 324 KB    | <span class="comment">################################### | 100%</span></span><br><span class="line">sqlite-3.32.3        | 1.1 MB    | <span class="comment">################################### | 100%</span></span><br><span class="line">Preparing transaction: <span class="keyword">done</span></span><br><span class="line">Verifying transaction: <span class="keyword">done</span></span><br><span class="line">Executing transaction: <span class="keyword">done</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># To activate this environment, use</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     $ conda activate py3.7.3</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># To deactivate an active environment, use</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     $ conda deactivate</span></span><br></pre></td></tr></table></figure>
<p>激活虚拟环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda activate my_env_name</span><br></pre></td></tr></table></figure>
<p>激活之后，命令行的最前面就会出现虚拟环境的名字如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(py3.7.3) root@debian:~<span class="comment">#</span></span><br></pre></td></tr></table></figure>
<p>退出虚拟环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda deactivate</span><br></pre></td></tr></table></figure>
<h2
id="查看conda环境下所有的虚拟环境">查看Conda环境下所有的虚拟环境</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda info --envs</span><br></pre></td></tr></table></figure>
<h2 id="删除conda虚拟环境">删除Conda虚拟环境</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda remove -n my_env_name --all</span><br></pre></td></tr></table></figure>
<p><code>my_env_name</code>对应的就是要删除的虚拟环境名称</p>
]]></content>
      <categories>
        <category>环境配置</category>
      </categories>
      <tags>
        <tag>Anaconda</tag>
        <tag>虚拟环境</tag>
      </tags>
  </entry>
  <entry>
    <title>debian换源</title>
    <url>/post/be5bfb1b.html</url>
    <content><![CDATA[<h2 id="debian更换国内软件源">debian更换国内软件源</h2>
<h3 id="备份原软件源">备份原软件源</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv /etc/apt/sources.list /etc/apt/sources.list.bak</span><br></pre></td></tr></table></figure>
<h3 id="主要域名">主要域名</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://mirrors.163.com/debian/</span><br><span class="line">http://mirrors.aliyun.com/debian/</span><br><span class="line">https://mirrors.ustc.edu.cn/debian/</span><br><span class="line">https://mirrors.huaweicloud.com/debian/</span><br><span class="line">http://mirrors.cloud.tencent.com/debian/</span><br><span class="line">https://mirrors.tuna.tsinghua.edu.cn/debian/</span><br><span class="line">--------------------------------------------</span><br><span class="line">http://ftp.cn.debian.org/debian/</span><br><span class="line">http://ftp2.cn.debian.org/debian/</span><br><span class="line">https://mirror.sjtu.edu.cn/debian/</span><br><span class="line">https://mirrors.bfsu.edu.cn/debian/</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h3 id="debian-6">Debian 6</h3>
<p>阿里</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &gt;&gt; /etc/apt/sources.list  &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">deb http://mirrors.aliyun.com/debian/ squeeze main non-free contrib</span></span><br><span class="line"><span class="string">deb http://mirrors.aliyun.com/debian/ squeeze-proposed-updates main non-free contrib</span></span><br><span class="line"><span class="string">#deb-src http://mirrors.aliyun.com/debian/ squeeze main non-free contrib</span></span><br><span class="line"><span class="string">#deb-src http://mirrors.aliyun.com/debian/ squeeze-proposed-updates main non-free contrib</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>
<p>中科大</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &gt;&gt; /etc/apt/sources.list  &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">deb https://mirrors.ustc.edu.cn/debian/ stretch main contrib non-free</span></span><br><span class="line"><span class="string">deb https://mirrors.ustc.edu.cn/debian/ stretch-updates main contrib non-free</span></span><br><span class="line"><span class="string">deb https://mirrors.ustc.edu.cn/debian-security/ stretch/updates main contrib non-free</span></span><br><span class="line"><span class="string">#deb-src https://mirrors.ustc.edu.cn/debian/ stretch main contrib non-free</span></span><br><span class="line"><span class="string">#deb-src https://mirrors.ustc.edu.cn/debian/ stretch-updates main contrib non-free</span></span><br><span class="line"><span class="string">#deb-src https://mirrors.ustc.edu.cn/debian-security/ stretch/updates main contrib non-free</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>
<p>163</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &gt;&gt; /etc/apt/sources.list  &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">deb http://mirrors.163.com/debian/ squeeze main non-free contrib</span></span><br><span class="line"><span class="string">deb http://mirrors.163.com/debian/ squeeze-lts main non-free contrib</span></span><br><span class="line"><span class="string">deb http://mirrors.163.com/debian/ squeeze-updates main non-free contrib</span></span><br><span class="line"><span class="string">deb http://mirrors.163.com/debian-backports/ squeeze-backports main contrib non-free</span></span><br><span class="line"><span class="string">deb http://mirrors.163.com/debian-security/ squeeze/updates main non-free contrib</span></span><br><span class="line"><span class="string">#deb-src http://mirrors.163.com/debian/ squeeze main non-free contrib</span></span><br><span class="line"><span class="string">#deb-src http://mirrors.163.com/debian/ squeeze-lts main non-free contrib</span></span><br><span class="line"><span class="string">#deb-src http://mirrors.163.com/debian/ squeeze-updates main non-free contrib</span></span><br><span class="line"><span class="string">#deb-src http://mirrors.163.com/debian-backports/ squeeze-backports main contrib non-free</span></span><br><span class="line"><span class="string">#deb-src http://mirrors.163.com/debian-security/ squeeze/updates main non-free contrib</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>
<h3 id="debian-7">Debian 7</h3>
<p>阿里</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &gt;&gt; /etc/apt/sources.list  &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">deb http://mirrors.aliyun.com/debian/ wheezy main non-free contrib</span></span><br><span class="line"><span class="string">deb http://mirrors.aliyun.com/debian/ wheezy-proposed-updates main non-free contrib</span></span><br><span class="line"><span class="string">#deb-src http://mirrors.aliyun.com/debian/ wheezy main non-free contrib</span></span><br><span class="line"><span class="string">#deb-src http://mirrors.aliyun.com/debian/ wheezy-proposed-updates main non-free contrib</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>
<p>中科大</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &gt;&gt; /etc/apt/sources.list  &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">deb https://mirrors.ustc.edu.cn/debian/ wheezy main contrib non-free</span></span><br><span class="line"><span class="string">deb https://mirrors.ustc.edu.cn/debian/ wheezy-backports main contrib non-free</span></span><br><span class="line"><span class="string">deb https://mirrors.ustc.edu.cn/debian/ wheezy-updates main contrib non-free</span></span><br><span class="line"><span class="string">deb https://mirrors.ustc.edu.cn/debian-security/ wheezy/updates main contrib non-free</span></span><br><span class="line"><span class="string">#deb-src https://mirrors.ustc.edu.cn/debian/ wheezy main contrib non-free</span></span><br><span class="line"><span class="string">#deb-src https://mirrors.ustc.edu.cn/debian/ wheezy-backports main contrib non-free</span></span><br><span class="line"><span class="string">#deb-src https://mirrors.ustc.edu.cn/debian/ wheezy-updates main contrib non-free</span></span><br><span class="line"><span class="string">#deb-src https://mirrors.ustc.edu.cn/debian-security/ wheezy/updates main contrib non-free</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>
<p>163</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &gt;&gt; /etc/apt/sources.list  &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">deb http://mirrors.163.com/debian/ wheezy main non-free contrib</span></span><br><span class="line"><span class="string">deb http://mirrors.163.com/debian/ wheezy-backports main non-free contrib</span></span><br><span class="line"><span class="string">deb http://mirrors.163.com/debian/ wheezy-updates main non-free contrib</span></span><br><span class="line"><span class="string">deb http://mirrors.163.com/debian-security/ wheezy/updates main non-free contrib</span></span><br><span class="line"><span class="string">#deb-src http://mirrors.163.com/debian/ wheezy main non-free contrib</span></span><br><span class="line"><span class="string">#deb-src http://mirrors.163.com/debian/ wheezy-backports main non-free contrib</span></span><br><span class="line"><span class="string">#deb-src http://mirrors.163.com/debian/ wheezy-updates main non-free contrib</span></span><br><span class="line"><span class="string">#deb-src http://mirrors.163.com/debian-security/ wheezy/updates main non-free contrib</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>
<h3 id="debian-8">Debian 8</h3>
<p>阿里</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &gt;&gt; /etc/apt/sources.list  &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">deb http://mirrors.aliyun.com/debian/ jessie main non-free contrib</span></span><br><span class="line"><span class="string">deb http://mirrors.aliyun.com/debian/ jessie-proposed-updates main non-free contrib</span></span><br><span class="line"><span class="string">#deb-src http://mirrors.aliyun.com/debian/ jessie main non-free contrib</span></span><br><span class="line"><span class="string">#deb-src http://mirrors.aliyun.com/debian/ jessie-proposed-updates main non-free contrib</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>
<p>中科大</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &gt;&gt; /etc/apt/sources.list  &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">deb https://mirrors.ustc.edu.cn/debian/ jessie main contrib non-free</span></span><br><span class="line"><span class="string">deb https://mirrors.ustc.edu.cn/debian/ jessie-backports main contrib non-free</span></span><br><span class="line"><span class="string">deb https://mirrors.ustc.edu.cn/debian/ jessie-updates main contrib non-free</span></span><br><span class="line"><span class="string">deb https://mirrors.ustc.edu.cn/debian-security/ jessie/updates main contrib non-free</span></span><br><span class="line"><span class="string">#deb-src https://mirrors.ustc.edu.cn/debian/ jessie main contrib non-free</span></span><br><span class="line"><span class="string">#deb-src https://mirrors.ustc.edu.cn/debian/ jessie-backports main contrib non-free</span></span><br><span class="line"><span class="string">#deb-src https://mirrors.ustc.edu.cn/debian/ jessie-updates main contrib non-free</span></span><br><span class="line"><span class="string">#deb-src https://mirrors.ustc.edu.cn/debian-security/ jessie/updates main contrib non-free</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>
<p>163</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &gt;&gt; /etc/apt/sources.list  &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">deb http://mirrors.163.com/debian/ jessie main non-free contrib</span></span><br><span class="line"><span class="string">deb http://mirrors.163.com/debian/ jessie-backports main non-free contrib</span></span><br><span class="line"><span class="string">deb http://mirrors.163.com/debian/ jessie-updates main non-free contrib</span></span><br><span class="line"><span class="string">deb http://mirrors.163.com/debian-security/ jessie/updates main non-free contrib</span></span><br><span class="line"><span class="string">#deb-src http://mirrors.163.com/debian/ jessie main non-free contrib</span></span><br><span class="line"><span class="string">#deb-src http://mirrors.163.com/debian/ jessie-backports main non-free contrib</span></span><br><span class="line"><span class="string">#deb-src http://mirrors.163.com/debian/ jessie-updates main non-free contrib</span></span><br><span class="line"><span class="string">#deb-src http://mirrors.163.com/debian-security/ jessie/updates main non-free contrib</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>
<h3 id="debian-9">Debian 9</h3>
<p>阿里</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &gt;&gt; /etc/apt/sources.list  &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">deb http://mirrors.aliyun.com/debian stretch main contrib non-free</span></span><br><span class="line"><span class="string">deb http://mirrors.aliyun.com/debian stretch-updates main contrib non-free</span></span><br><span class="line"><span class="string">deb http://mirrors.aliyun.com/debian-security stretch/updates main contrib non-free</span></span><br><span class="line"><span class="string">#deb-src http://mirrors.aliyun.com/debian stretch main contrib non-free</span></span><br><span class="line"><span class="string">#deb-src http://mirrors.aliyun.com/debian stretch-updates main contrib non-free</span></span><br><span class="line"><span class="string">#deb-src http://mirrors.aliyun.com/debian-security stretch/updates main contrib non-free</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>
<p>中科大</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &gt;&gt; /etc/apt/sources.list  &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">deb http://mirrors.ustc.edu.cn/debian/ stretch main non-free contrib</span></span><br><span class="line"><span class="string">deb http://mirrors.ustc.edu.cn/debian/ stretch-backports main non-free contrib</span></span><br><span class="line"><span class="string">deb http://mirrors.ustc.edu.cn/debian/ stretch-proposed-updates main non-free contrib</span></span><br><span class="line"><span class="string">deb http://mirrors.ustc.edu.cn/debian/ stretch-updates main non-free contrib</span></span><br><span class="line"><span class="string">deb http://mirrors.ustc.edu.cn/debian-security/ stretch/updates main non-free contrib</span></span><br><span class="line"><span class="string">#deb-src http://mirrors.ustc.edu.cn/debian/ stretch main non-free contrib</span></span><br><span class="line"><span class="string">#deb-src http://mirrors.ustc.edu.cn/debian/ stretch-backports main non-free contrib</span></span><br><span class="line"><span class="string">#deb-src http://mirrors.ustc.edu.cn/debian/ stretch-proposed-updates main non-free contrib</span></span><br><span class="line"><span class="string">#deb-src http://mirrors.ustc.edu.cn/debian/ stretch-updates main non-free contrib</span></span><br><span class="line"><span class="string">#deb-src http://mirrors.ustc.edu.cn/debian-security/ stretch/updates main non-free contrib</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>
<p>163</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &gt;&gt; /etc/apt/sources.list  &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">deb http://mirrors.163.com/debian/ stretch main non-free contrib</span></span><br><span class="line"><span class="string">deb http://mirrors.163.com/debian/ stretch-backports main non-free contrib</span></span><br><span class="line"><span class="string">deb http://mirrors.163.com/debian/ stretch-updates main non-free contrib</span></span><br><span class="line"><span class="string">deb http://mirrors.163.com/debian-security/ stretch/updates main non-free contrib</span></span><br><span class="line"><span class="string">#deb-src http://mirrors.163.com/debian/ stretch main non-free contrib</span></span><br><span class="line"><span class="string">#deb-src http://mirrors.163.com/debian/ stretch-backports main non-free contrib</span></span><br><span class="line"><span class="string">#deb-src http://mirrors.163.com/debian/ stretch-updates main non-free contrib</span></span><br><span class="line"><span class="string">#deb-src http://mirrors.163.com/debian-security/ stretch/updates main non-free contrib</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>
<h3 id="debian-10">Debian 10</h3>
<p>阿里源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &gt;&gt; /etc/apt/sources.list  &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">deb http://mirrors.aliyun.com/debian/ buster main non-free contrib</span></span><br><span class="line"><span class="string">deb http://mirrors.aliyun.com/debian-security buster/updates main</span></span><br><span class="line"><span class="string">deb http://mirrors.aliyun.com/debian/ buster-updates main non-free contrib</span></span><br><span class="line"><span class="string">deb http://mirrors.aliyun.com/debian/ buster-backports main non-free contrib</span></span><br><span class="line"><span class="string">deb-src http://mirrors.aliyun.com/debian/ buster main non-free contrib</span></span><br><span class="line"><span class="string">deb-src http://mirrors.aliyun.com/debian-security buster/updates main</span></span><br><span class="line"><span class="string">deb-src http://mirrors.aliyun.com/debian/ buster-updates main non-free contrib</span></span><br><span class="line"><span class="string">deb-src http://mirrors.aliyun.com/debian/ buster-backports main non-free contrib</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>
<p>中科大</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &gt;&gt; /etc/apt/sources.list  &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">deb https://mirrors.ustc.edu.cn/debian/ buster main contrib non-free</span></span><br><span class="line"><span class="string">deb https://mirrors.ustc.edu.cn/debian/ buster-updates main contrib non-free</span></span><br><span class="line"><span class="string">deb https://mirrors.ustc.edu.cn/debian-security/ buster/updates main contrib non-free</span></span><br><span class="line"><span class="string">#deb-src https://mirrors.ustc.edu.cn/debian/ buster main contrib non-free</span></span><br><span class="line"><span class="string">#deb-src https://mirrors.ustc.edu.cn/debian/ buster-updates main contrib non-free</span></span><br><span class="line"><span class="string">#deb-src https://mirrors.ustc.edu.cn/debian-security/ buster/updates main contrib non-free</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>
<p>清华大学</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &gt;&gt; /etc/apt/sources.list  &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">deb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster main contrib non-free</span></span><br><span class="line"><span class="string">deb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-backports main contrib non-free</span></span><br><span class="line"><span class="string">deb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-updates main contrib non-free</span></span><br><span class="line"><span class="string">deb https://mirrors.tuna.tsinghua.edu.cn/debian-security buster/updates main contrib non-free</span></span><br><span class="line"><span class="string">#deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster main contrib non-free</span></span><br><span class="line"><span class="string">#deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-backports main contrib non-free</span></span><br><span class="line"><span class="string">#deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-updates main contrib non-free</span></span><br><span class="line"><span class="string">#deb-src https://mirrors.tuna.tsinghua.edu.cn/debian-security buster/updates main contrib non-free</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>
<h3 id="debian-11">Debian 11</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &gt;&gt; /etc/apt/sources.list  &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye main contrib non-free</span></span><br><span class="line"><span class="string">deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye-updates main contrib non-free</span></span><br><span class="line"><span class="string">deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye-backports main contrib non-free</span></span><br><span class="line"><span class="string">deb https://mirrors.tuna.tsinghua.edu.cn/debian-security bullseye-security main contrib non-free</span></span><br><span class="line"><span class="string"># deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye main contrib non-free</span></span><br><span class="line"><span class="string"># deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye-updates main contrib non-free</span></span><br><span class="line"><span class="string"># deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye-backports main contrib non-free</span></span><br><span class="line"><span class="string"># deb-src https://mirrors.tuna.tsinghua.edu.cn/debian-security bullseye-security main contrib non-free</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>环境配置</category>
      </categories>
      <tags>
        <tag>镜像源</tag>
        <tag>Debian</tag>
        <tag>国内源</tag>
      </tags>
  </entry>
  <entry>
    <title>jupyter lab配置</title>
    <url>/post/6d3a688c.html</url>
    <content><![CDATA[<h2 id="写在前面">写在前面</h2>
<p>Jupyter lab是以前 Jupyter
Notebook的升级版，功能更多，配置起来也和Jupyter
Notebook很相似，但也有一些不同。在这里记录一下。</p>
<h2 id="安装">安装</h2>
<h3 id="conda-安装">conda 安装</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda install -c conda-forge jupyterlab</span><br></pre></td></tr></table></figure>
<h3 id="pip-安装">pip 安装</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3 install jupyterlab</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h2 id="配置">配置</h2>
<h3 id="生成配置文件">生成配置文件</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jupyter lab --generate-config</span><br></pre></td></tr></table></figure>
<h3 id="更改页面名字">更改页面名字</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jupyter lab build --name=<span class="string">&quot;CruiseTian&#x27;s Juypter Lab&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="设置密码">设置密码</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jupyter lab password</span><br></pre></td></tr></table></figure>
<h3 id="修改配置文件">修改配置文件</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.jupyter/jupyter_lab_config.py</span><br><span class="line">修改以下配置，并把开头的 <span class="string">&#x27;#&#x27;</span> 注释去掉, 或者直接在底部添加</span><br><span class="line">c.ServerApp.ip = <span class="string">&#x27;*&#x27;</span> <span class="comment"># 开启所有的IP访问，即可使用远程访问</span></span><br><span class="line">c.ServerApp.open_browser = False <span class="comment"># 关闭启动后的自动开启浏览器</span></span><br><span class="line">c.ServerApp.allow_root = True <span class="comment"># 允许root运行</span></span><br><span class="line">c.ServerApp.port = 8889  <span class="comment"># 设置端口8888，也可用其他的，比如1080，8080等等</span></span><br><span class="line">c.ServerApp.notebook_dir = u<span class="string">&#x27;/root/jupyter&#x27;</span>  <span class="comment"># 设置jupyter notebook根目录</span></span><br><span class="line">c.ServerApp.password = u<span class="string">&#x27;sha1:xxxxx&#x27;</span> <span class="comment">#将你上一步得到的密码填入其中</span></span><br><span class="line">c.ServerApp.allow_origin = <span class="string">&#x27;*&#x27;</span></span><br><span class="line">c.ServerApp.allow_remote_access = True</span><br><span class="line">c.ServerApp.local_hostnames = [<span class="string">&#x27;*&#x27;</span>]</span><br><span class="line">c.ServerApp.ip = <span class="string">&#x27;*&#x27;</span> <span class="comment"># 开启所有的IP访问，即可使用远程访问</span></span><br></pre></td></tr></table></figure>
<h2
id="使用systemctl注册jupyter为服务">使用systemctl注册jupyter为服务</h2>
<h3 id="创建服务脚本">创建服务脚本</h3>
<p>终端输入
<code>vim /usr/lib/systemd/system/jupyterlab.service</code>,将以下内容复制进去</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Jupyter Lab</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">ExecStart=/root/miniconda3/bin/jupyter-lab  --config=/root/.jupyter/jupyter_lab_config.py</span><br><span class="line">Restart=always</span><br><span class="line">RestartSec=10</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>
<h3 id="启动jupyter并设置开机自启">启动jupyter并设置开机自启</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重载systemctl</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line"><span class="comment"># 配置开机启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> jupyterlab</span><br><span class="line"><span class="comment"># 启动jupyter</span></span><br><span class="line">systemctl start jupyterlab</span><br></pre></td></tr></table></figure>
<h2 id="nginx反代">nginx反代</h2>
<p>先修改jupyter
notebook的配置文件jupyter_lab_config.py。增加下面两行。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c.ServerApp.base_url = <span class="string">&#x27;/lab/&#x27;</span></span><br></pre></td></tr></table></figure>
<p>重启jupyter notebook</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart jupyterlab</span><br></pre></td></tr></table></figure>
<p>然后在nginx的配置文件中增加如下内容，重启nginx，即可用https://cruisetian.cn/lab访问jupyter
lab了。</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">location</span> /lab/ &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://127.0.0.1:8889;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Host $host;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Real-Scheme $scheme;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Real-IP $remote_addr;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Upgrade $http_upgrade;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Connection <span class="string">&quot;upgrade&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">proxy_read_timeout</span> <span class="number">120s</span>;</span><br><span class="line">    <span class="attribute">proxy_next_upstream</span> <span class="literal">error</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 添加完上述代码以后直接打开会出现python图标无法显示，所以加入下面的配置，就可以解决这个问题。</span></span><br><span class="line"><span class="attribute">location</span> <span class="regexp">~ /kernelspecs/</span> &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://127.0.0.1:8889;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Host $host;</span><br><span class="line">    <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Upgrade <span class="string">&quot;websocket&quot;</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Connection <span class="string">&quot;Upgrade&quot;</span>;</span><br><span class="line">    <span class="attribute">proxy_read_timeout</span> <span class="number">86400</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>环境配置</category>
      </categories>
      <tags>
        <tag>Anaconda</tag>
        <tag>python</tag>
        <tag>jupyter lab</tag>
      </tags>
  </entry>
  <entry>
    <title>python虚拟环境再探索(virtualenv,virtualenvwrapper)</title>
    <url>/post/f9c8ed6.html</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<p>最近在本地做实验的时候，要启动一个服务，需要配置一个虚拟环境，防止本地环境的混乱，由于没有安装<code>conda</code>，所以就采用<code>virtualenv</code>和<code>virtualenvwrapper</code>来尝试搭建虚拟环境，这里记录一下过程，方便查阅。</p>
<h2 id="环境">环境</h2>
<ul>
<li>Debian10系统</li>
<li>python 3.7.3</li>
<li>pip3 18.1</li>
</ul>
<span id="more"></span>
<h2 id="使用virtuanenv搭建虚拟环境">使用virtuanenv搭建虚拟环境</h2>
<h3 id="安装">安装</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3 install virtualenv</span><br></pre></td></tr></table></figure>
<h3 id="创建虚拟环境">创建虚拟环境</h3>
<p>使用<code>virtualenv</code>命令创建虚拟环境：<code>virtualenv [虚拟环境名]</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir myproject <span class="comment">#创建虚拟环境仓库</span></span><br><span class="line"><span class="built_in">cd</span> myproject</span><br><span class="line">virtualenv --no-site-packages venv</span><br></pre></td></tr></table></figure>
<p>命令<code>virtualenv</code>就可以创建一个独立的Python运行环境，再加上参数<code>--no-site-packages</code>，可以让已经安装到系统Python环境中的所有第三方包都不会复制过来，这样，就得到了一个不带任何第三方包的“干净”的Python运行环境。</p>
<h3 id="激活虚拟环境">激活虚拟环境</h3>
<p>可以用<code>source</code>进入该环境，执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> venv/bin/activate</span><br></pre></td></tr></table></figure>
<p>没有问题的话就可以看到命令提示符变了，有个<code>(venv)</code>前缀，表示当前环境是一个名为<code>venv</code>的Python环境。</p>
<h3 id="退出虚拟环境">退出虚拟环境</h3>
<p>退出虚拟环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure>
<p>如果想要删除虚拟环境，只需删除虚拟环境目录即可。</p>
<h2 id="使用virtualenvwrapper">使用virtualenvwrapper</h2>
<p><code>virtualenvwrapper</code>是一种<code>virtualenv</code>虚拟环境的管理工具。</p>
<h3 id="安装-1">安装</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3 install virtualenvwrapper</span><br></pre></td></tr></table></figure>
<h3 id="配置">配置</h3>
<p>首先查找配置脚本的位置，因为环境里python的安装目录不同，执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find / -name virtualenvwrapper.sh</span><br></pre></td></tr></table></figure>
<p>设置环境变量，在<code>.bashrc</code>或<code>.profile</code>文件中加入三行代码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> WORKON_HOME=<span class="variable">$HOME</span>/.virtualenvs</span><br><span class="line"><span class="built_in">export</span> PROJECT_HOME=<span class="variable">$HOME</span>/Devel</span><br><span class="line"><span class="built_in">source</span> /usr/<span class="built_in">local</span>/bin/virtualenvwrapper.sh <span class="comment"># 替换为上一步找到的path</span></span><br></pre></td></tr></table></figure>
<p>参数说明：</p>
<ul>
<li>WORKON_HOME：表示存放虚拟环境的位置</li>
<li>PROJECT_HOME：表示项目工作目录的位置（使用<code>mkproject</code>命令时会用到）</li>
<li>source：待载入Shell文件的路径</li>
</ul>
<p>编辑完后执行<code>source ~/.bashrc</code>重新加载配置文件即可正常使用命令。顺带一提，配置文件重新加载后会自动创建<code>.virtualenvs</code>文件夹，却不会自动创建<code>Devel</code>文件夹，所以还是需要使用<code>mkdir $HOME/Devel</code>手动创建文件夹。</p>
<h3 id="虚拟环境管理常用命令">虚拟环境管理(常用命令)</h3>
<h4 id="创建虚拟环境-1"><strong>创建虚拟环境</strong></h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkvirtualenv [-a project_path] [-i package] [-r requirements_file] [virtualenv options] ENVNAME</span><br></pre></td></tr></table></figure>
<p>参数说明：</p>
<ul>
<li>-i：指定一个或多个包</li>
<li>-a：指定一个项目目录，用于将该虚拟环境绑定至一个现有项目</li>
<li>-r：指定一个requirements文件，一般是由<code>pip freeze</code>所生成的，里面包括了需要用到的所有包</li>
<li>virtualenv
options：参数将直接传递给<code>virtualenv</code>，详情参阅<a
href="https://virtualenv.pypa.io/en/stable/">virtualenv官方文档</a></li>
</ul>
<p>例如</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkvirtualenv tensorflow <span class="comment">#会创建一个名为tensorflow的虚拟环境并激活，之后pip安装的所有包都仅仅存在于这个环境中。</span></span><br><span class="line">mkvirtualenv paddle</span><br></pre></td></tr></table></figure>
<h4
id="将现有的虚拟环境绑定到现有的项目"><strong>将现有的虚拟环境绑定到现有的项目</strong></h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">setvirtualenvproject [virtualenv_path project_path]</span><br></pre></td></tr></table></figure>
<p>如果不指定参数，则默认为当前虚拟环境和当前目录作为参数，单个项目可以绑定多个虚拟环境，从而可以轻松地在不同的Python版本或依赖之间切换以进行测试。</p>
<h4 id="列出所有的虚拟环境"><strong>列出所有的虚拟环境</strong></h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsvirtualenv -b</span><br></pre></td></tr></table></figure>
<h4 id="启动切换虚拟环境"><strong>启动/切换虚拟环境</strong></h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">workon tensorflow</span><br><span class="line">workon paddle</span><br></pre></td></tr></table></figure>
<h4
id="进入到当前虚拟环境目录"><strong>进入到当前虚拟环境目录</strong></h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cdvirtualenv</span><br></pre></td></tr></table></figure>
<h4 id="退出虚拟环境-1"><strong>退出虚拟环境</strong></h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure>
<h4 id="删除虚拟环境"><strong>删除虚拟环境</strong></h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rmvirtualenv paddle</span><br><span class="line">rmvirtualenv tensorflow</span><br></pre></td></tr></table></figure>
<h4 id="复制虚拟环境"><strong>复制虚拟环境</strong></h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cpvirtualenv work develop <span class="comment"># 复制虚拟环境work为develop</span></span><br></pre></td></tr></table></figure>
<p><code>lssitepackages</code>列出当前环境所有site-packages内容，<code>cdsitepackages</code>清楚环境内所有第三方包</p>
<h3 id="其他命令">其他命令</h3>
<ul>
<li><p><strong><code>cdvirtualenv [subdir]</code></strong>:此时在一个虚拟环境中，改变当前工作目录到该虚拟环境所在目录，如果后面加subdir，则直接进入虚拟环境下的子目录</p></li>
<li><p><strong><code>mktmpenv</code></strong>:创建一个临时环境，当deactivate时，环境被删除</p></li>
<li><p><strong><code>cdsitepackages [subdir]</code></strong>:改变当前工作目录到
site-packages for $VIRTUAL_ENV</p></li>
<li><p><strong><code>lssitepackages</code></strong>:列出当前激活的虚拟环境site-packages中的文件及子目录</p></li>
<li><p><strong><code>mkproject</code></strong>:用法：<code>mkproject [-f|--force] [-t template] [virtualenv_options] ENVNAME</code>，创建一个新的虚拟环境在<code>WORKON_HOME</code>
和工程目录在<code>PROJECT_HOME</code>，工程目录与虚拟环境绑定，每次<code>workon ENVNAME</code>
直接使用python虚拟环境在项目目录下工作</p></li>
<li><h6
id="wipeenv-删除当前虚拟环境中安装的所有的第三方包"><strong><code>wipeenv</code></strong>:
删除当前虚拟环境中安装的所有的第三方包</h6></li>
<li><p><strong><code>showvirtualenv</code></strong>:显示单个虚拟环境的详细信息</p></li>
</ul>
]]></content>
      <categories>
        <category>环境配置</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>虚拟环境</tag>
        <tag>virtuanenv</tag>
        <tag>virtuanenvwrapper</tag>
      </tags>
  </entry>
  <entry>
    <title>jupyter notebook设置</title>
    <url>/post/9e7f59f2.html</url>
    <content><![CDATA[<h2 id="安装">安装</h2>
<h3 id="conda-安装">conda 安装</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda install jupyter notebook</span><br></pre></td></tr></table></figure>
<h3 id="pip-安装">pip 安装</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3 install jupyter</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h2 id="配置">配置</h2>
<h3 id="生成配置文件">生成配置文件</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jupyter notebook --generate-config</span><br></pre></td></tr></table></figure>
<h3 id="设置密码">设置密码</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jupyter notebook password</span><br></pre></td></tr></table></figure>
<h3 id="修改配置文件">修改配置文件</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.jupyter/jupyter_notebook_config.py</span><br><span class="line">修改以下配置，并把开头的 <span class="comment"># 注释去掉</span></span><br><span class="line">c.NotebookApp.ip = <span class="string">&#x27;*&#x27;</span> <span class="comment"># 开启所有的IP访问，即可使用远程访问</span></span><br><span class="line">c.NotebookApp.open_browser = False <span class="comment"># 关闭启动后的自动开启浏览器</span></span><br><span class="line">c.NotebookApp.port = 8888  <span class="comment"># 设置端口8888，也可用其他的，比如1080，8080等等</span></span><br><span class="line">c.NotebookApp.notebook_dir = u<span class="string">&#x27;/root/jupyter&#x27;</span> <span class="comment"># 设置jupyter notebook根目录</span></span><br></pre></td></tr></table></figure>
<h3 id="conda虚拟环境切换">conda虚拟环境切换</h3>
<p>需要安装关联Jupyter
Notebook和conda的环境和包——“nb_conda”，命令如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda install nb_conda</span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载命令</span></span><br><span class="line">canda remove nb_conda</span><br></pre></td></tr></table></figure>
<h3 id="拓展安装">拓展安装</h3>
<h4 id="安装nbextensions插件">安装nbextensions插件</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过pip安装</span></span><br><span class="line">pip install jupyter_contrib_nbextensions</span><br><span class="line"><span class="comment"># 通过conda安装</span></span><br><span class="line">conda install -c conda-forge jupyter_contrib_nbextensions</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装完后激活 nbextensions</span></span><br><span class="line">jupyter contrib nbextension install --user </span><br></pre></td></tr></table></figure>
<h4 id="安装并启用-jupyter-nbextensions-configurator">安装并启用 Jupyter
Nbextensions Configurator</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install jupyter_nbextensions_configurator</span><br><span class="line">jupyter nbextensions_configurator <span class="built_in">enable</span> --user</span><br></pre></td></tr></table></figure>
<p>之后便可在 <code>url/nbextensions</code> 的位置打开 configurator
进行设置了,例如启动 Jupyter Notebook 之后的网址为
<code>http://localhost:8888/tree</code>，那么 Jupyter Nbextensions
Configurator 的设置地址则为
<code>http://localhost:8888/nbextensions</code>.</p>
<p>如果此时Nbextensions扩展功能后不显示标签，使用如下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jupyter contrib nbextension install --user</span><br></pre></td></tr></table></figure>
<h2 id="启动jupyter">启动jupyter</h2>
<p>在终端输入<code>jupyter notebook</code>即可启动jupyter
notebook，然后在浏览器输入<code>http://ip:port</code>即可访问，启动后大概如下图所示</p>
<figure>
<img data-src="http://figure.cruisetian.top/img/jupyterconfig.png"
alt="jupyterconfig" />
<figcaption aria-hidden="true">jupyterconfig</figcaption>
</figure>
<p>这个页面显示的就是nbextensions页面，可以选择自己喜欢的插件来安装，上面打勾的插件就是我安装的。</p>
<h2
id="使用systemctl注册jupyter为服务">使用systemctl注册jupyter为服务</h2>
<h3 id="创建服务脚本">创建服务脚本</h3>
<p>终端输入
<strong><code>vim /usr/lib/systemd/system/jupyter.service</code></strong>,将以下内容复制进去</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Jupyter Notebook</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">ExecStart=/root/miniconda3/bin/jupyter-notebook  --config=/root/.jupyter/jupyter_notebook_config.py --allow-root --no-browser</span><br><span class="line">Restart=always</span><br><span class="line">RestartSec=10</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>
<h3 id="启动jupyter并设置开机自启">启动jupyter并设置开机自启</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重载systemctl</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line"><span class="comment"># 配置开机启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> jupyter</span><br><span class="line"><span class="comment"># 启动jupyter</span></span><br><span class="line">systemctl start jupyter</span><br></pre></td></tr></table></figure>
<h2 id="nginx反代">nginx反代</h2>
<p>先修改jupyter
notebook的配置文件jupyter_notebook_config.py。增加下面两行。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c.NotebookApp.base_url = <span class="string">&#x27;/jupyter/&#x27;</span></span><br></pre></td></tr></table></figure>
<p>重启jupyter notebook</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart jupyter</span><br></pre></td></tr></table></figure>
<p>然后在nginx的配置文件中增加如下内容，重启nginx，即可用https://cruisetian.cn/jupyter访问jupyter
notebook了。</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">location</span> /jupyter/ &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://127.0.0.1:8888;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Host $host;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Real-Scheme $scheme;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Real-IP $remote_addr;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Upgrade $http_upgrade;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Connection <span class="string">&quot;upgrade&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">proxy_read_timeout</span> <span class="number">120s</span>;</span><br><span class="line">    <span class="attribute">proxy_next_upstream</span> <span class="literal">error</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>环境配置</category>
      </categories>
      <tags>
        <tag>Anaconda</tag>
        <tag>python</tag>
        <tag>jupyter notebook</tag>
      </tags>
  </entry>
  <entry>
    <title>pytorch搭建CNN网络实现MNIST数据集的图像分类</title>
    <url>/post/28e069b6.html</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<p>最近趁着学校暑期实验室实践进了实验室，跟着导师参与一些简单的项目，学习一些知识，积累一点经验，由于参与的项目是与深度学习有关的，所以也算入了深度学习的坑，开始学一点基础知识，这篇文章就算是深度学习之旅的开端吧，搭建了第一个CNN网络，做出了第一个图像分类器，最然只是最简单的东西，但是也算是入了门，相信以后会学到更多的更深入的东西，特意在此记录一下做出的成果。</p>
<p>顺便一提，我在GitHub上新建了一个repo，会陆陆续续把自己学习深度学习过程中做的一些东西和一些经验分享上去（虽然现在还很空荡），欢迎大家star和fork。链接在此：<a
href="https://github.com/CruiseTian/begin-deep-learning">begin-deep-learning</a></p>
<span id="more"></span>
<h2 id="代码部分">代码部分</h2>
<p>代码各部分都做了一定的注释，所以这里就不再一一解释，可能之后还会出<code>jupyter notebook</code>版本，会加上更加详尽的注释，可能会更加清晰。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms <span class="keyword">as</span> transforms</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> torch.autograd <span class="keyword">import</span> Variable</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载mnist数据集</span></span><br><span class="line">EPOCH = <span class="number">5</span></span><br><span class="line">BATCH_SIZE = <span class="number">100</span></span><br><span class="line">LR = <span class="number">0.001</span></span><br><span class="line">DEVICE = torch.device(<span class="string">&#x27;cuda&#x27;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&#x27;cpu&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">transform=torchvision.transforms.Compose([</span></span><br><span class="line"><span class="string">                               torchvision.transforms.ToTensor(),</span></span><br><span class="line"><span class="string">                               torchvision.transforms.Normalize(</span></span><br><span class="line"><span class="string">                                 (0.1307,), (0.3081,))</span></span><br><span class="line"><span class="string">                             ])</span></span><br><span class="line"><span class="string">     &#x27;&#x27;&#x27;</span></span><br><span class="line">train_data = torchvision.datasets.MNIST( <span class="comment"># train_set</span></span><br><span class="line">    root=<span class="string">&#x27;./data/&#x27;</span>,</span><br><span class="line">    train=<span class="literal">True</span>,</span><br><span class="line">    transform=transforms.ToTensor(),</span><br><span class="line">    download=<span class="literal">False</span> <span class="comment"># 首次使用设为True来下载数据集，之后设为False</span></span><br><span class="line">)</span><br><span class="line">test_data = torchvision.datasets.MNIST( <span class="comment"># test_set</span></span><br><span class="line">    root=<span class="string">&#x27;./data/&#x27;</span>,</span><br><span class="line">    train=<span class="literal">False</span>,</span><br><span class="line">    transform=transforms.ToTensor(),</span><br><span class="line">    download=<span class="literal">False</span></span><br><span class="line">)</span><br><span class="line">train_loader = DataLoader(</span><br><span class="line">    dataset=train_data,</span><br><span class="line">    batch_size=BATCH_SIZE,</span><br><span class="line">    shuffle=<span class="literal">True</span></span><br><span class="line">)</span><br><span class="line">test_loader = DataLoader(</span><br><span class="line">    dataset=test_data,</span><br><span class="line">    batch_size=BATCH_SIZE,</span><br><span class="line">    shuffle=<span class="literal">False</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"># 查看数据（可视化数据）</span></span><br><span class="line"><span class="string">def datashow(train_loader):</span></span><br><span class="line"><span class="string">    images, label = next(iter(train_loader))</span></span><br><span class="line"><span class="string">    images_example = torchvision.utils.make_grid(images)</span></span><br><span class="line"><span class="string">    images_example = images_example.numpy().transpose(1,2,0) # 将图像的通道值置换到最后的维度，符合图像的格式</span></span><br><span class="line"><span class="string">    mean = [0.5,0.5,0.5]</span></span><br><span class="line"><span class="string">    std = [0.5,0.5,0.5]</span></span><br><span class="line"><span class="string">    images_example = images_example * std + mean</span></span><br><span class="line"><span class="string">    print(labels)</span></span><br><span class="line"><span class="string">    plt.imshow(images_example )</span></span><br><span class="line"><span class="string">    plt.show()</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型搭建（参考pytorch官网）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Net</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(Net, self).__init__()</span><br><span class="line">        <span class="comment"># 1 input image channel, 6 output channels, 5x5 square convolution</span></span><br><span class="line">        <span class="comment"># kernel</span></span><br><span class="line">        self.conv1 = nn.Conv2d(<span class="number">1</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">        self.conv2 = nn.Conv2d(<span class="number">6</span>, <span class="number">16</span>, <span class="number">5</span>)</span><br><span class="line">        <span class="comment"># an affine operation: y = Wx + b</span></span><br><span class="line">        self.fc1 = nn.Linear(<span class="number">16</span> * <span class="number">5</span> * <span class="number">5</span>, <span class="number">120</span>)</span><br><span class="line">        self.fc2 = nn.Linear(<span class="number">120</span>, <span class="number">84</span>)</span><br><span class="line">        self.fc3 = nn.Linear(<span class="number">84</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        <span class="comment"># Max pooling over a (2, 2) window</span></span><br><span class="line">        x = F.max_pool2d(F.relu(self.conv1(x)), (<span class="number">2</span>, <span class="number">2</span>))</span><br><span class="line">        <span class="comment"># If the size is a square you can only specify a single number</span></span><br><span class="line">        x = F.max_pool2d(F.relu(self.conv2(x)), <span class="number">2</span>)</span><br><span class="line">        x = x.view(-<span class="number">1</span>, self.num_flat_features(x))</span><br><span class="line">        x = F.relu(self.fc1(x))</span><br><span class="line">        x = F.relu(self.fc2(x))</span><br><span class="line">        x = self.fc3(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">num_flat_features</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        size = x.size()[<span class="number">1</span>:]  <span class="comment"># all dimensions except the batch dimension</span></span><br><span class="line">        num_features = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> size:</span><br><span class="line">            num_features *= s</span><br><span class="line">        <span class="keyword">return</span> num_features</span><br><span class="line"></span><br><span class="line">net = Net().to(device=DEVICE)</span><br><span class="line"><span class="comment"># 定义损失函数和优化函数</span></span><br><span class="line">criterion = nn.CrossEntropyLoss()</span><br><span class="line">optimizer = optim.Adam(net.parameters(), lr=LR)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">train_counter = []</span><br><span class="line">train_losses = []</span><br><span class="line">train_accs = []</span><br><span class="line">test_losses = []</span><br><span class="line">test_counter = [i*<span class="built_in">len</span>(train_loader.dataset) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(EPOCH)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型训练</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span>(<span class="params">epoch</span>):</span></span><br><span class="line">    <span class="comment">#for epoch in range(EPOCH):  # loop over the dataset multiple times</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#train_loss = 0.0</span></span><br><span class="line">    <span class="keyword">for</span> i, data <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_loader, <span class="number">0</span>):</span><br><span class="line">        <span class="comment"># get the inputs</span></span><br><span class="line">        inputs, labels = data</span><br><span class="line">        inputs, labels = Variable(inputs).cuda(), Variable(labels).cuda()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># zero the parameter gradients</span></span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># forward + backward + optimize</span></span><br><span class="line">        outputs = net(inputs) <span class="comment"># 将数据传入网络进行前向运算</span></span><br><span class="line">        loss = criterion(outputs, labels) <span class="comment"># 得到损失函数</span></span><br><span class="line">        loss.backward() <span class="comment"># 反向传播</span></span><br><span class="line">        optimizer.step() <span class="comment"># 通过梯度做一步参数更新</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># print statistics</span></span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">100</span> == <span class="number">99</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Train Epoch: &#123;&#125; [&#123;&#125;/&#123;&#125; (&#123;:.0f&#125;%)]\tLoss: &#123;:.6f&#125;&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">                epoch, (i+<span class="number">1</span>) * <span class="built_in">len</span>(inputs), <span class="built_in">len</span>(train_loader.dataset),</span><br><span class="line">                <span class="number">100.</span> * i / <span class="built_in">len</span>(train_loader), loss.item()))</span><br><span class="line">        train_losses.append(loss.item())</span><br><span class="line">        train_counter.append((i*BATCH_SIZE) + ((epoch-<span class="number">1</span>)*<span class="built_in">len</span>(train_loader.dataset)))</span><br><span class="line"></span><br><span class="line">        correct = <span class="number">0</span></span><br><span class="line">        total = <span class="number">0</span></span><br><span class="line">        _, predicted = torch.<span class="built_in">max</span>(outputs.data, <span class="number">1</span>)</span><br><span class="line">        total = labels.size(<span class="number">0</span>)<span class="comment"># labels 的长度</span></span><br><span class="line">        correct = (predicted == labels).<span class="built_in">sum</span>().item() <span class="comment"># 预测正确的数目</span></span><br><span class="line">        train_accs.append(<span class="number">100</span>*correct/total)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Finished Training&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型测试</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>+<span class="string">&quot;Begin Testing&quot;</span>+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    net.<span class="built_in">eval</span>()</span><br><span class="line">    correct = <span class="number">0</span></span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    test_loss = <span class="number">0</span></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        <span class="keyword">for</span> data <span class="keyword">in</span> test_loader:</span><br><span class="line">            images, labels = data</span><br><span class="line">            images, labels = Variable(images).cuda(), Variable(labels).cuda()</span><br><span class="line">            outputs = net(images)</span><br><span class="line">            loss = criterion(outputs, labels) <span class="comment"># 得到损失函数</span></span><br><span class="line">            test_loss += loss.item()</span><br><span class="line">            _, predicted = torch.<span class="built_in">max</span>(outputs.data, <span class="number">1</span>)</span><br><span class="line">            total += labels.size(<span class="number">0</span>)</span><br><span class="line">            correct += (predicted == labels).<span class="built_in">sum</span>().item()</span><br><span class="line">    test_loss /= total</span><br><span class="line">    test_losses.append(test_loss)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Test set: Avg. loss: &#123;:.4f&#125;, Accuracy: &#123;&#125;/&#123;&#125; (&#123;:.0f&#125;%)\n&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">    test_loss, correct, total,</span><br><span class="line">    <span class="number">100.</span> * correct / total))</span><br><span class="line"></span><br><span class="line">    class_correct = <span class="built_in">list</span>(<span class="number">0.</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line">    class_total = <span class="built_in">list</span>(<span class="number">0.</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        <span class="keyword">for</span> data <span class="keyword">in</span> test_loader:</span><br><span class="line">            images, labels = data</span><br><span class="line">            images, labels = Variable(images).cuda(), Variable(labels).cuda()</span><br><span class="line">            outputs = net(images)</span><br><span class="line">            _, predicted = torch.<span class="built_in">max</span>(outputs, <span class="number">1</span>)</span><br><span class="line">            c = (predicted == labels).squeeze()</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">                label = labels[i]</span><br><span class="line">                class_correct[label] += c[i].item()</span><br><span class="line">                class_total[label] += <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Accuracy of %s : %2d %%&#x27;</span> % (i, <span class="number">100</span> * class_correct[i] / class_total[i]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, EPOCH + <span class="number">1</span>):</span><br><span class="line">    train(epoch)</span><br><span class="line">    test()</span><br><span class="line">fig = plt.figure()</span><br><span class="line">plt.plot(train_counter, train_losses, color=<span class="string">&#x27;blue&#x27;</span>)</span><br><span class="line">plt.scatter(test_counter, test_losses, color=<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">plt.legend([<span class="string">&#x27;Train Loss&#x27;</span>, <span class="string">&#x27;Test Loss&#x27;</span>], loc=<span class="string">&#x27;upper right&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;epoch&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;loss&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<h2 id="结果展示">结果展示</h2>
<p>结果图如下：</p>
<p><img
src="http://figure.cruisetian.top/img/Snipaste_2020-07-29_23-20-48.jpg" /></p>
<p>自行修改<code>EPOCH</code>和<code>LR</code>可以得到不同的结果，代码中为我调好的参数，可以看出只需要训练四轮左右就可以达到99%的准确率。</p>
]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>pytorch</tag>
        <tag>深度学习</tag>
        <tag>图像分类</tag>
        <tag>CNN</tag>
        <tag>MNIST</tag>
      </tags>
  </entry>
  <entry>
    <title>pytorch搭建VGG并训练花分类数据集</title>
    <url>/post/eedc6243.html</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<p>这是<code>pytorch</code>深度学习的第三篇，第一篇为<a
href="https://cruisetian.top/post/28e069b6.html">pytorch搭建CNN网络实现MNIST数据集的图像分类</a>
，第二篇为<a
href="https://cruisetian.top/post/39d19253.html">pytorch搭建AlexNet并训练花分类数据集</a>,本篇将继续深入深度学习，介绍深度学习领域的经典神经网络——VGGNet，并利用<code>pytorch</code>自己动手搭建一个VGG-16网络来训练一个花分类的数据集。同时，本篇文章所有的代码都已上传github，欢迎大家star和fork。链接在此：<a
href="https://github.com/CruiseTian/begin-deep-learning">begin-deep-learning</a></p>
<h2 id="vgg简介">VGG简介</h2>
<p>VGG 在2014年由牛津大学著名研究组 <strong>VGG</strong>（<strong>Visual
Geometry Group</strong>）提出，斩获该年 ImageNet 竞赛中 Localization
Task（定位任务）第一名和 Classification
Task（分类任务）第二名。该模型的主要工作是证明了增加网络的深度能够在一定程度上影响网络最终的性能。VGG有常见的两种结构，分别是VGG16和VGG19，两者除了网络深度不一样，其本质并没有什么区别。其中VGG16包含了13个卷积层和3个全连层；VGG19包含了16个卷积层和3个全连层。</p>
<span id="more"></span>
<p>同时，VGG网络的一个创新点是通过堆叠多个小卷积核来替代大尺度卷积核，可以减少训练参数，同时能保证相同的感受野。例如，两个3x3步长为1的卷积核的叠加，其感受野相当与一个5x5的卷积核。但是采用堆积的小卷积核是优于大卷积核的，因为层数的增加，增加了网络的非线性，从而能让网络来学习更复杂的模型。并且小卷积核的参数更少，例如，假设使用3x3的卷积核，那么堆叠3次3x3的卷积网络的参数是<span
class="math inline">\(3\times3^2C^2=27C^2\)</span>，而使用一个7x7的卷积核的参数是<span
class="math inline">\(7^2C^2=49C^2\)</span>，这里的C是输入和输出的通道数。</p>
<h2 id="vgg网络的优缺点">VGG网络的优缺点</h2>
<p>优点：</p>
<ul>
<li>VGGNet的结构非常简洁，整个网络都使用了同样大小的卷积核尺寸（3x3）和最大池化尺寸（2x2）。</li>
<li>几个小卷积核（3x3）的组合比一个大卷积核（5x5或7x7）效果好：</li>
<li>验证了通过不断加深网络结构可以提升性能。</li>
</ul>
<p>缺点：</p>
<ul>
<li>VGG耗费更多计算资源，并且使用了更多的参数（这里不是3x3卷积的锅），导致更多的内存占用。其中绝大多数的参数都是来自于第一个全连接层。</li>
</ul>
<h2 id="感受野">感受野</h2>
<p>感受野是机器视觉领域的深度神经网络中的一个概念，用来表示网络内部的不同位置的神经元对原图像的感受范围的大小。神经元之所以无法对原始图像的所有信息进行感知，是因为在这些网络结构中普遍使用卷积层和pooling层，在层与层之间均为局部相连（通过sliding
filter）。神经元感受野的值越大表示其能接触到的原始图像范围就越大，也意味着他可能蕴含更为全局、语义层次更高的特征；而值越小则表示其所包含的特征越趋向于局部和细节。因此感受野的值可以大致用来判断每一层的抽象层次。通俗一点说就是，<strong>输出feature
map上的一个单元对应输入层上的区域大小。</strong></p>
<p><img data-src="http://figure.cruisetian.top/img/VGG_RF.png" /></p>
<p>比如在上图中，输出层 layer3 中一个单元对应输入层 layer2
上区域大小为2×2（池化操作），对应输入层 layer1 上大小为5×5。</p>
<p>感受野的计算公式为：<span
class="math display">\[F(i)=(F(i+1)−1)×Stride +Ksize\]</span></p>
<ul>
<li><span class="math inline">\(F(i)\)</span>为第<span
class="math inline">\(i\)</span>层感受野</li>
<li><span class="math inline">\(Stride\)</span>为第<span
class="math inline">\(i\)</span>层的步距</li>
<li><span
class="math inline">\(Ksize\)</span>为卷积核或池化核尺寸(即kernel_size)</li>
</ul>
<p>比如，在上图中：</p>
<ul>
<li>Feature map: <span class="math inline">\(F(3)=1\)</span></li>
<li>Pool1：<span class="math inline">\(F(2)=(1−1)×2+2=2\)</span></li>
<li>Conv1: <span class="math inline">\(F(1)=(2−1)×2+3=5\)</span></li>
</ul>
<p>所以，在VGG网络中，可以通过堆叠三个<span
class="math inline">\(3\times3\)</span>的小卷积核来代替一个<span
class="math inline">\(7\times7\)</span>的大卷积核，从而让结构更加清楚，并减少参数数量。</p>
<h2 id="vgg网络结构">VGG网络结构</h2>
<p>VGG网络有多个版本，各个版本的网络结构大致相同，一般常用的是VGG-16模型，即下图中的D。VGG的网络结构如下图所示：</p>
<p><img data-src="http://figure.cruisetian.top/img/VGG_data.png" /></p>
<p>从图中可以看出来，VGG网络十分的整齐与美观，都是在一定数量的卷积层后加最大池化层，最终接入全连接层，卷积核大小均为<span
class="math inline">\(3\times3\)</span>，同时，经过计算可以发现，经过<span
class="math inline">\(3\times3\)</span>卷积的特征矩阵的尺寸是不改变的：<span
class="math inline">\(n^{[l]}=\frac{n^{[l-1]}+2p-f}{s}+1=\frac{n^{l-1}-3+2}{1}+1=n^{l-1}\)</span>
.</p>
<h2 id="代码实例分析">代码实例分析</h2>
<h3 id="数据集">数据集</h3>
<p>数据集仍采用上次训练AlexNet的数据集，具体数据集的下载以及划分请参看上一篇<a
href="https://cruisetian.top/post/39d19253.html">pytorch搭建AlexNet并训练花分类数据集</a>。</p>
<h3 id="具体代码">具体代码</h3>
<p>因为一般常用的是VGG-16模型，所以这里就以VGG-16模型来编写代码，即上图中的<strong>D部分</strong>。</p>
<h4 id="module.py">module.py</h4>
<p>与上次AlexNet模型的代码结构差不多，也是分为卷积层和全连接层，按照上边的架构图一步步写出来就好了，看着上面的结构表来写模型真的没什么难度...下面是具体代码，有什么不懂的可以看注释。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VGG</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, num_classes = <span class="number">1000</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>(VGG, self).__init__()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 卷积层提取图像特征</span></span><br><span class="line">        self.features = nn.Sequential(</span><br><span class="line">            <span class="comment"># conv3-64_1 Input:[3,224,224] Output:[64,224,224]</span></span><br><span class="line">            nn.Conv2d(<span class="number">3</span>, <span class="number">64</span>, kernel_size=<span class="number">3</span>, stride=<span class="number">1</span>, padding=<span class="number">1</span>),</span><br><span class="line">            nn.ReLU(<span class="literal">True</span>),</span><br><span class="line">            <span class="comment"># conv3-64_2 Input:[64,224,224] Output:[64,224,224]</span></span><br><span class="line">            nn.Conv2d(<span class="number">64</span>, <span class="number">64</span>, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>),</span><br><span class="line">            nn.ReLU(<span class="literal">True</span>),</span><br><span class="line"></span><br><span class="line">            <span class="comment"># pool1 Output:[64,112,112]</span></span><br><span class="line">            nn.MaxPool2d(kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>),</span><br><span class="line"></span><br><span class="line">            <span class="comment"># conv3-128_1 Input:[64,112,112] Output:[128,112,112]</span></span><br><span class="line">            nn.Conv2d(<span class="number">64</span>, <span class="number">128</span>, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>),</span><br><span class="line">            nn.ReLU(<span class="literal">True</span>),</span><br><span class="line">            <span class="comment"># conv3-128_2 Input:[128,112,112] Output:[128,112,112]</span></span><br><span class="line">            nn.Conv2d(<span class="number">128</span>, <span class="number">128</span>, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>),</span><br><span class="line">            nn.ReLU(<span class="literal">True</span>),</span><br><span class="line"></span><br><span class="line">            <span class="comment"># pool2 Output:[128,56,56]</span></span><br><span class="line">            nn.MaxPool2d(kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>),</span><br><span class="line"></span><br><span class="line">            <span class="comment"># conv3-256_1 Input:[128,56,56] Output:[256,56,56]</span></span><br><span class="line">            nn.Conv2d(<span class="number">128</span>, <span class="number">256</span>, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>),</span><br><span class="line">            nn.ReLU(<span class="literal">True</span>),</span><br><span class="line">            <span class="comment"># conv3-256_2 Input:[256,56,56] Output:[256,56,56]</span></span><br><span class="line">            nn.Conv2d(<span class="number">256</span>, <span class="number">256</span>, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>),</span><br><span class="line">            nn.ReLU(<span class="literal">True</span>),</span><br><span class="line">            <span class="comment"># conv3-256_3 Input:[256,56,56] Output:[256,56,56]</span></span><br><span class="line">            nn.Conv2d(<span class="number">256</span>, <span class="number">256</span>, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>),</span><br><span class="line">            nn.ReLU(<span class="literal">True</span>),</span><br><span class="line"></span><br><span class="line">            <span class="comment"># pool3 Output:[256,28,28]</span></span><br><span class="line">            nn.MaxPool2d(kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>),</span><br><span class="line"></span><br><span class="line">            <span class="comment"># conv3-512_1 Input:[256,28,28] Output:[512,28,28]</span></span><br><span class="line">            nn.Conv2d(<span class="number">256</span>, <span class="number">512</span>, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>),</span><br><span class="line">            nn.ReLU(<span class="literal">True</span>),</span><br><span class="line">            <span class="comment"># conv3-512_2 Input:[512,28,28] Output:[512,28,28]</span></span><br><span class="line">            nn.Conv2d(<span class="number">512</span>, <span class="number">512</span>, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>),</span><br><span class="line">            nn.ReLU(<span class="literal">True</span>),</span><br><span class="line">            <span class="comment"># conv3-512_3 Input:[512,28,28] Output:[512,28,28]</span></span><br><span class="line">            nn.Conv2d(<span class="number">512</span>, <span class="number">512</span>, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>),</span><br><span class="line">            nn.ReLU(<span class="literal">True</span>),</span><br><span class="line"></span><br><span class="line">            <span class="comment"># pool4 Output:[512,14,14]</span></span><br><span class="line">            nn.MaxPool2d(kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>),</span><br><span class="line"></span><br><span class="line">            <span class="comment"># conv3-512_4 Input:[512,14,14] Output:[512,14,14]</span></span><br><span class="line">            nn.Conv2d(<span class="number">512</span>, <span class="number">512</span>, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>),</span><br><span class="line">            nn.ReLU(<span class="literal">True</span>),</span><br><span class="line">            <span class="comment"># conv3-512_5 Input:[512,14,14] Output:[512,14,14]</span></span><br><span class="line">            nn.Conv2d(<span class="number">512</span>, <span class="number">512</span>, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>),</span><br><span class="line">            nn.ReLU(<span class="literal">True</span>),</span><br><span class="line">            <span class="comment"># conv3-512_6 Input:[512,14,14] Output:[512,14,14]</span></span><br><span class="line">            nn.Conv2d(<span class="number">512</span>, <span class="number">512</span>, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>),</span><br><span class="line">            nn.ReLU(<span class="literal">True</span>),</span><br><span class="line"></span><br><span class="line">            <span class="comment"># pool5 Output:[512,7,7]</span></span><br><span class="line">            nn.MaxPool2d(kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>),</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 全连接层对图像分类</span></span><br><span class="line">        self.classifier = nn.Sequential(</span><br><span class="line">            <span class="comment"># FC1</span></span><br><span class="line">            nn.Dropout(p=<span class="number">0.5</span>),  <span class="comment"># 随即失活，防止过拟合</span></span><br><span class="line">            nn.Linear(<span class="number">512</span>*<span class="number">7</span>*<span class="number">7</span>, <span class="number">2048</span>),  <span class="comment"># 相当于求Z = WX+b</span></span><br><span class="line">            nn.ReLU(<span class="literal">True</span>),</span><br><span class="line">            <span class="comment"># FC2</span></span><br><span class="line">            nn.Dropout(p=<span class="number">0.5</span>),</span><br><span class="line">            nn.Linear(<span class="number">2048</span>, <span class="number">2048</span>),</span><br><span class="line">            nn.ReLU(<span class="literal">True</span>),</span><br><span class="line">            <span class="comment"># FC3</span></span><br><span class="line">            nn.Linear(<span class="number">2048</span>, num_classes),</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        x = self.features(x)</span><br><span class="line">        x = torch.flatten(x, start_dim=<span class="number">1</span>)</span><br><span class="line">        x = self.classifier(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure>
<h4 id="train.pypredict.py">train.py&amp;&amp;predict.py</h4>
<p>这部分代码跟上一个模型属实差别不大，就基本照抄，注意把模型名字换了就行，这里就不再赘述了。有需要的可以到我的GitHub去看，<a
href="https://github.com/CruiseTian/begin-deep-learning/blob/master/pytorch/VGG/train.py">train.py</a>，<a
href="https://github.com/CruiseTian/begin-deep-learning/blob/master/pytorch/VGG/predict.py">predict.py</a></p>
<h2 id="结果展示">结果展示</h2>
<h4 id="训练过程">训练过程</h4>
<p><img
src="http://figure.cruisetian.top/img/Snipaste_2020-08-10_12-27-33.jpg" /></p>
<p>这里解释一下只显示10个epoch的原因是我之前训过30个epoch，但是最高准确率只达到0.797，所以我又多训了10个epoch，看看有没有什么提升，结果升到了0.813，所以我就把我训到的最好的结果放出来了，但是可以明显看出，VGG网络的分类准确率是比AlexNet更高的，已经达到了80%，提高了将近10个百分点，还是比较明显的提升。</p>
<h4 id="预测过程">预测过程</h4>
<p>同样的，使用的是跟上一次AlexNet一样的预测脚本和预测图片，下面是结果：</p>
<p><img
src="http://figure.cruisetian.top/img/Snipaste_2020-08-09_19-59-39.jpg" /></p>
<p>AlexNet的预测结果：</p>
<p><img
src="http://figure.cruisetian.top/img/zoYCSUT7BtbEnWJ.jpg" /></p>
<p>通过与AlexNet的预测结果的对比可以看出VGG网络的预测准确率确实比AlexNet要好，只不过参数更多，训练起来更麻烦，更耗时。</p>
<h2 id="总结与提升">总结与提升</h2>
<p>写完自己的VGG-16以后，又去拜读了pytorch官方对于VGGNet的实现，一下子确实感受到了差距，我自己实现的VGG-16就只是按照模型按部就班一步一步写出来，而pytorch官方则将VGG网络的多种网络结构（VGG-11,VGG-13...）统一成一个模型，代码也简洁的多，我当时自己实现的时候还觉得把每一步都写出来好像有点憨，读了pytorch的源码之后才发现确实有更好的写法，所以看来以后还是要提升写代码的水平，多读一些大佬的代码，提升业务水平才重要。有兴趣的可以亲自去看一看pytorch关于vgg实现的源码，这里给一个链接。<a
href="https://github.com/pytorch/vision/blob/master/torchvision/models/vgg.py">vgg.py</a></p>
]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>pytorch</tag>
        <tag>深度学习</tag>
        <tag>CNN</tag>
        <tag>VGG</tag>
        <tag>图像处理</tag>
      </tags>
  </entry>
  <entry>
    <title>ssh禁止特定用户密码登录</title>
    <url>/post/316d67c.html</url>
    <content><![CDATA[<h1 id="ssh-禁止特定用户使用密码登录">SSH 禁止特定用户使用密码登录</h1>
<p>SSH禁止特定用户使用密码登录可以在<strong>/etc/ssh/sshd_config</strong>添加Match配置过滤指定的用户。</p>
<p><strong>按用户过滤</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Match User user1,user2,user3,user4</span><br><span class="line">    PasswordAuthentication no</span><br></pre></td></tr></table></figure>
<p><strong>按组过滤</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Match Group group1</span><br><span class="line">    PasswordAuthentication no</span><br></pre></td></tr></table></figure>
<p><strong>使用叹号(!)取非过滤</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Match User !root</span><br><span class="line">    PasswordAuthentication no</span><br></pre></td></tr></table></figure>
<p>注意：Match是引入了一个条件块，如果满足Match行指定的条件，那么随后的指令将会覆盖全局配置的指令。Match条件块的结束标识为下一个Match指令或者是文件结束。</p>
]]></content>
      <categories>
        <category>环境配置</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>rclone挂载谷歌云盘-为你的VPS扩容</title>
    <url>/post/c3c257f2.html</url>
    <content><![CDATA[<h2 id="写在前面">写在前面</h2>
<p><code>Rclone</code>是一个 <code>Github</code>
上面的一个开源项目，专门开发用来在 Linux
上面同步文件/文件夹，上传的一个命令行工具，利用<code>rclone</code>能将全世界多个热门的网盘挂载为系统本地磁盘，实现方便快捷的云盘文件管理效果。搭配无限空间的Google
Drive网盘，相当于在电脑上或服务器上安装了一个无比巨大的磁盘，以此来实现扩容。</p>
<p>最近我就在我自己的服务器上试了一下，果然可以，所以就来记录一下，方便以后查看。</p>
<span id="more"></span>
<h2 id="说明">说明</h2>
<p>这里以Ubuntu18.04系统及Google Drive为例，记录一下安装步骤。</p>
<h2 id="安装">安装</h2>
<h3 id="安装rclone">安装<code>rclone</code></h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update &amp;&amp; curl https://rclone.org/install.sh | sudo bash</span><br></pre></td></tr></table></figure>
<h3 id="配置rclone">配置<code>rclone</code></h3>
<p>在终端输入 <code>rclone config</code> 进行配置</p>
<p>会出现以下信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">e) Edit existing remote</span><br><span class="line">n) New remote</span><br><span class="line">d) Delete remote</span><br><span class="line">r) Rename remote</span><br><span class="line">c) Copy remote</span><br><span class="line">s) Set configuration password</span><br><span class="line">q) Quit config</span><br><span class="line">e/n/d/r/c/s/q&gt; n <span class="comment">#选择n表示新建一个配置</span></span><br><span class="line">name&gt; gc1 <span class="comment">#输入你自己定义的配置名称，后边要用，所以得记住</span></span><br><span class="line">Type of storage to configure.</span><br><span class="line">Enter a string value. Press Enter <span class="keyword">for</span> the default (<span class="string">&quot;&quot;</span>).</span><br><span class="line">Choose a number from below, or <span class="built_in">type</span> <span class="keyword">in</span> your own value</span><br><span class="line"> 1 / 1Fichier</span><br><span class="line">   \ <span class="string">&quot;fichier&quot;</span></span><br><span class="line"> 2 / Alias <span class="keyword">for</span> an existing remote</span><br><span class="line">   \ <span class="string">&quot;alias&quot;</span></span><br><span class="line"> 3 / Amazon Drive</span><br><span class="line">   \ <span class="string">&quot;amazon cloud drive&quot;</span></span><br><span class="line"> 4 / Amazon S3 Compliant Storage Provider (AWS, Alibaba, Ceph, Digital Ocean, Dreamhost, IBM COS, Minio, etc)</span><br><span class="line">   \ <span class="string">&quot;s3&quot;</span></span><br><span class="line"> 5 / Backblaze B2</span><br><span class="line">   \ <span class="string">&quot;b2&quot;</span></span><br><span class="line"> 6 / Box</span><br><span class="line">   \ <span class="string">&quot;box&quot;</span></span><br><span class="line"> 7 / Cache a remote</span><br><span class="line">   \ <span class="string">&quot;cache&quot;</span></span><br><span class="line"> 8 / Citrix Sharefile</span><br><span class="line">   \ <span class="string">&quot;sharefile&quot;</span></span><br><span class="line"> 9 / Dropbox</span><br><span class="line">   \ <span class="string">&quot;dropbox&quot;</span></span><br><span class="line">10 / Encrypt/Decrypt a remote</span><br><span class="line">   \ <span class="string">&quot;crypt&quot;</span></span><br><span class="line">11 / FTP Connection</span><br><span class="line">   \ <span class="string">&quot;ftp&quot;</span></span><br><span class="line">12 / Google Cloud Storage (this is not Google Drive)</span><br><span class="line">   \ <span class="string">&quot;google cloud storage&quot;</span></span><br><span class="line">13 / Google Drive</span><br><span class="line">   \ <span class="string">&quot;drive&quot;</span></span><br><span class="line">14 / Google Photos</span><br><span class="line">   \ <span class="string">&quot;google photos&quot;</span></span><br><span class="line">15 / Hubic</span><br><span class="line">   \ <span class="string">&quot;hubic&quot;</span></span><br><span class="line">16 / In memory object storage system.</span><br><span class="line">   \ <span class="string">&quot;memory&quot;</span></span><br><span class="line">17 / Jottacloud</span><br><span class="line">   \ <span class="string">&quot;jottacloud&quot;</span></span><br><span class="line">18 / Koofr</span><br><span class="line">   \ <span class="string">&quot;koofr&quot;</span></span><br><span class="line">19 / Local Disk</span><br><span class="line">   \ <span class="string">&quot;local&quot;</span></span><br><span class="line">20 / Mail.ru Cloud</span><br><span class="line">   \ <span class="string">&quot;mailru&quot;</span></span><br><span class="line">21 / Mega</span><br><span class="line">   \ <span class="string">&quot;mega&quot;</span></span><br><span class="line">22 / Microsoft Azure Blob Storage</span><br><span class="line">   \ <span class="string">&quot;azureblob&quot;</span></span><br><span class="line">23 / Microsoft OneDrive</span><br><span class="line">   \ <span class="string">&quot;onedrive&quot;</span></span><br><span class="line">24 / OpenDrive</span><br><span class="line">   \ <span class="string">&quot;opendrive&quot;</span></span><br><span class="line">25 / OpenStack Swift (Rackspace Cloud Files, Memset Memstore, OVH)</span><br><span class="line">   \ <span class="string">&quot;swift&quot;</span></span><br><span class="line">26 / Pcloud</span><br><span class="line">   \ <span class="string">&quot;pcloud&quot;</span></span><br><span class="line">27 / Put.io</span><br><span class="line">   \ <span class="string">&quot;putio&quot;</span></span><br><span class="line">28 / QingCloud Object Storage</span><br><span class="line">   \ <span class="string">&quot;qingstor&quot;</span></span><br><span class="line">29 / SSH/SFTP Connection</span><br><span class="line">   \ <span class="string">&quot;sftp&quot;</span></span><br><span class="line">30 / Sugarsync</span><br><span class="line">   \ <span class="string">&quot;sugarsync&quot;</span></span><br><span class="line">31 / Tardigrade Decentralized Cloud Storage</span><br><span class="line">   \ <span class="string">&quot;tardigrade&quot;</span></span><br><span class="line">32 / Transparently chunk/split large files</span><br><span class="line">   \ <span class="string">&quot;chunker&quot;</span></span><br><span class="line">33 / Union merges the contents of several upstream fs</span><br><span class="line">   \ <span class="string">&quot;union&quot;</span></span><br><span class="line">34 / Webdav</span><br><span class="line">   \ <span class="string">&quot;webdav&quot;</span></span><br><span class="line">35 / Yandex Disk</span><br><span class="line">   \ <span class="string">&quot;yandex&quot;</span></span><br><span class="line">36 / http Connection</span><br><span class="line">   \ <span class="string">&quot;http&quot;</span></span><br><span class="line">37 / premiumize.me</span><br><span class="line">   \ <span class="string">&quot;premiumizeme&quot;</span></span><br><span class="line">38 / seafile</span><br><span class="line">   \ <span class="string">&quot;seafile&quot;</span></span><br><span class="line">Storage&gt; 13 <span class="comment">#这里Google Drive对应的为13，所以填入13</span></span><br><span class="line">** See <span class="built_in">help</span> <span class="keyword">for</span> drive backend at: https://rclone.org/drive/ **</span><br><span class="line"></span><br><span class="line">Google Application Client Id</span><br><span class="line">Setting your own is recommended.</span><br><span class="line">See https://rclone.org/drive/<span class="comment">#making-your-own-client-id for how to create your own.</span></span><br><span class="line">If you leave this blank, it will use an internal key <span class="built_in">which</span> is low performance.</span><br><span class="line">Enter a string value. Press Enter <span class="keyword">for</span> the default (<span class="string">&quot;&quot;</span>).</span><br><span class="line">client_id&gt; <span class="comment">#client_id可以填入自己的，也可以直接回车表示使用默认id</span></span><br><span class="line">Google Application Client Secret</span><br><span class="line">Setting your own is recommended.</span><br><span class="line">Enter a string value. Press Enter <span class="keyword">for</span> the default (<span class="string">&quot;&quot;</span>).</span><br><span class="line">client_secret&gt;  <span class="comment">#client_secret跟client_id一样，上面使用默认这里就直接回车使用默认</span></span><br><span class="line">Scope that rclone should use when requesting access from drive.</span><br><span class="line">Enter a string value. Press Enter <span class="keyword">for</span> the default (<span class="string">&quot;&quot;</span>).</span><br><span class="line">Choose a number from below, or <span class="built_in">type</span> <span class="keyword">in</span> your own value</span><br><span class="line"> 1 / Full access all files, excluding Application Data Folder.</span><br><span class="line">   \ <span class="string">&quot;drive&quot;</span></span><br><span class="line"> 2 / Read-only access to file metadata and file contents.</span><br><span class="line">   \ <span class="string">&quot;drive.readonly&quot;</span></span><br><span class="line">   / Access to files created by rclone only.</span><br><span class="line"> 3 | These are visible <span class="keyword">in</span> the drive website.</span><br><span class="line">   | File authorization is revoked when the user deauthorizes the app.</span><br><span class="line">   \ <span class="string">&quot;drive.file&quot;</span></span><br><span class="line">   / Allows <span class="built_in">read</span> and write access to the Application Data folder.</span><br><span class="line"> 4 | This is not visible <span class="keyword">in</span> the drive website.</span><br><span class="line">   \ <span class="string">&quot;drive.appfolder&quot;</span></span><br><span class="line">   / Allows read-only access to file metadata but</span><br><span class="line"> 5 | does not allow any access to <span class="built_in">read</span> or download file content.</span><br><span class="line">   \ <span class="string">&quot;drive.metadata.readonly&quot;</span></span><br><span class="line">scope&gt; 1 <span class="comment">#选择1，给所有权限</span></span><br><span class="line">ID of the root folder</span><br><span class="line">Leave blank normally.</span><br><span class="line"></span><br><span class="line">Fill <span class="keyword">in</span> to access <span class="string">&quot;Computers&quot;</span> folders (see docs), or <span class="keyword">for</span> rclone to use</span><br><span class="line">a non root folder as its starting point.</span><br><span class="line"></span><br><span class="line">Note that <span class="keyword">if</span> this is blank, the first time rclone runs it will fill it</span><br><span class="line"><span class="keyword">in</span> with the ID of the root folder.</span><br><span class="line"></span><br><span class="line">Enter a string value. Press Enter <span class="keyword">for</span> the default (<span class="string">&quot;&quot;</span>).</span><br><span class="line">root_folder_id&gt; <span class="comment">#这一项直接回车留空</span></span><br><span class="line">Service Account Credentials JSON file path</span><br><span class="line">Leave blank normally.</span><br><span class="line">Needed only <span class="keyword">if</span> you want use SA instead of interactive login.</span><br><span class="line">Enter a string value. Press Enter <span class="keyword">for</span> the default (<span class="string">&quot;&quot;</span>).</span><br><span class="line">service_account_file&gt; <span class="comment">#这一项也直接回车留空</span></span><br><span class="line">Edit advanced config? (y/n)</span><br><span class="line">y) Yes</span><br><span class="line">n) No (default)</span><br><span class="line">y/n&gt; n <span class="comment">#输入n</span></span><br><span class="line">Remote config</span><br><span class="line">Use auto config?</span><br><span class="line"> * Say Y <span class="keyword">if</span> not sure</span><br><span class="line"> * Say N <span class="keyword">if</span> you are working on a remote or headless machine</span><br><span class="line">y) Yes (default)</span><br><span class="line">n) No</span><br><span class="line">y/n&gt; n <span class="comment">#输入n</span></span><br><span class="line">Please go to the following link: https://accounts.google.com/o/oauth2/auth?access_type=... <span class="comment">#将这里的网址复制到浏览器，选择你要挂载谷歌云盘的帐号以后点击允许就可以获得一串代码，复制代码</span></span><br><span class="line">Log <span class="keyword">in</span> and authorize rclone <span class="keyword">for</span> access</span><br><span class="line">Enter verification code&gt; ... <span class="comment">#将你刚刚复制的代码粘贴进来回车</span></span><br><span class="line">Configure this as a team drive?</span><br><span class="line">y) Yes</span><br><span class="line">n) No (default)</span><br><span class="line">y/n&gt; y <span class="comment">#如果想要挂载共享团队盘就选择y，否则就选择n，这里我选择的是y</span></span><br><span class="line">Fetching team drive list...</span><br><span class="line">Choose a number from below, or <span class="built_in">type</span> <span class="keyword">in</span> your own value</span><br><span class="line"> 1 / All File</span><br><span class="line">   \ <span class="string">&quot;...&quot;</span></span><br><span class="line">Enter a Team Drive ID&gt; 1 <span class="comment">#输入你想要挂载的共享盘序号</span></span><br><span class="line">--------------------</span><br><span class="line">[gc1]</span><br><span class="line"><span class="built_in">type</span> = drive</span><br><span class="line">scope = drive</span><br><span class="line">token = &#123;<span class="string">&quot;access_token&quot;</span>:...&#125;</span><br><span class="line">team_drive = 1</span><br><span class="line">--------------------</span><br><span class="line">y) Yes this is OK (default)</span><br><span class="line">e) Edit this remote</span><br><span class="line">d) Delete this remote</span><br><span class="line">y/e/d&gt; y <span class="comment">#上面显示的信息没问题的话就选择y</span></span><br><span class="line">Current remotes:</span><br><span class="line"></span><br><span class="line">Name                 Type</span><br><span class="line">====                 ====</span><br><span class="line">gc1                  drive</span><br><span class="line"></span><br><span class="line">e) Edit existing remote</span><br><span class="line">n) New remote</span><br><span class="line">d) Delete remote</span><br><span class="line">r) Rename remote</span><br><span class="line">c) Copy remote</span><br><span class="line">s) Set configuration password</span><br><span class="line">q) Quit config</span><br><span class="line">e/n/d/r/c/s/q&gt; q <span class="comment">#输入q保存退出配置</span></span><br></pre></td></tr></table></figure>
<p>上面所说的自己的<code>client_id</code>和<code>client_secret</code>的获取方法在这里：(摘自极一‘s
Blog：<a
href="https://www.jiyiblog.com/archives/031167.html">Rclone安装教程 -
使用Rclone挂载Google Drive,OneDrive等网盘</a>)</p>
<blockquote>
<p>接着输入<code>client_id</code>及<code>client_secret</code>，这边可以直接按回车跳过，但是不推荐。跳过这个选项程序将使用公用API，导致在高峰时期上传失败。</p>
<p>API获取方法：<strong>(教育版帐号无法使用独立api，请忽略本方法）</strong></p>
<p>首先进入Google API网页启用API，地址: <a
href="https://cdn.jsdelivr.net/gh/jer0y/CDN/uploads/2020/03/3606928597.png"><img
src="http://figure.cruisetian.top/img/3606928597.png"
alt="API.png" /></a></p>
</blockquote>
<blockquote>
<p>接着再创建一个，地址：<a
href="https://www.jiyiblog.com/go/aHR0cHM6Ly9jb25zb2xlLmRldmVsb3BlcnMuZ29vZ2xlLmNvbS9hcGlzL2NyZWRlbnRpYWxzL29hdXRoY2xpZW50">点击进入</a></p>
<p><a
href="https://cdn.jsdelivr.net/gh/jer0y/CDN/uploads/2020/03/253742622.png"><img
src="http://figure.cruisetian.top/img/253742622.png"
alt="API2.png" /></a></p>
<p>应用类型选<code>其他</code>，名称随意。
接着就会给你ID和密钥，填到Rclone里即可</p>
</blockquote>
<h2 id="挂载硬盘这里坑比较多">挂载硬盘（这里坑比较多）</h2>
<p>首先我们要在服务器上创建一个文件夹(作为 Google 云盘的载体盘)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir /root/gdrive</span><br></pre></td></tr></table></figure>
<p>然后挂载磁盘</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将刚刚配置的gc1中的File文件夹挂载在/root/gdrive下</span></span><br><span class="line">rclone mount gc1:File /root/gdrive --allow-other --allow-non-empty --vfs-cache-mode writes &amp;</span><br></pre></td></tr></table></figure>
<p>之后运行<code>df -h</code>命令就可以查看挂载的磁盘了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">df -h</span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">udev            325M     0  325M   0% /dev</span><br><span class="line">tmpfs            72M  1.2M   70M   2% /run</span><br><span class="line">/dev/sda2        20G  4.5G   15G  24% /</span><br><span class="line">tmpfs           356M     0  356M   0% /dev/shm</span><br><span class="line">tmpfs           5.0M     0  5.0M   0% /run/lock</span><br><span class="line">tmpfs           356M     0  356M   0% /sys/fs/cgroup</span><br><span class="line">/dev/loop0       98M   98M     0 100% /snap/core/9289</span><br><span class="line">/dev/loop1       90M   90M     0 100% /snap/core/8268</span><br><span class="line">tmpfs            72M     0   72M   0% /run/user/0</span><br><span class="line">gc1:Book        1.0P     0  1.0P   0% /root/gdrive <span class="comment">#这里表示挂载上了</span></span><br></pre></td></tr></table></figure>
<p>卸载磁盘</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fusermount -qzu gdrive</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>Google Drive</tag>
        <tag>rclone</tag>
        <tag>VPS扩容</tag>
        <tag>云盘挂载</tag>
      </tags>
  </entry>
  <entry>
    <title>为git配置代理</title>
    <url>/post/30b83ef0.html</url>
    <content><![CDATA[<h2 id="写在前面">写在前面</h2>
<p>在国内，github虽然没有被墙，但是速度极慢，有时候想要clone一份代码要花很长时间，所以就考虑给git设置一个代理，这样能使连接的速度更快</p>
<p>通常我们 clone 代码时可以选择两种方式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//方式一：HTTP</span><br><span class="line">https://github.com/git/git.git</span><br><span class="line">//方式二：SSH</span><br><span class="line">git@github.com:git/git.git</span><br></pre></td></tr></table></figure>
<p>两种方式设置代理的方法是不同的，下面一一介绍。</p>
<span id="more"></span>
<h2 id="设置git-http代理">设置Git HTTP代理</h2>
<p>如果你手上的代理是 socks5 代理，如各平台的 Shadowsocks
客户端，trojan，v2ray等都提供一个本地的 socks5
代理，那么你可以这样设置，让 Git 通过 HTTP 链接 clone 代码时走 socks5
代理</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//通过 http 链接 clone 代码时走 http 代理</span><br><span class="line">git config --global http.proxy &quot;socks5://127.0.0.1:1080&quot;</span><br><span class="line">//通过 https 链接 clone 代码时走 http 代理</span><br><span class="line">git config --global https.proxy &quot;socks5://127.0.0.1:1080&quot;</span><br></pre></td></tr></table></figure>
<p>设置完成后，可以 clone
一份代码试一下有没有效果。如果没有设置错误的话，代码clone的速度应该会提高很多。</p>
<p>这些设置最终会保存在用户目录下的 <code>.gitconfig</code> 文件中，打开这个文件可以看到类似的几行配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[http]</span><br><span class="line">    proxy = socks5://127.0.0.1:1080</span><br><span class="line">[https]</span><br><span class="line">    proxy = socks5://127.0.0.1:1080</span><br></pre></td></tr></table></figure>
<p>如果端口有变动也可以直接在这里修改。</p>
<h2 id="设置-git-ssh-代理">设置 Git SSH 代理</h2>
<p>还有一种情况，我们通过 SSH 方法 clone
代码，提交代码，因为这样不用输入密码，通常我们会在自己的常用电脑上这么做。上面设置的
HTTP 代理对这种方式 clone 代码是没有影响的，也就是并不会加速，SSH
的代理需要单独设置，其实这个跟 Git
的关系已经不是很大，我们需要改的，是SSH 的配置。在用户目录下建立如下文件
~/.ssh/config，对 GitHub 的域名做单独的处理</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 这里必须是 github.com，因为这个跟我们 clone 代码时的链接有关</span><br><span class="line">Host github.com</span><br><span class="line">   # 如果用默认端口，这里是 github.com，如果想用443端口，这里就是 ssh.github.com 详见 https://help.github.com/articles/using-ssh-over-the-https-port/</span><br><span class="line">   HostName github.com</span><br><span class="line">   User git</span><br><span class="line">   # 如果是 HTTP 代理，把下面这行取消注释，并把 proxyport 改成自己的 http 代理的端口</span><br><span class="line">   # ProxyCommand socat - PROXY:127.0.0.1:%h:%p,proxyport=1080</span><br><span class="line">   # 如果是 socks5 代理，则把下面这行取消注释，并把 6666 改成自己 socks5 代理的端口</span><br><span class="line">   # ProxyCommand connect -S 127.0.0.1:1080 %h %p</span><br></pre></td></tr></table></figure>
<p>根据代码中的注释，设置自己的代理。</p>
<p>经过上面的设置，现在不管是用什么方式 clone
代码，都会走代理了，这里还是强调一下，代理要速度快才会有加速效果，如果代理一般或者很慢，可能还不如不走代理。</p>
]]></content>
      <categories>
        <category>环境配置</category>
      </categories>
      <tags>
        <tag>proxy</tag>
        <tag>git</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>为npm设置代理</title>
    <url>/post/603b46.html</url>
    <content><![CDATA[<h2 id="写在前面">写在前面</h2>
<p><strong>npm</strong>（全称 Node Package
Manager，即“node包管理器”）是<a
href="https://zh.wikipedia.org/wiki/Node.js">Node.js</a>默认的、用<a
href="https://zh.wikipedia.org/wiki/JavaScript">JavaScript</a>编写的<a
href="https://zh.wikipedia.org/wiki/軟體套件管理系統">软件包管理系统</a>。</p>
<p>由于我们的开发环境由于安全因素在访问一些网站时需要使用代理，其中就包括npm的repositories网站，所以就需要修改npm的配置来加入代理。</p>
<p>下面简要介绍下npm的配置以及如何设置代理。</p>
<span id="more"></span>
<h2 id="为npm设置代理">为npm设置代理</h2>
<h3 id="设置http代理">设置http代理</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 假设本地代理端口为8080</span><br><span class="line">npm config set proxy &quot;http://localhost:8080&quot;</span><br><span class="line">npm config set https-proxy &quot;http://localhost:8080&quot;</span><br></pre></td></tr></table></figure>
<p>如果代理需要认证的话可以这样来设置。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 有用户密码的代理</span><br><span class="line">npm config set proxy &quot;http://username:password@localhost:8080&quot;</span><br><span class="line">npm confit set https-proxy &quot;http://username:password@localhost:8080&quot;</span><br></pre></td></tr></table></figure>
<h3 id="查看代理">查看代理</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm config get #或者使用下面这个，二者选一个</span><br><span class="line">npm config list</span><br></pre></td></tr></table></figure>
<h3 id="socks5-代理">socks5 代理</h3>
<p>npm 不支持 socks 代理，但是我们可以用一个工具将 http 代理转成 socks
代理，然后将 npm 代理地址设置到这个工具的地址。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 假设本地socks5代理端口为8081</span><br><span class="line"># 首先安装转换工具</span><br><span class="line">npm install -g http-proxy-to-socks</span><br><span class="line"># 然后使用这个工具监听8080端口,支持http代理，然后所有8080的http代理数据都将转换成socks的代理数据发送到8081上</span><br><span class="line">hpts -s localhost:8081 -p 8080</span><br><span class="line"># 最后设置npm代理为8080</span><br><span class="line">npm config set proxy &quot;http://localhost:8080&quot;</span><br><span class="line">npm config set https-proxy &quot;http://localhost:8080&quot;</span><br></pre></td></tr></table></figure>
<p>相当于又加了一个中间层，将 http 转成 socks。</p>
<h2 id="取消代理">取消代理</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm config delete proxy</span><br><span class="line">npm config delete https-proxy</span><br></pre></td></tr></table></figure>
<h2 id="后记">后记</h2>
<p>一般设置完代理的npm下载软件包就很快啦，但是还是跟代理的速度有关系，所以要选择质量较好的代理。</p>
]]></content>
      <categories>
        <category>环境配置</category>
      </categories>
      <tags>
        <tag>proxy</tag>
        <tag>代理</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>wsl安装debian并升级至debian11</title>
    <url>/post/4448a665.html</url>
    <content><![CDATA[<blockquote>
<p>原文地址 <a href="https://mokch.info/post/36">mokch.info</a></p>
</blockquote>
<h2 id="安装-wsl">安装 wsl</h2>
<p>powershell 管理员身份运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wsl --install -d Debian</span><br></pre></td></tr></table></figure>
<p>该命令自动下载最新 Linux 内核、设置 wsl2 版本<br />
此时安装的是 debian9，需要手动升级到 11</p>
<span id="more"></span>
<h2 id="迁移到其它盘">迁移到其它盘</h2>
<ol type="1">
<li>导出当前子系统</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wsl --<span class="built_in">export</span> Debian d:\wsl-debian.tar</span><br></pre></td></tr></table></figure>
<ol start="2" type="1">
<li>删除当前已注册子系统</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wsl --unregister Debian</span><br></pre></td></tr></table></figure>
<ol start="3" type="1">
<li>导入导出的子系统并指定位置、wsl 版本</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wsl --import Debian d:\wsl\debian d:\wsl-debian.tar --version 2</span><br></pre></td></tr></table></figure>
<ol start="4" type="1">
<li>对导入的系统重新设置安装时的用户名</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Debian config --default-user username</span><br></pre></td></tr></table></figure>
<h3 id="升级-debian">升级 debian</h3>
<p>先更新到最新</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update &amp;&amp; sudo apt upgrade -y</span><br></pre></td></tr></table></figure>
<p>修改 sources.list 升级到 debian10（把所有的 stretch 替换为
buster）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo sed -i <span class="string">&#x27;s/stretch/buster/g&#x27;</span> /etc/apt/sources.list</span><br><span class="line">sudo apt update &amp;&amp; sudo apt upgrade -y</span><br><span class="line">sudo apt dist-upgrade</span><br><span class="line">sudo apt autoremove</span><br></pre></td></tr></table></figure>
<p>再次修改 sources.list 升级到 11(buster/updates 替换为
bullseye-security, buster 替换为 bullseye)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo sed -i <span class="string">&#x27;s/buster\/updates/bullseye-security/g&#x27;</span> /etc/apt/sources.list</span><br><span class="line">sudo sed -i <span class="string">&#x27;s/buster/bullseye/g&#x27;</span> /etc/apt/sources.list</span><br><span class="line">sudo apt update &amp;&amp; sudo apt upgrade -y</span><br><span class="line">sudo apt dist-upgrade</span><br><span class="line">sudo apt autoremove</span><br></pre></td></tr></table></figure>
<p>检验升级</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat /etc/os-release</span><br></pre></td></tr></table></figure>
<h2 id="安装-docker">安装 docker</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install docker docker-compose -y</span><br></pre></td></tr></table></figure>
<p>会有提示使用 docker-desktop，等待 20 秒会直接安装 docker</p>
<p>之后可能会有些错误提示，包括找不到 fstab 文件及 iptables
使用以下命令解决</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo touch /etc/fstab</span><br><span class="line">sudo apt install iptables</span><br><span class="line">sudo update-alternatives --<span class="built_in">set</span> iptables /usr/sbin/iptables-legacy</span><br><span class="line">sudo update-alternatives --<span class="built_in">set</span> ip6tables /usr/sbin/ip6tables-legacy</span><br></pre></td></tr></table></figure>
<p>最后启动 docker</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo service docker start</span><br></pre></td></tr></table></figure>
<h4 id="让-docker-命令以普通用户运行">让 docker 命令以普通用户运行</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo usermod -aG docker &lt;username&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>环境配置</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Debian</tag>
        <tag>wsl</tag>
      </tags>
  </entry>
  <entry>
    <title>给你的hexo博客绑定域名</title>
    <url>/post/26a7e178.html</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<p>最近比较闲，利用hexo在GitHub上搭建了一个静态博客，那么既然是个人博客，当然要上自己的域名了，这样才能更<del>有个人特色</del>有逼格。</p>
<h2
id="搭建hexo博客并推送到github页面">搭建Hexo博客并推送到github页面</h2>
<p>这一步就不再多讲，大家可以自己去网上找相关教程，有很多。</p>
<p>这里给几个推荐链接：<a
href="https://zhuanlan.zhihu.com/p/26625249">GitHub+Hexo
搭建个人网站详细教程</a>, <a
href="https://zhuanlan.zhihu.com/p/60578464">使用 Hexo+GitHub
搭建个人免费博客教程（小白向）</a>，<a
href="https://segmentfault.com/a/1190000021486019">Hexo
next主题博客搭建及美化</a>, <a
href="http://jeffyang.top/Hexo/Hexo%E4%B8%BB%E9%A2%98Next%E7%BE%8E%E5%8C%96/">Hexo博客设置以及Next主题美化</a></p>
<p>差不多够用了。</p>
<span id="more"></span>
<h2 id="注册域名">注册域名</h2>
<p>可以去阿里云，腾讯云，狗爹，namesilo去购买一个域名，也可以到 <a
href="%5Bhttps://www.freenom.com%5D(https://www.freenom.com/zh/index.html?lang=zh)">Freenom</a>
去申请一个免费的域名。</p>
<h2 id="解析域名">解析域名</h2>
<p>到你注册域名的地方，增加给你的域名做DNS解析，增加一条CNAME解析，指向你的博客，这里我以cloudflare为例：</p>
<p><img data-src="http://figure.cruisetian.top/img/6.png" /></p>
<h2 id="创建cname文件">创建CNAME文件</h2>
<p>在hexo项目下 source 文件下创建CNAME
文件（没有后缀名的），在里面写上购买的域名，如</p>
<p><img data-src="http://figure.cruisetian.top/img/3.png" /></p>
<h2 id="到github中填入自己的域名">到GitHub中填入自己的域名</h2>
<p>到你创建的页面repo中，找到setting→options，往下翻，找到Custom
domain，然后在其中填入你解析的域名，点击Save保存。如，</p>
<p><img data-src="http://figure.cruisetian.top/img/4.png" /></p>
<p><img data-src="http://figure.cruisetian.top/img/5.png" /></p>
<p>然后在浏览器的地址栏输入自己的域名，就可以访问啦。</p>
]]></content>
      <categories>
        <category>日常学习</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>博客</tag>
        <tag>域名绑定</tag>
      </tags>
  </entry>
  <entry>
    <title>亿寻-百度云极速下载神器</title>
    <url>/post/2982de5b.html</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<p>百度网盘如今是国内使用者最多的网盘，但是百度网盘对普通用户甚至VIP用户限速，只有超级会员才可以享受到原本正常的下载速度的操作属实让人感觉到不爽，之前在pandownload还在的时候还好，可以快速地下载自己需要的文件，但是最近百度一波骚操作，把pandownload给搞没了，这可让众多百度网盘使用者十分难受，所以今天我就来分享一个pandownload的替代品以及它的使用方法。</p>
<span id="more"></span>
<h2 id="软件下载">软件下载</h2>
<p>大家可以到它的官方网站下载，这里给出地址：<a
href="https://yixun.writeas.com/yi-xun"
class="uri">https://yixun.writeas.com/yi-xun</a></p>
<p>也可以从我这里的<a
href="https://cruisetian.lanzous.com/b01bexope">链接</a>(密码:1qq0)下载，都是一样的文件，大家如果不放心还请去上面的官方地址下载</p>
<h2 id="如何使用">如何使用</h2>
<h3 id="关于登录">关于登录</h3>
<p>首先解压压缩包以后，点击<strong>Yixun.exe</strong>运行程序，进入主界面以后，可以选择登录，当然，不登陆也不影响使用，关于登录请自行查看<strong>README.txt</strong>,作者给的有教程，这里就不再赘述。</p>
<h3 id="修改默认下载位置">修改默认下载位置</h3>
<p>点击<strong>工具-&gt;选项</strong>，就可以看到默认下载位置了，可以点击<strong>浏览</strong>自行修改。</p>
<p><img
src="http://figure.cruisetian.top/img/Snipaste_2020-05-19_00-53-16.png" /></p>
<p><img
src="http://figure.cruisetian.top/img/Snipaste_2020-05-19_00-55-54.png" /></p>
<h3 id="下载文件">下载文件</h3>
<p>复制百度网盘的分享链接（可以带提取码一起复制，软件会自动识别并帮你解析，就不用自己输入了），然后打开软件，点击<strong>文件-&gt;打开</strong>，</p>
<p><img
src="http://figure.cruisetian.top/img/Snipaste_2020-05-19_01-01-34.png" /></p>
<p>在弹出的页面的<strong>地址：</strong>栏粘贴刚刚复制的链接，然后点击<strong>打开</strong>，</p>
<p><img
src="http://figure.cruisetian.top/img/Snipaste_2020-05-19_01-03-42.png" /></p>
<p>就可以看到下面出现了一个文件，右键点击<strong>下载</strong>即可。</p>
<p><img
src="http://figure.cruisetian.top/img/Snipaste_2020-05-19_01-04-37.png" /></p>
<p>接着会弹出一个黑色的页面，是正常现象，因为该软件调用的是aria2下载。在这个命令页面你可以查看当前下载速度(DL)，下载预计时间(ETA)，文件大小以及下载了多少，下面是我随便下载了一个文件测试出来的速度，在9M/s左右，整体还可以，比较稳定，反正比百度云那10kb/s强太多了。另外，下载速度跟资源好坏，自身的网络环境也是有一定关系，可能这个资源慢一些，那个资源快一些，都不一定，大家可以多试一试。</p>
<p><img
src="http://figure.cruisetian.top/img/Snipaste_2020-05-18_11-31-14.png" /></p>
<p><strong>后续</strong>：之后有用这个软件下载了一些大文件，整体速度喜人，我家200M的带宽都跑满了，而且比较稳定，下载六个G的文件不到十分钟就能完成，下面是下载过程中我截的一张图，这速度可以说是可怕了。</p>
<p><img
src="http://figure.cruisetian.top/img/Snipaste_2020-05-27_01-37-44.png" />
## 后记</p>
<p>这个软件目前来说还是一个下载百度云的良方，大家如果觉得不错的话可以给作者一些鼓励和打赏，当然不排除以后会不太好用，所以我觉得最根本的方式还是换用其他网盘，目前来说国内的蓝奏云，天翼云，坚果云等都不错，如果大家有渠道的话可以尝试国外的谷歌云和Onedrive(onedrive国内也能用，就是速度不是很快，大概2~3M/s的样子，反正比百度云好多了，所以建议配合代理使用)，反正我在百度云上没存啥东西，确实依赖性不大，大家如果有大量资料在上面的话，还是建议开个会员，比较有保障。</p>
]]></content>
      <categories>
        <category>软件分享</category>
      </categories>
      <tags>
        <tag>百度网盘</tag>
        <tag>极速下载</tag>
        <tag>亿寻</tag>
        <tag>Pandownload</tag>
      </tags>
  </entry>
  <entry>
    <title>pytorch搭建AlexNet并训练花分类数据集</title>
    <url>/post/39d19253.html</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<p>这是<code>pytorch</code>深度学习的第二篇，第一篇为<strong><a
href="https://cruisetian.top/post/28e069b6.html">pytorch搭建CNN网络实现MNIST数据集的图像分类</a></strong>
，本篇将继续深入深度学习，介绍深度学习领域的经典神经网络——AlexNet，并利用<code>pytorch</code>自己动手搭建一个AlexNet来训练一个花分类的数据集。同时，本篇文章所有的代码都已上传github，欢迎大家star和fork。链接在此：<a
href="https://github.com/CruiseTian/begin-deep-learning">begin-deep-learning</a></p>
<h2 id="alexnet简介">AlexNet简介</h2>
<p>AlexNet是一个卷积神经网络，是2012年的ISLVRC
2012竞赛的冠军网络，由亚历克斯·克里泽夫斯基（Alex
Krizhevsky）设计（这也是AlexNet名字的来源），也是自2012年以后，深度学习开始迅速发展。</p>
<h3 id="特点">特点</h3>
<ul>
<li>由于AlexNet的计算成本很高，所以AlexNet使用了GPU来加速训练，使得计算具有可行性</li>
<li>使用了<code>ReLU</code>激活函数，而之前大多使用的是<code>sigmoid</code>或者<code>tanh</code>函数作为激活函数，所以具有更好的训练性能，能更快速地收敛</li>
<li>使用了LRN局部响应归一化（这个目前还不太了解）</li>
<li>使用dropout随机失活神经元，减少过拟合</li>
</ul>
<span id="more"></span>
<h2 id="alexnet网络结构详解">AlexNet网络结构详解</h2>
<h3 id="alexnet结构图">AlexNet结构图</h3>
<p>首先先上结构图，这是后面一系列分析的来源：</p>
<figure>
<img
src="http://figure.cruisetian.top/img/Snipaste_2020-08-07_00-27-04.jpg"
alt="图源原论文ImageNet Classification with Deep Convolutional Neural Networks" />
<figcaption aria-hidden="true">图源原论文ImageNet Classification with
Deep Convolutional Neural Networks</figcaption>
</figure>
<p>这里可以看到图有上下两部分，这是因为作者使用了两块GPU来训练（Training
on Multiple GPUs），上下地结构是一样的，所以只看下面这一部分就好了。</p>
<h3 id="基本结构">基本结构</h3>
<p>从图中可以看出，该网络有5个卷积层（Conv）和三个全连接层（FC），前两个卷积层后面都跟有一个最大池化层（Max
pooling），卷积层和全连接层之间也有一个池化层。接下来具体分析每一层。</p>
<h3 id="conv-1">Conv 1</h3>
<p>首先，从图中可以看出，输入的是<span
class="math inline">\(224\times224\times3\)</span>的图像，卷积核大小为11（即kernel_size=11）步长（Stride）为4，输出为<span
class="math inline">\(55\times55\times48\)</span>，即图像高度和宽度变为了55，通道数（channel）变为了48，所以使用了48个卷积核，根据公式<span
class="math inline">\(n^{[l]}=\frac{n^{[l-1]}+2p-f}{s}+1\)</span>
可以得出2p=3，所以padding应该为（1，2），当然简单地设为2也是可以的，因为<code>pytorch</code>会自动舍去多余的部分，并不影响结果；所以，该层具体信息如下：</p>
<ul>
<li>输入：input_size = [224, 224, 3]</li>
<li>卷积层：
<ul>
<li>in_channels：3</li>
<li>out_channels：48</li>
<li>kernel_size：11</li>
<li>stride：4</li>
<li>padding：2</li>
</ul></li>
<li>输出：output_size = [55, 55, 48]</li>
</ul>
<h3 id="maxpool-1">Maxpool 1</h3>
<p>该层为池化层，从图中可以看出原本Height为55的图像经过池化后变成了27，可以想到kernel_size为3，步长为2，看了很多代码，事实证明也确实是这么做的。</p>
<ul>
<li>输入：input_size = [55, 55, 48]</li>
<li>池化层：
<ul>
<li>kernel_size：3</li>
<li>stride：2</li>
</ul></li>
<li>输出：output_size = [27, 27, 48]</li>
</ul>
<h3 id="conv-2">Conv 2</h3>
<p>与<a href="#Conv1">Conv
1</a>类似，通过看图和一些操作，我们可以得出我们想要的参数，下面类似，我都不再赘述，只是将参数列举出来。</p>
<ul>
<li>输入：input_size = [27, 27, 48]</li>
<li>卷积层：
<ul>
<li>in_channels：48</li>
<li>out_channels：128</li>
<li>kernel_size：5</li>
<li>stride：1</li>
<li>padding：2</li>
</ul></li>
<li>输出：output_size = [27, 27, 128]</li>
</ul>
<h3 id="maxpool-2">Maxpool 2</h3>
<ul>
<li>输入：input_size = [27, 27, 128]</li>
<li>池化层：
<ul>
<li>kernel_size：3</li>
<li>stride：2</li>
</ul></li>
<li>输出：output_size = [13, 13, 128]</li>
</ul>
<h3 id="conv-3">Conv 3</h3>
<p>接下来为三个连续的卷积层。</p>
<ul>
<li>输入：input_size = [13, 13, 128]</li>
<li>卷积层：
<ul>
<li>in_channels：128</li>
<li>out_channels：192</li>
<li>kernel_size：3</li>
<li>stride：1</li>
<li>padding：1</li>
</ul></li>
<li>输出：output_size = [13, 13, 192]</li>
</ul>
<h3 id="conv-4">Conv 4</h3>
<ul>
<li>输入：input_size = [13, 13, 192]</li>
<li>卷积层：
<ul>
<li>in_channels：192</li>
<li>out_channels：192</li>
<li>kernel_size：3</li>
<li>stride：1</li>
<li>padding：1</li>
</ul></li>
<li>输出：output_size = [13, 13, 192]</li>
</ul>
<h3 id="conv-5">Conv 5</h3>
<ul>
<li>输入：input_size = [13, 13, 192]</li>
<li>卷积层：
<ul>
<li>in_channels：192</li>
<li>out_channels：128</li>
<li>kernel_size：3</li>
<li>stride：1</li>
<li>padding：1</li>
</ul></li>
<li>输出：output_size = [13, 13, 128]</li>
</ul>
<h3 id="maxpool-3">Maxpool 3</h3>
<ul>
<li>输入：input_size = [13, 13, 128]</li>
<li>池化层：
<ul>
<li>kernel_size：3</li>
<li>stride：2</li>
</ul></li>
<li>输出：output_size = [6, 6, 128]</li>
</ul>
<p>经过第三个池化层以后，会将得到的[6, 6,
128]的<code>tensor</code>展开，然后与第一个全连接层相连</p>
<h3 id="fc-1-fc-2-fc-3">FC 1 、FC 2 、FC 3</h3>
<p>由图中可以看出，输入全连接层的参数为<span
class="math display">\[128\times6\times6\]</span>,经过三个全连接层，最终输出为1000，实际上这个1000指的是分的类别数，即<code>num_classes</code>，所以三个全连接层的变换如下：</p>
<p><span class="math display">\[Maxpool3 \rightarrow 128\times6\times6
\rightarrow FC 1 \rightarrow 2048 \rightarrow FC 2 \rightarrow 2048
\rightarrow FC 3 \rightarrow 1000(num\_classes)\]</span></p>
<h2 id="代码实例分析">代码实例分析</h2>
<h3 id="数据集准备">数据集准备</h3>
<h4 id="下载">下载</h4>
<p>首先到如下网址下载数据集：</p>
<p>http://download.tensorflow.org/example_images/flower_photos.tgz</p>
<p>此数据集包含 5
中类型的花（雏菊daisy，蒲公英dandelion，玫瑰roses，向日葵sunflower，郁金香tulips），每种类型有600~900张图像不等。</p>
<h4 id="训练集和测试集划分">训练集和测试集划分</h4>
<p>首先新建flower_data文件夹，将下载的数据集移入flower_data文件夹下，然后解压数据集，之后回到上一层目录（即flower_data同级目录）新建一个<code>.py</code>文件用来写入脚本划分数据集，名称随意，例如我用的是<code>split_data.py</code>,打开该文件，写入如下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> shutil <span class="keyword">import</span> copy</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mkfile</span>(<span class="params">file</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(file):</span><br><span class="line">        os.makedirs(file)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">file = <span class="string">&#x27;flower_data/flower_photos&#x27;</span></span><br><span class="line">flower_class = [cla <span class="keyword">for</span> cla <span class="keyword">in</span> os.listdir(file) <span class="keyword">if</span> <span class="string">&quot;.txt&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> cla]</span><br><span class="line">mkfile(<span class="string">&#x27;flower_data/train&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> cla <span class="keyword">in</span> flower_class:</span><br><span class="line">    mkfile(<span class="string">&#x27;flower_data/train/&#x27;</span>+cla)</span><br><span class="line"></span><br><span class="line">mkfile(<span class="string">&#x27;flower_data/val&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> cla <span class="keyword">in</span> flower_class:</span><br><span class="line">    mkfile(<span class="string">&#x27;flower_data/val/&#x27;</span>+cla)</span><br><span class="line"></span><br><span class="line">split_rate = <span class="number">0.1</span></span><br><span class="line"><span class="keyword">for</span> cla <span class="keyword">in</span> flower_class:</span><br><span class="line">    cla_path = file + <span class="string">&#x27;/&#x27;</span> + cla + <span class="string">&#x27;/&#x27;</span></span><br><span class="line">    images = os.listdir(cla_path)</span><br><span class="line">    num = <span class="built_in">len</span>(images)</span><br><span class="line">    eval_index = random.sample(images, k=<span class="built_in">int</span>(num*split_rate))</span><br><span class="line">    <span class="keyword">for</span> index, image <span class="keyword">in</span> <span class="built_in">enumerate</span>(images):</span><br><span class="line">        <span class="keyword">if</span> image <span class="keyword">in</span> eval_index:</span><br><span class="line">            image_path = cla_path + image</span><br><span class="line">            new_path = <span class="string">&#x27;flower_data/val/&#x27;</span> + cla</span><br><span class="line">            copy(image_path, new_path)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            image_path = cla_path + image</span><br><span class="line">            new_path = <span class="string">&#x27;flower_data/train/&#x27;</span> + cla</span><br><span class="line">            copy(image_path, new_path)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\r[&#123;&#125;] processing [&#123;&#125;/&#123;&#125;]&quot;</span>.<span class="built_in">format</span>(cla, index+<span class="number">1</span>, num), end=<span class="string">&quot;&quot;</span>)  <span class="comment"># processing bar</span></span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;processing done!&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>此脚本将数据集按9：1的比例划分为训练集train和验证集val，然后运行该脚本进行划分。</p>
<p>最终得到的目录结构大致如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">|-- flower_data</span><br><span class="line">	|-- flower_photos</span><br><span class="line">		|-- daisy</span><br><span class="line">		|-- dandelion</span><br><span class="line">		|-- roses</span><br><span class="line">		|-- sunflowers</span><br><span class="line">		|-- tulips</span><br><span class="line">		|-- LICENSE.txt</span><br><span class="line">	|-- train</span><br><span class="line">		|-- daisy</span><br><span class="line">		|-- dandelion</span><br><span class="line">		|-- roses</span><br><span class="line">		|-- sunflowers</span><br><span class="line">		|-- tulips</span><br><span class="line">	|-- val</span><br><span class="line">		|-- daisy</span><br><span class="line">		|-- dandelion</span><br><span class="line">		|-- roses</span><br><span class="line">		|-- sunflowers</span><br><span class="line">		|-- tulips</span><br><span class="line">	|-- flower_photos.tgz</span><br><span class="line">|-- split_data.py</span><br></pre></td></tr></table></figure>
<h3 id="具体代码">具体代码</h3>
<h4 id="module.py">module.py</h4>
<p>首先为模型定义部分<code>module.py</code>,该部分定义了我们的网络结构AlexNet，即上面详解的部分，所以只需要将上面详解的部分转换为pytorch代码即可，比较简单，每一步pytorch都有专门的函数，所以调包就完事了。下面是具体代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AlexNet</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, num_classes = <span class="number">1000</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>(AlexNet, self).__init__()</span><br><span class="line">        <span class="comment"># 用nn.Sequential()将网络打包成一个模块，精简代码</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 卷积层提取图像特征</span></span><br><span class="line">        self.features = nn.Sequential(</span><br><span class="line">            <span class="comment"># Conv1: Input:[3,224,224] Output:[48,55,55]</span></span><br><span class="line">            nn.Conv2d(<span class="number">3</span>, <span class="number">48</span>, kernel_size=<span class="number">11</span>, stride=<span class="number">4</span>, padding=<span class="number">2</span>),</span><br><span class="line">            nn.ReLU(inplace=<span class="literal">True</span>),  <span class="comment"># inplace:直接覆盖原值，节省内存</span></span><br><span class="line">            <span class="comment"># Pool1:</span></span><br><span class="line">            nn.MaxPool2d(kernel_size=<span class="number">3</span>, stride=<span class="number">2</span>),  <span class="comment"># 池化，Output:[48,27,27]</span></span><br><span class="line">            <span class="comment"># Conv2: Input:[48,27,27] Output:[128,27,27]</span></span><br><span class="line">            nn.Conv2d(<span class="number">48</span>, <span class="number">128</span>, kernel_size=<span class="number">5</span>, stride=<span class="number">1</span>, padding=<span class="number">2</span>),</span><br><span class="line">            nn.ReLU(<span class="literal">True</span>),</span><br><span class="line">            <span class="comment"># Pool2:</span></span><br><span class="line">            nn.MaxPool2d(kernel_size=<span class="number">3</span>, stride=<span class="number">2</span>),  <span class="comment">#Output:[128,13,13]</span></span><br><span class="line">            <span class="comment"># Conv3: Input:[128,13,13] Output:[192,13,13]</span></span><br><span class="line">            nn.Conv2d(<span class="number">128</span>, <span class="number">192</span>, kernel_size=<span class="number">3</span>, stride=<span class="number">1</span>, padding=<span class="number">1</span>),</span><br><span class="line">            nn.ReLU(<span class="literal">True</span>),</span><br><span class="line">            <span class="comment"># Conv4: Input:[192,13,13] Output:[192,13,13]</span></span><br><span class="line">            nn.Conv2d(<span class="number">192</span>, <span class="number">192</span>, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>),</span><br><span class="line">            nn.ReLU(<span class="literal">True</span>),</span><br><span class="line">            <span class="comment"># Conv5: Input:[192,13,13] Output:[128,13,13]</span></span><br><span class="line">            nn.Conv2d(<span class="number">192</span>, <span class="number">128</span>, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>),</span><br><span class="line">            nn.ReLU(<span class="literal">True</span>),</span><br><span class="line">            <span class="comment"># Pool3:</span></span><br><span class="line">            nn.MaxPool2d(kernel_size=<span class="number">3</span>, stride=<span class="number">2</span>),  <span class="comment"># Output:[128,6,6]</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 全连接层对图像分类</span></span><br><span class="line">        self.classifier = nn.Sequential(</span><br><span class="line">            <span class="comment"># FC1</span></span><br><span class="line">            nn.Dropout(p=<span class="number">0.5</span>),  <span class="comment"># 随即失活，防止过拟合</span></span><br><span class="line">            nn.Linear(<span class="number">128</span>*<span class="number">6</span>*<span class="number">6</span>, <span class="number">2048</span>),  <span class="comment"># 相当于求Z = WX+b</span></span><br><span class="line">            nn.ReLU(<span class="literal">True</span>),</span><br><span class="line">            <span class="comment"># FC2</span></span><br><span class="line">            nn.Dropout(p=<span class="number">0.5</span>),</span><br><span class="line">            nn.Linear(<span class="number">2048</span>,<span class="number">2048</span>),</span><br><span class="line">            nn.ReLU(<span class="literal">True</span>),</span><br><span class="line">            <span class="comment"># FC3</span></span><br><span class="line">            nn.Linear(<span class="number">2048</span>, num_classes),</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        x = self.features(x)</span><br><span class="line">        x = torch.flatten(x, start_dim=<span class="number">1</span>)</span><br><span class="line">        x = self.classifier(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure>
<h4 id="train.py">train.py</h4>
<p><code>train.py</code>为训练部分的代码，主要是加载和处理数据集，调用刚刚定义的模型进行训练，以及打印训练过程中的信息，使训练过程可视化。这里直接上代码，具体的解释都在注释里：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms, datasets, utils</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> module <span class="keyword">import</span> AlexNet</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">DEVICE = torch.device(<span class="string">&#x27;cuda&#x27;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&#x27;cpu&#x27;</span>)</span><br><span class="line">BATCH_SIZE = <span class="number">32</span></span><br><span class="line">EPOCH = <span class="number">10</span></span><br><span class="line">LR = <span class="number">0.0002</span></span><br><span class="line"><span class="built_in">print</span>(DEVICE)</span><br><span class="line"></span><br><span class="line">data_transform = &#123;</span><br><span class="line">    <span class="string">&quot;train&quot;</span>: transforms.Compose([transforms.RandomResizedCrop(<span class="number">224</span>),       <span class="comment"># 随机裁剪，再缩放成 224×224</span></span><br><span class="line">                                 transforms.RandomHorizontalFlip(p=<span class="number">0.5</span>),  <span class="comment"># 水平方向随机翻转，概率为 0.5, 即一半的概率翻转, 一半的概率不翻转</span></span><br><span class="line">                                 transforms.ToTensor(),</span><br><span class="line">                                 transforms.Normalize((<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>), (<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>))]),</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;val&quot;</span>: transforms.Compose([transforms.Resize((<span class="number">224</span>, <span class="number">224</span>)),  <span class="comment"># cannot 224, must (224, 224)</span></span><br><span class="line">                               transforms.ToTensor(),</span><br><span class="line">                               transforms.Normalize((<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>), (<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>))])&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据集处理及加载</span></span><br><span class="line"><span class="comment"># 获取图像数据集的路径</span></span><br><span class="line">data_root = os.path.abspath(os.path.join(os.getcwd(),<span class="string">&quot;..&quot;</span>))  		<span class="comment"># get data root path 返回上上层目录</span></span><br><span class="line">image_path = data_root + <span class="string">&quot;/data_set/flower_data/&quot;</span>  				 		<span class="comment"># flower data_set path</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入训练集并进行预处理</span></span><br><span class="line">train_dataset = datasets.ImageFolder(root=image_path + <span class="string">&quot;/train&quot;</span>,</span><br><span class="line">                                     transform=data_transform[<span class="string">&quot;train&quot;</span>])</span><br><span class="line">train_num = <span class="built_in">len</span>(train_dataset)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按batch_size分批次加载训练集</span></span><br><span class="line">train_loader = torch.utils.data.DataLoader(train_dataset,	<span class="comment"># 导入的训练集</span></span><br><span class="line">                                           batch_size=BATCH_SIZE, 	<span class="comment"># 每批训练的样本数</span></span><br><span class="line">                                           shuffle=<span class="literal">True</span>,	<span class="comment"># 是否打乱训练集</span></span><br><span class="line">                                           num_workers=<span class="number">0</span>)	<span class="comment"># 使用线程数，在windows下设置为0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入验证集并进行预处理</span></span><br><span class="line">validate_dataset = datasets.ImageFolder(root=image_path + <span class="string">&quot;/val&quot;</span>,</span><br><span class="line">                                        transform=data_transform[<span class="string">&quot;val&quot;</span>])</span><br><span class="line">val_num = <span class="built_in">len</span>(validate_dataset)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载验证集</span></span><br><span class="line">validate_loader = torch.utils.data.DataLoader(validate_dataset,	<span class="comment"># 导入的验证集</span></span><br><span class="line">                                              batch_size=BATCH_SIZE,</span><br><span class="line">                                              shuffle=<span class="literal">True</span>,</span><br><span class="line">                                              num_workers=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取分类的名称所对应的索引，即&#123;&#x27;daisy&#x27;:0, &#x27;dandelion&#x27;:1, &#x27;roses&#x27;:2, &#x27;sunflower&#x27;:3, &#x27;tulips&#x27;:4&#125;</span></span><br><span class="line">flower_list = train_dataset.class_to_idx</span><br><span class="line"><span class="comment"># 将 flower_list 中的 key 和 val 调换位置,使得预测之后返回的索引可以直接通过字典得到所属类别</span></span><br><span class="line">cla_dict = <span class="built_in">dict</span>((val, key) <span class="keyword">for</span> key, val <span class="keyword">in</span> flower_list.items())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 cla_dict 写入 json 文件中</span></span><br><span class="line">json_str = json.dumps(cla_dict, indent=<span class="number">4</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;class_indices.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> json_file:</span><br><span class="line">    json_file.write(json_str)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">net = AlexNet(num_classes=<span class="number">5</span>)                          <span class="comment"># 实例化网络（输出类别为5）</span></span><br><span class="line">net.to(DEVICE)                                        <span class="comment"># 分配网络到指定的设备（GPU/CPU）训练</span></span><br><span class="line">loss_function = nn.CrossEntropyLoss()			 	  <span class="comment"># 交叉熵损失</span></span><br><span class="line">optimizer = optim.Adam(net.parameters(), lr=LR)	  <span class="comment"># 优化器（训练参数，学习率）</span></span><br><span class="line"></span><br><span class="line">save_path = <span class="string">&#x27;./AlexNet.pth&#x27;</span></span><br><span class="line">best_acc = <span class="number">0.0</span></span><br><span class="line"></span><br><span class="line">train_counter = []</span><br><span class="line">train_losses = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span> (EPOCH):</span><br><span class="line">    <span class="comment">########################################## train ###############################################</span></span><br><span class="line">    net.train()                 <span class="comment"># 训练过程中开启 Dropout</span></span><br><span class="line">    running_loss = <span class="number">0.0</span>			<span class="comment"># 每个 epoch 都会对 running_loss 清零</span></span><br><span class="line">    time_start = time.perf_counter()	<span class="comment"># 对训练一个 epoch 计时</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> step, data <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_loader, start=<span class="number">0</span>):  <span class="comment"># 遍历训练集，step从0开始计算</span></span><br><span class="line">        images, labels = data   <span class="comment"># 获取训练集的图像和标签</span></span><br><span class="line">        optimizer.zero_grad()	<span class="comment"># 清除历史梯度</span></span><br><span class="line"></span><br><span class="line">        outputs = net(images.to(DEVICE))				 <span class="comment"># 正向传播</span></span><br><span class="line">        loss = loss_function(outputs, labels.to(DEVICE)) <span class="comment"># 计算损失</span></span><br><span class="line">        loss.backward()								     <span class="comment"># 反向传播</span></span><br><span class="line">        optimizer.step()								 <span class="comment"># 优化器更新参数</span></span><br><span class="line">        running_loss += loss.item()</span><br><span class="line"></span><br><span class="line">        train_losses.append(loss.item())</span><br><span class="line">        train_counter.append((step*BATCH_SIZE) + ((epoch-<span class="number">1</span>)*<span class="built_in">len</span>(train_loader.dataset)))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 打印训练进度（使训练过程可视化）</span></span><br><span class="line">        rate = (step + <span class="number">1</span>) / <span class="built_in">len</span>(train_loader)           <span class="comment"># 当前进度 = 当前step / 训练一轮epoch所需总step</span></span><br><span class="line">        a = <span class="string">&quot;*&quot;</span> * <span class="built_in">int</span>(rate * <span class="number">50</span>)</span><br><span class="line">        b = <span class="string">&quot;.&quot;</span> * <span class="built_in">int</span>((<span class="number">1</span> - rate) * <span class="number">50</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\rtrain loss: &#123;:^3.0f&#125;%[&#123;&#125;-&gt;&#123;&#125;]&#123;:.3f&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">int</span>(rate * <span class="number">100</span>), a, b, loss), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%f s&#x27;</span> % (time.perf_counter()-time_start))</span><br><span class="line"></span><br><span class="line">    <span class="comment">########################################## validate ###############################################</span></span><br><span class="line">    net.<span class="built_in">eval</span>()    <span class="comment"># 验证过程中关闭 Dropout</span></span><br><span class="line">    acc = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        <span class="keyword">for</span> val_data <span class="keyword">in</span> validate_loader:</span><br><span class="line">            val_images, val_labels = val_data</span><br><span class="line">            outputs = net(val_images.to(DEVICE))</span><br><span class="line">            predict_y = torch.<span class="built_in">max</span>(outputs, dim=<span class="number">1</span>)[<span class="number">1</span>] <span class="comment"># 以output中值最大位置对应的索引（标签）作为预测输出</span></span><br><span class="line">            acc += (predict_y == val_labels.to(DEVICE)).<span class="built_in">sum</span>().item()</span><br><span class="line">        val_accurate = acc/val_num</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 保存准确率最高的那次网络参数</span></span><br><span class="line">        <span class="keyword">if</span> val_accurate &gt; best_acc:</span><br><span class="line">            best_acc = val_accurate</span><br><span class="line">            torch.save(net.state_dict(), save_path)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;[epoch %d] train_loss: %.3f  test_accuracy: %.3f \n&#x27;</span> %</span><br><span class="line">              (epoch + <span class="number">1</span>, running_loss / step, val_accurate))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Finished Training&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印训练过程中的loss变化情况</span></span><br><span class="line"></span><br><span class="line">fig = plt.figure()</span><br><span class="line">plt.plot(train_counter, train_losses, color=<span class="string">&#x27;blue&#x27;</span>)</span><br><span class="line">plt.legend(<span class="string">&#x27;Train Loss&#x27;</span>, loc=<span class="string">&#x27;upper right&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;number of training examples&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;loss&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<h4 id="predict.py">predict.py</h4>
<p>该部分主要检验刚刚的训练成果，通过调用我们刚刚训练好的神经网络，对我们从网上随意下载的一张图片进行分类，并且给出对应的可能性，可以随意从网上下载一张五种花的图片，然后丢入模型进行预测就好了。具体代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> module <span class="keyword">import</span> AlexNet</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 预处理</span></span><br><span class="line">data_transform = transforms.Compose(</span><br><span class="line">    [transforms.Resize((<span class="number">224</span>, <span class="number">224</span>)),</span><br><span class="line">     transforms.ToTensor(),</span><br><span class="line">     transforms.Normalize((<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>), (<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>))])</span><br><span class="line"></span><br><span class="line"><span class="comment"># load image</span></span><br><span class="line">images = [<span class="string">&quot;tulips&quot;</span>, <span class="string">&quot;dandelion&quot;</span>, <span class="string">&quot;roses&quot;</span>, <span class="string">&quot;sunflower&quot;</span>, <span class="string">&quot;daisy&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> images:</span><br><span class="line">    img = Image.<span class="built_in">open</span>(<span class="string">&quot;predict/&quot;</span>+i+<span class="string">&quot;.jpg&quot;</span>)</span><br><span class="line">    plt.imshow(img)</span><br><span class="line">    <span class="comment"># plt.show()</span></span><br><span class="line">    <span class="comment"># [N, C, H, W]</span></span><br><span class="line">    img = data_transform(img)</span><br><span class="line">    <span class="comment"># expand batch dimension</span></span><br><span class="line">    img = torch.unsqueeze(img, dim=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># read class_indict</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        json_file = <span class="built_in">open</span>(<span class="string">&#x27;./class_indices.json&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">        class_indict = json.load(json_file)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">        exit(-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># create model</span></span><br><span class="line">    model = AlexNet(num_classes=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># load model weights</span></span><br><span class="line">    model_weight_path = <span class="string">&quot;./AlexNet.pth&quot;</span></span><br><span class="line">    model.load_state_dict(torch.load(model_weight_path))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 关闭 Dropout</span></span><br><span class="line">    model.<span class="built_in">eval</span>()</span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        <span class="comment"># predict class</span></span><br><span class="line">        output = torch.squeeze(model(img))     <span class="comment"># 将输出压缩，即压缩掉 batch 这个维度</span></span><br><span class="line">        predict = torch.softmax(output, dim=<span class="number">0</span>)</span><br><span class="line">        predict_cla = torch.argmax(predict).numpy()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;origin: &quot;</span>+i+<span class="string">&quot;\tpredict: &quot;</span>+class_indict[<span class="built_in">str</span>(predict_cla)], <span class="string">&quot;\tProbability: &quot;</span>,predict[predict_cla].item())</span><br><span class="line">    <span class="comment">#plt.show()</span></span><br></pre></td></tr></table></figure>
<h2 id="结果展示">结果展示</h2>
<h4 id="训练过程展示">训练过程展示</h4>
<p><img data-src="https://i.loli.net/2020/08/08/PgDERKBc1tuNhqo.jpg" /></p>
<p>可以看出，十个epoch已经可以训练出准确率高达70%的模型了，效果还是比较理想的。</p>
<h4 id="预测结果展示">预测结果展示</h4>
<p>我从Google上随意找了五类图片各一张，然后丢入模型进行预测，最终预测得到的结果如下：</p>
<p><img data-src="https://i.loli.net/2020/08/08/zoYCSUT7BtbEnWJ.jpg" /></p>
<p>可以看出，所有图片均预测正确，而且可能性大多比较高，所以还是比较理想的。</p>
<h2 id="结语">结语</h2>
<p>至此，关于AlexNet的模型介绍详解和具体的图像分类都已经做完，这个过程中，我曾经尝试改变模型，使全连接层更加平缓地输出五个类别，而不是从2048直接变为5，但是发现准确率反而降低了，事实证明，还是原模型更好。另外，调参确实浪费时间且折磨人，但是看着模型一点点变好，训练出来的准确率一点点提高的喜悦和成就感也是无与伦比的，这玩意确实吸引人。接下来会研究另外一个深度学习的经典模型VGG，并做一些实际的应用，慢慢来吧，先打好基础，才能走得更稳，更远。</p>
]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>pytorch</tag>
        <tag>深度学习</tag>
        <tag>CNN</tag>
        <tag>图像处理</tag>
        <tag>AlexNet</tag>
      </tags>
  </entry>
</search>
