<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Windows10安装Ubuntu双系统</title>
    <url>/post/ce0e1ebb.html</url>
    <content><![CDATA[<h2 id="windows10安装ubuntu双系统教程">Windows10安装Ubuntu双系统教程</h2>
<h3 id="写在前面">写在前面</h3>
<p>之前一直用的Windows10系统，由于最近大作业要进行项目开发，而Linux系统对项目开发比较友好，所以准备学习一下Linux系统的基本操作。由于之前学习中接触过Ubuntu，而且Ubuntu生态较完善，出了问题网上比较好找解决办法，所以我选择在我原来电脑上再装一个Ubuntu。本人刚刚入门，也是个小白菜鸡，还望网上的各位大佬发现问题及时指出。</p>
<a id="more"></a>
<h3 id="准备工作">准备工作</h3>
<ol type="1">
<li>准备工具：
<ul>
<li>一台Windows10电脑，</li>
<li>一个U盘（不少于8GB），</li>
<li>写盘工具（推荐RUFUS，轻量，简洁好用而且免费）</li>
</ul></li>
<li>到Ubuntu官网下载系统镜像 <a href="https://ubuntu.com/download/desktop" target="_blank" rel="noopener" class="uri">https://ubuntu.com/download/desktop</a></li>
<li>将镜像写入U盘（！！注意，本步骤会格式化U盘，请先做好数据备份）
<ul>
<li>该过程可以到Ubuntu官网去找，这里给一个链接：<a href="https://ubuntu.com/tutorials/tutorial-create-a-usb-stick-on-windows#1-overview" target="_blank" rel="noopener">将系统镜像写入U盘</a></li>
</ul></li>
</ol>
<h3 id="在windows下创建硬盘空白分区">在Windows下创建硬盘空白分区</h3>
<p>可以使用以下两种方式：</p>
<ul>
<li>直接删除一个分区作为空白分区（不推荐）</li>
<li>找一个有较大空间且平时不怎么用的分区进行压缩（推荐）</li>
</ul>
<p>具体步骤如下：</p>
<ul>
<li>进入<em>我的电脑--管理--磁盘管理</em>，</li>
<li>选择一个有较大空间但平时用不了这么大的分区</li>
<li>进行压缩，压缩的步骤为：右键单击你选择的分区，然后点击<strong>压缩卷</strong>，填入压缩卷的大小，压缩卷产生的分区是用来装Ubuntu系统的，推荐50G以上，硬盘较大的可以多分一些（我选择分80GB）</li>
</ul>
<h3 id="关闭win10系统的快速启动和安全启动">关闭win10系统的快速启动和安全启动</h3>
<ol type="1">
<li><p>关闭快速启动</p>
<ul>
<li>进入Windows设置，点击“系统”，点击<strong>电源和睡眠</strong>，选择<strong>其他电源设置</strong></li>
<li><p>然后点击<strong>选择电源按钮的功能</strong></p></li>
<li>然后点击<strong>更改当前不可用的设置</strong></li>
<li><p>然后将<strong>启用快速启动（推荐）</strong>选项前的对号去掉，然后点击<strong>保存修改</strong></p></li>
</ul></li>
<li><p>关闭安全启动</p>
<ul>
<li>我的电脑是联想拯救者ISK-15，在开机的过程中，狂按F2键，进入BIOS模式，选择Security选项，将下面的Secure Boot设置成disabled。（补充：联想拯救者开机过程狂按F12会进入启动项的选择中）</li>
<li>可以在Boot选项查看快速启动是否关闭</li>
</ul></li>
</ol>
<h3 id="查看系统的启动模式">查看系统的启动模式</h3>
<p>使用快捷键<strong>Win+R</strong>，然后在跳出来的框中输入msinfo32，回车，在BIOS模式中如果显示<strong>传统</strong>，表示系统启动方式为Legacy BIOS；如果为<strong>UEFI</strong>，则显示UEFI(<strong>！！！记住，如果为传统的话后面有/boot分区，如果为UEFI，则为efi文件</strong>)</p>
<h3 id="安装过程">安装过程</h3>
<p>插上U盘启动盘，在开机的过程中不断按F12（注意，不同的电脑按键各不相同，需要根据自己的电脑型号改变），然后选择U盘启动方式<br>接下来就按照正常的U盘安装步骤进行就好了，其中有一个关键步骤，就是在安装图形界面的下一步，系统会提示你是否与windows 10 共存，我们不要点击那个，我们选择其他选项，这样自己方便管理一些。</p>
<p><strong>！！！注意:如果系统没提示你之前安装过windows 那么你的启动方式就错误了，你得回到BIOS页面下更改启动方式再次启动</strong></p>
<p>接下来就是对Ubuntu进行分区，其中显示<strong>空闲</strong>的那一项，就是你刚才在win系统上分出的区，看看后面的空间大小，也和你分的空间大小一致。 选中<strong>空闲</strong>那一行，点击<strong>+</strong>，这是要将整个<strong>空闲</strong>分区继续分区，以用来装Ubuntu系统。</p>
<p>我推荐的分区：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">大小</th>
<th style="text-align: center;">分区类型</th>
<th style="text-align: center;">分区位置</th>
<th style="text-align: center;">用于</th>
<th style="text-align: center;">挂载点</th>
<th style="text-align: center;">用途</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">20G</td>
<td style="text-align: center;">主分区</td>
<td style="text-align: center;">空间起始位置</td>
<td style="text-align: center;">Ext4日志文件系统</td>
<td style="text-align: center;">/</td>
<td style="text-align: center;">存放系统，相当于C盘</td>
</tr>
<tr class="even">
<td style="text-align: center;">4G/8G</td>
<td style="text-align: center;">逻辑分区</td>
<td style="text-align: center;">空间起始位置</td>
<td style="text-align: center;">交换空间</td>
<td style="text-align: center;">/swap</td>
<td style="text-align: center;">虚拟内存</td>
</tr>
<tr class="odd">
<td style="text-align: center;">200MB</td>
<td style="text-align: center;">逻辑分区</td>
<td style="text-align: center;">空间起始位置</td>
<td style="text-align: center;">Ext4日志文件系统</td>
<td style="text-align: center;">/boot or efi</td>
<td style="text-align: center;">引导分区</td>
</tr>
<tr class="even">
<td style="text-align: center;">剩余</td>
<td style="text-align: center;">逻辑/主分区</td>
<td style="text-align: center;">空间起始位置</td>
<td style="text-align: center;">Ext4日志文件系统</td>
<td style="text-align: center;">/home</td>
<td style="text-align: center;">储存数据用</td>
</tr>
</tbody>
</table>
<p><strong>第四次分区完成后请不要马上点 “安装”！！！ 第四次分区完成后请不要马上点 “安装”！！！ 第四次分区完成后请不要马上点 “安装”！！！</strong></p>
<p>记得在 <strong>安装启动引导器的设备：</strong> 选项中选择 <strong>/boot or efi</strong> 所在盘符，至此，点击 <strong>安装</strong>，一直等到出现安装完成重启的提示，重启就好了，然后你会发现，重启之后仍然是 Windows，还有最后一步。</p>
<h3 id="安装-easybcd-2.3"><strong>安装 EasyBCD 2.3</strong></h3>
<p>这个软件是用于系统配置创建多重启动系统的引导文件，也就是新创建一个启动文件，可以让你的电脑在启动的时候，有进入何种系统的选择。<strong>添加新条目</strong> -&gt;<strong>Linux/BSD</strong>-&gt;类型 <strong>Grub (Legacy)</strong> 驱动器，选择<strong>驱动器</strong>-&gt;<strong>添加条目</strong>，保存后重启计算机。</p>
<p>参考文章：<a href="https://www.cnblogs.com/masbay/p/10745170.html" target="_blank" rel="noopener" class="uri">https://www.cnblogs.com/masbay/p/10745170.html</a></p>
]]></content>
      <categories>
        <category>日常学习</category>
      </categories>
      <tags>
        <tag>Win</tag>
        <tag>Ubuntu</tag>
        <tag>双系统</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/post/4a17b156.html</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="quick-start">Quick Start</h2>
<h3 id="create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="run-server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>为npm设置代理</title>
    <url>/post/603b46.html</url>
    <content><![CDATA[<h2 id="写在前面">写在前面</h2>
<p><strong>npm</strong>（全称 Node Package Manager，即“node包管理器”）是<a href="https://zh.wikipedia.org/wiki/Node.js" target="_blank" rel="noopener">Node.js</a>默认的、用<a href="https://zh.wikipedia.org/wiki/JavaScript" target="_blank" rel="noopener">JavaScript</a>编写的<a href="https://zh.wikipedia.org/wiki/軟體套件管理系統" target="_blank" rel="noopener">软件包管理系统</a>。</p>
<p>由于我们的开发环境由于安全因素在访问一些网站时需要使用代理，其中就包括npm的repositories网站，所以就需要修改npm的配置来加入代理。</p>
<p>下面简要介绍下npm的配置以及如何设置代理。</p>
<a id="more"></a>
<h2 id="为npm设置代理">为npm设置代理</h2>
<h3 id="设置http代理">设置http代理</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 假设本地代理端口为8080</span><br><span class="line">npm config set proxy &quot;http:&#x2F;&#x2F;localhost:8080&quot;</span><br><span class="line">npm config set https-proxy &quot;http:&#x2F;&#x2F;localhost:8080&quot;</span><br></pre></td></tr></table></figure>
<p>如果代理需要认证的话可以这样来设置。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 有用户密码的代理</span><br><span class="line">npm config set proxy &quot;http:&#x2F;&#x2F;username:password@localhost:8080&quot;</span><br><span class="line">npm confit set https-proxy &quot;http:&#x2F;&#x2F;username:password@localhost:8080&quot;</span><br></pre></td></tr></table></figure>
<h3 id="查看代理">查看代理</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm config get #或者使用下面这个，二者选一个</span><br><span class="line">npm config list</span><br></pre></td></tr></table></figure>
<h3 id="socks5-代理">socks5 代理</h3>
<p>npm 不支持 socks 代理，但是我们可以用一个工具将 http 代理转成 socks 代理，然后将 npm 代理地址设置到这个工具的地址。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 假设本地socks5代理端口为8081</span><br><span class="line"># 首先安装转换工具</span><br><span class="line">npm install -g http-proxy-to-socks</span><br><span class="line"># 然后使用这个工具监听8080端口,支持http代理，然后所有8080的http代理数据都将转换成socks的代理数据发送到8081上</span><br><span class="line">hpts -s localhost:8081 -p 8080</span><br><span class="line"># 最后设置npm代理为8080</span><br><span class="line">npm config set proxy &quot;http:&#x2F;&#x2F;localhost:8080&quot;</span><br><span class="line">npm config set https-proxy &quot;http:&#x2F;&#x2F;localhost:8080&quot;</span><br></pre></td></tr></table></figure>
<p>相当于又加了一个中间层，将 http 转成 socks。</p>
<h2 id="取消代理">取消代理</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm config delete proxy</span><br><span class="line">npm config delete https-proxy</span><br></pre></td></tr></table></figure>
<h2 id="后记">后记</h2>
<p>一般设置完代理的npm下载软件包就很快啦，但是还是跟代理的速度有关系，所以要选择质量较好的代理。</p>
]]></content>
      <categories>
        <category>日常学习</category>
      </categories>
      <tags>
        <tag>npm</tag>
        <tag>proxy</tag>
      </tags>
  </entry>
  <entry>
    <title>给你的hexo博客绑定域名</title>
    <url>/post/26a7e178.html</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<p>最近比较闲，利用hexo在GitHub上搭建了一个静态博客，那么既然是个人博客，当然要上自己的域名了，这样才能更<del>有个人特色</del>有逼格。</p>
<h2 id="搭建hexo博客并推送到github页面">搭建Hexo博客并推送到github页面</h2>
<p>这一步就不再多讲，大家可以自己去网上找相关教程，有很多。</p>
<p>这里给几个推荐链接：<a href="https://zhuanlan.zhihu.com/p/26625249" target="_blank" rel="noopener">GitHub+Hexo 搭建个人网站详细教程</a>, <a href="https://zhuanlan.zhihu.com/p/60578464" target="_blank" rel="noopener">使用 Hexo+GitHub 搭建个人免费博客教程（小白向）</a></p>
<p>差不多够用了。</p>
<a id="more"></a>
<h2 id="注册域名">注册域名</h2>
<p>可以去阿里云，腾讯云，狗爹，namesilo去购买一个域名，也可以到 <a href="%5Bhttps://www.freenom.com%5D(https://www.freenom.com/zh/index.html?lang=zh)">Freenom</a> 去申请一个免费的域名。</p>
<h2 id="解析域名">解析域名</h2>
<p>到你注册域名的地方，增加给你的域名做DNS解析，增加一条CNAME解析，指向你的博客，这里我以cloudflare为例：</p>
<figure>
<img data-src="http://figure.cruisetian.top/img/6.png" alt="6" /><figcaption>6</figcaption>
</figure>
<h2 id="创建cname文件">创建CNAME文件</h2>
<p>在hexo项目下 source 文件下创建CNAME 文件（没有后缀名的），在里面写上购买的域名，如</p>
<figure>
<img data-src="http://figure.cruisetian.top/img/3.png" alt="3" /><figcaption>3</figcaption>
</figure>
<h2 id="到github中填入自己的域名">到GitHub中填入自己的域名</h2>
<p>到你创建的页面repo中，找到setting→options，往下翻，找到Custom domain，然后在其中填入你解析的域名，点击Save保存。如，</p>
<figure>
<img data-src="http://figure.cruisetian.top/img/4.png" alt="4" /><figcaption>4</figcaption>
</figure>
<figure>
<img data-src="http://figure.cruisetian.top/img/5.png" alt="5" /><figcaption>5</figcaption>
</figure>
<p>然后在浏览器的地址栏输入自己的域名，就可以访问啦。</p>
]]></content>
      <categories>
        <category>日常学习</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>博客</tag>
        <tag>域名绑定</tag>
      </tags>
  </entry>
  <entry>
    <title>为git配置代理</title>
    <url>/post/30b83ef0.html</url>
    <content><![CDATA[<h2 id="写在前面">写在前面</h2>
<p>在国内，github虽然没有被墙，但是速度极慢，有时候想要clone一份代码要花很长时间，所以就考虑给git设置一个代理，这样能使连接的速度更快</p>
<p>通常我们 clone 代码时可以选择两种方式</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方式一：HTTP</span></span><br><span class="line">https://github.com/git/git.git</span><br><span class="line"><span class="comment">//方式二：SSH</span></span><br><span class="line">git@github.com:git/git.git</span><br></pre></td></tr></table></figure>
<p>两种方式设置代理的方法是不同的，下面一一介绍。</p>
<a id="more"></a>
<h2 id="设置git-http代理">设置Git HTTP代理</h2>
<p>如果你手上的代理是 socks5 代理，如各平台的 Shadowsocks 客户端，trojan，v2ray等都提供一个本地的 socks5 代理，那么你可以这样设置，让 Git 通过 HTTP 链接 clone 代码时走 socks5 代理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;通过 http 链接 clone 代码时走 http 代理</span><br><span class="line">git config --global http.proxy &quot;socks5:&#x2F;&#x2F;127.0.0.1:1080&quot;</span><br><span class="line">&#x2F;&#x2F;通过 https 链接 clone 代码时走 http 代理</span><br><span class="line">git config --global https.proxy &quot;socks5:&#x2F;&#x2F;127.0.0.1:1080&quot;</span><br></pre></td></tr></table></figure>
<p>设置完成后，可以 clone 一份代码试一下有没有效果。如果没有设置错误的话，代码clone的速度应该会提高很多。</p>
<p>这些设置最终会保存在用户目录下的 <code>.gitconfig</code> 文件中，打开这个文件可以看到类似的几行配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[http]</span><br><span class="line">    proxy &#x3D; http:&#x2F;&#x2F;127.0.0.1:1080</span><br><span class="line">[https]</span><br><span class="line">    proxy &#x3D; http:&#x2F;&#x2F;127.0.0.1:1080</span><br></pre></td></tr></table></figure>
<p>如果端口有变动也可以直接在这里修改。</p>
<h2 id="设置-git-ssh-代理">设置 Git SSH 代理</h2>
<p>还有一种情况，我们通过 SSH 方法 clone 代码，提交代码，因为这样不用输入密码，通常我们会在自己的常用电脑上这么做。上面设置的 HTTP 代理对这种方式 clone 代码是没有影响的，也就是并不会加速，SSH 的代理需要单独设置，其实这个跟 Git 的关系已经不是很大，我们需要改的，是SSH 的配置。在用户目录下建立如下文件 ~/.ssh/config，对 GitHub 的域名做单独的处理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 这里必须是 github.com，因为这个跟我们 clone 代码时的链接有关</span><br><span class="line">Host github.com</span><br><span class="line">   # 如果用默认端口，这里是 github.com，如果想用443端口，这里就是 ssh.github.com 详见 https:&#x2F;&#x2F;help.github.com&#x2F;articles&#x2F;using-ssh-over-the-https-port&#x2F;</span><br><span class="line">   HostName github.com</span><br><span class="line">   User git</span><br><span class="line">   # 如果是 HTTP 代理，把下面这行取消注释，并把 proxyport 改成自己的 http 代理的端口</span><br><span class="line">   # ProxyCommand socat - PROXY:127.0.0.1:%h:%p,proxyport&#x3D;1080</span><br><span class="line">   # 如果是 socks5 代理，则把下面这行取消注释，并把 6666 改成自己 socks5 代理的端口</span><br><span class="line">   # ProxyCommand nc -v -x 127.0.0.1:1080 %h %p</span><br></pre></td></tr></table></figure>
<p>根据代码中的注释，设置自己的代理。</p>
<p>经过上面的设置，现在不管是用什么方式 clone 代码，都会走代理了，这里还是强调一下，代理要速度快才会有加速效果，如果代理一般或者很慢，可能还不如不走代理。</p>
]]></content>
      <categories>
        <category>日常学习</category>
      </categories>
      <tags>
        <tag>proxy</tag>
        <tag>git</tag>
        <tag>github</tag>
      </tags>
  </entry>
</search>
