<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Anaconda设置镜像源</title>
    <url>/post/c3fd64c3.html</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<p>在使用安装<code>conda</code> 安装某些包会出现慢或安装失败问题，所以可以修改镜像源为国内镜像源来解决这个问题，这里记录一下。主要有两个方面的内容：</p>
<ul>
<li>显示所有channel</li>
<li>更换channel</li>
<li>移除镜像源</li>
</ul>
<a id="more"></a>
<h2 id="显示所有channel">显示所有channel</h2>
<p>首先，<code>conda config --show</code>能够显示出所有<code>conda</code>的config信息。 如果我们只想看channels的信息，输入<code>conda config --show channels</code>即可</p>
<h2 id="添加镜像源">添加镜像源</h2>
<p>这里添加的是清华源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/</span><br><span class="line">conda config --<span class="built_in">set</span> show_channel_urls yes</span><br></pre></td></tr></table></figure>
<p>其中<code>conda config --set show_channel_urls yes</code>的意思是从channel中安装包时显示channel的url，这样就可以知道包的安装来源了。</p>
<p>执行<code>conda config --show channels</code>，得到的结果如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">channels:</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class="line">  - defaults</span><br></pre></td></tr></table></figure>
<h2 id="移除镜像源">移除镜像源</h2>
<p>使用<code>conda config --remove channels url地址</code>可以删除对应的镜像，如</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda config --remove channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/</span><br></pre></td></tr></table></figure>
<p>就可以删除刚刚添加的清华镜像源，这时执行<code>conda config --show channels</code>，得到的结果如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">channels:</span><br><span class="line">  - defaults</span><br></pre></td></tr></table></figure>
<h2 id="一些其他的conda指令">一些其他的conda指令</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda install &lt;包名&gt; <span class="comment">#安装指定包</span></span><br><span class="line">conda remove &lt;包名&gt;  <span class="comment">#移除指定包</span></span><br><span class="line">conda update &lt;包名&gt;  <span class="comment">#更新指定包</span></span><br><span class="line"></span><br><span class="line">conda update conda <span class="comment">#更新conda,当提示你确认更新时，键入y继续。</span></span><br><span class="line"><span class="comment">#更新conda后，继续进行Anaconda更新</span></span><br><span class="line">conda update anaconda <span class="comment">#出现提示时，键入y继续。</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>日常学习</category>
      </categories>
      <tags>
        <tag>Anaconda</tag>
        <tag>镜像源</tag>
      </tags>
  </entry>
  <entry>
    <title>ClashR使用，让你的chrome起飞</title>
    <url>/post/f5257d2a.html</url>
    <content><![CDATA[<h2 id="获得代理节点">获得代理节点</h2>
<p>首先找到一个机场，这里可以用这个（<a href="https://youyun666.com/auth/register?code=g4oY" target="_blank" rel="noopener">优云666</a>），可以白嫖几个月，流量基本够用。注册账号，登录以后可以先点每日签到，可以随机得到1~5G流量</p>
<p><img data-src="http://figure.cruisetian.top/img/Snipaste_2020-05-11_19-53-01.png" /></p>
<p>然后下拉，到下面这个页面，点击<strong>复制ClashR订阅</strong>，留着一会备用。</p>
<a id="more"></a>
<p><img data-src="http://figure.cruisetian.top/img/198274-91.png" /></p>
<h2 id="配置clashr">配置ClashR</h2>
<p>先到它的<a href="https://github.com/frainzy1477/clashrdev/releases" target="_blank" rel="noopener">Github</a>下载所需的版本的软件，但是GitHub下载可能比较慢，所以我这里也提供了快速下载链接，可以到文末找到并下载压缩包。解压压缩包，然后运行<strong>Clash for Windows.exe</strong>,选择<strong>Profiles</strong>.</p>
<p><img data-src="http://figure.cruisetian.top/img/Snipaste_2020-05-11_20-03-04.png" /></p>
<p>在<strong>Download</strong>左边的框里粘贴刚刚复制的链接，然后点击<strong>Download</strong>, 等待它下载。</p>
<p><img data-src="http://figure.cruisetian.top/img/Snipaste_2020-05-11_20-09-12.png" /></p>
<p>然后在<strong>Proxies</strong>界面选择上边的<strong>Global</strong>或者<strong>Rule</strong>(Global是全局代理，Rule是国外网站走代理，国内直接连接)</p>
<p><img data-src="http://figure.cruisetian.top/img/Snipaste_2020-05-11_20-13-22.png" /></p>
<p>然后在<strong>General</strong>中把<strong>System Proxy</strong>打开</p>
<p><img data-src="http://figure.cruisetian.top/img/Snipaste_2020-05-11_20-14-58.png" /></p>
<h2 id="配置浏览器端的switchy-omega插件">配置浏览器端的Switchy Omega插件</h2>
<p>先在Chrome浏览器里安装<a href="https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif?utm_source=chrome-ntp-icon" target="_blank" rel="noopener">Switchy Omega插件</a>,然后进入设置界面，进行配置</p>
<h3 id="配置代理服务器">配置代理服务器</h3>
<p>选择<strong>Proxy</strong>,按照下图中的红框中的内容填进去</p>
<p><img data-src="http://figure.cruisetian.top/img/Snipaste_2020-05-11_20-20-46.png" /></p>
<p>然后点击<strong>应用选项</strong></p>
<p><img data-src="http://figure.cruisetian.top/img/Snipaste_2020-05-11_20-22-01.png" /></p>
<h3 id="配置自动切换规则">配置自动切换规则</h3>
<p><img data-src="http://figure.cruisetian.top/img/Snipaste_2020-05-11_20-24-04.png" /></p>
<p>规则列表网址是这个：https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt</p>
<p>然后再点击<strong>应用选项</strong>即可</p>
<p>最后记得把这个插件启用，并选中<strong>AutoProxy</strong>或者<strong>Proxy</strong></p>
<h2 id="相关链接">相关链接</h2>
<p>ClashR的GitHub链接：<a href="https://github.com/frainzy1477/clashrdev/releases" target="_blank" rel="noopener" class="uri">https://github.com/frainzy1477/clashrdev/releases</a></p>
<p>我给的ClashR快速下载链接：<a href="https://cruisetian.lanzous.com/icih0he" target="_blank" rel="noopener" class="uri">https://cruisetian.lanzous.com/icih0he</a></p>
]]></content>
      <categories>
        <category>软件分享</category>
      </categories>
      <tags>
        <tag>clash</tag>
        <tag>clashR</tag>
        <tag>代理</tag>
        <tag>机场</tag>
        <tag>SwicthyOmega</tag>
      </tags>
  </entry>
  <entry>
    <title>Debian&amp;Ubuntu设置静态ip</title>
    <url>/post/8c930c05.html</url>
    <content><![CDATA[<h2 id="写在前面">写在前面</h2>
<p>最近开了几个虚拟机做实验，通过<code>ssh</code>连接上去，为了避免IP更换带来麻烦，所以设置一下静态IP,这里记录一下，方便查阅。</p>
<h2 id="环境">环境</h2>
<ul>
<li>Debian10系统</li>
<li>NAT模式</li>
</ul>
<a id="more"></a>
<h2 id="配置静态ip">配置静态IP</h2>
<h3 id="备份原有配置文件">备份原有配置文件</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp /etc/network/interfaces /etc/network/interfacesbak <span class="comment">#备份原有配置文件</span></span><br></pre></td></tr></table></figure>
<h3 id="配置静态ip-1">配置静态IP</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim  /etc/network/interfaces <span class="comment">#编辑网卡配置文件</span></span><br></pre></td></tr></table></figure>
<p>将内容修改为以下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># The loopback network interface</span></span><br><span class="line">auto lo</span><br><span class="line"><span class="comment">#iface lo inet loopback</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The primary network interface</span></span><br><span class="line">allow-hotplug ens33</span><br><span class="line"><span class="comment">#iface ens33 inet dhcp</span></span><br><span class="line"></span><br><span class="line">auto ens33</span><br><span class="line">iface ens33 inet static</span><br><span class="line">address 192.168.162.136</span><br><span class="line">gateway 192.168.162.2</span><br><span class="line">netmask 255.255.255.0</span><br></pre></td></tr></table></figure>
<h2 id="配置dns服务">配置DNS服务</h2>
<p>Debian的DNS配置保存在文件<code>/etc/resolv.conf</code>里面。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/resolv.conf</span><br></pre></td></tr></table></figure>
<p>将以下内容填入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nameserver 8.8.8.8</span><br><span class="line">nameserver 114.114.114.114</span><br></pre></td></tr></table></figure>
<h2 id="重启网络">重启网络</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/init.d/networking restart</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>系统设置</category>
      </categories>
      <tags>
        <tag>Debian</tag>
        <tag>Ubuntu</tag>
        <tag>Linux</tag>
        <tag>静态IP</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7安装OpenJDK14</title>
    <url>/post/584b409a.html</url>
    <content><![CDATA[<h2 id="检查并卸载原本有的java版本">检查并卸载原本有的java版本</h2>
<h3 id="查看centos7自带的jdk是否已安装">查看Centos7自带的JDK是否已安装</h3>
<p>在命令行输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure>
<p>如果出现以下结果，则说明已安装，需要先卸载，否则的话直接跳过这一步。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openjdk version <span class="string">"1.8.0 102"</span></span><br><span class="line">OpenJDK Runtime Environment (build 1.8.0_102-b14)</span><br><span class="line">OpenJDK 64-Bit Server VM(build 25.102-bi4, mixed mode)</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="查看已安装文件">查看已安装文件</h3>
<p>首先查看文件，在命令行输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -qa | grep java</span><br></pre></td></tr></table></figure>
<p>会出现如下信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java-1.7.0-openjdk-1.7.0.I11-2.6.7.8.el7.x86_64</span><br><span class="line">python-javapackages-3.4.1-11.el7.noarch</span><br><span class="line">tzdata-java-2016g-2.el7.noarch</span><br><span class="line">javapackages-tools-3.4.1-11.el7.noarch</span><br><span class="line">java-1.8.0-openjdk-1.8.0.102-4.b14.el7.x86_64</span><br><span class="line">java-1.8.0-openjdk-headless-1.8.0.102-4.b14.el7.x86_64</span><br><span class="line">java-1.7.0-openjdk-headless-1.7.0.111-2.6.7.8.el7.x86_64</span><br></pre></td></tr></table></figure>
<h3 id="删除相关的文件">删除相关的文件</h3>
<p>在命令行输入（把上面出现的全部删除，把命令中的 * 替换成文件名）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y remove java-*.*.*</span><br></pre></td></tr></table></figure>
<h3 id="判断是否全部删除">判断是否全部删除</h3>
<p>在命令行输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -qa | grep java</span><br></pre></td></tr></table></figure>
<p>无文件，表示删除成功！</p>
<h2 id="安装openjdk-14">安装OpenJDK 14</h2>
<h3 id="下载解压">下载解压</h3>
<p>安装相关软件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum -y install curl</span><br></pre></td></tr></table></figure>
<p>下载二进制包:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -O https://download.java.net/java/GA/jdk14/076bab302c7b4508975440c56f6cc26a/36/GPL/openjdk-14_linux-x64_bin.tar.gz</span><br></pre></td></tr></table></figure>
<p>使用tar命令解压缩下载的OpenJDK 14归档文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar xvf openjdk-14_linux-x64_bin.tar.gz</span><br></pre></td></tr></table></figure>
<p>将结果文件夹移动到<em>/ opt</em>目录。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mv jdk-14 /opt/</span><br></pre></td></tr></table></figure>
<h3 id="环境配置">环境配置</h3>
<p>配置Java环境：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo tee /etc/profile.d/jdk14.sh &lt;&lt;EOF</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/opt/jdk-14</span><br><span class="line"><span class="built_in">export</span> PATH=\<span class="variable">$PATH</span>:\<span class="variable">$JAVA_HOME</span>/bin</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<p>获取您的配置文件并检查 <code>java</code> 命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile.d/jdk14.sh</span><br></pre></td></tr></table></figure>
<p>确认Java版本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="variable">$JAVA_HOME</span></span><br><span class="line">/opt/jdk-14</span><br><span class="line"></span><br><span class="line">$ java -version</span><br><span class="line">openjdk version <span class="string">"14"</span> 2020-03-17</span><br><span class="line">OpenJDK Runtime Environment (build 14+36-1461)</span><br><span class="line">OpenJDK 64-Bit Server VM (build 14+36-1461, mixed mode, sharing)</span><br></pre></td></tr></table></figure>
<h2 id="测试java安装">测试Java安装</h2>
<p>顺便来编写第一个Java程序。</p>
<p>打开文本编辑器，输入以下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello, world!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>把代码保存为文件，文件名必须是<code>Hello.java</code>，而且文件名也要注意大小写，因为要和定义的类名<code>Hello</code>完全保持一致。</p>
<p>编译Java代码:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ javac Hello.java</span><br></pre></td></tr></table></figure>
<p>如果源代码无误，上述命令不会有任何输出，而当前目录下会产生一个<code>Hello.class</code>文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ls</span><br><span class="line">Hello.class	Hello.java</span><br></pre></td></tr></table></figure>
<p>执行<code>Hello.class</code>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ java Hello</span><br><span class="line">Hello, World!</span><br></pre></td></tr></table></figure>
<p>测试成功，环境配置完成。</p>
]]></content>
      <categories>
        <category>日常学习</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>openJDK</tag>
        <tag>centos7</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7安装python3.8.1</title>
    <url>/post/2f518ecf.html</url>
    <content><![CDATA[<h2 id="写在前面">写在前面</h2>
<p>最近又在学习CentOS，需要安装一下python，但是CentOS7上默认自带了Python 2，没有Python 3。所以就决定安装一个，这里记录一下。</p>
<h2 id="查看-python-版本号">查看 Python 版本号</h2>
<p>如果Linux 上安装有 Python （一般为默认安装），只需要输入简单的命令，就可以查看 Python 的版本号：</p>
<a id="more"></a>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python -V</span><br><span class="line">Python 2.7.5</span><br></pre></td></tr></table></figure>
<p>或者是：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python --version</span><br><span class="line">Python 2.7.5</span><br></pre></td></tr></table></figure>
<p>可以看出，系统自带的 Python 版本是 2.7.5。</p>
<h2 id="安装python依存关系">安装Python依存关系</h2>
<p>我们将从源代码安装Python，因此请安装Python安装所需的软件包：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo yum -y groupinstall <span class="string">"Development Tools"</span></span><br><span class="line">$ sudo yum -y install openssl-devel bzip2-devel libffi-devel</span><br></pre></td></tr></table></figure>
<p>确认gcc可用：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gcc --version</span><br><span class="line">gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-39)</span><br></pre></td></tr></table></figure>
<h2 id="下载python-3.8.1软件包并解压">下载Python 3.8.1软件包并解压</h2>
<p>现在下载Python 3.8.1版本的软件包，在命令行中可运行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo yum -y install wget</span><br><span class="line">$ wget https://www.python.org/ftp/python/3.8.1/Python-3.8.1.tgz</span><br></pre></td></tr></table></figure>
<p>想要下载其他版本可以到<a href="https://www.python.org/downloads/" target="_blank" rel="noopener">python下载地址</a>下载其他版本。</p>
<p>解压缩包：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tar xvf Python-3.8.1.tgz</span><br></pre></td></tr></table></figure>
<p>进入解压缩后的目录:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> Python-3.8*/</span><br></pre></td></tr></table></figure>
<h2 id="创建安装目录">创建安装目录</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkdir /usr/<span class="built_in">local</span>/python3</span><br></pre></td></tr></table></figure>
<h2 id="编译并安装">编译并安装</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./configure --prefix=/usr/<span class="built_in">local</span>/python3</span><br><span class="line">$ make &amp;&amp; make install</span><br></pre></td></tr></table></figure>
<h2 id="建立软链接">建立软链接</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ln -s /usr/<span class="built_in">local</span>/python3/bin/python3 /usr/<span class="built_in">local</span>/bin/python3</span><br><span class="line">$ ln -s /usr/<span class="built_in">local</span>/python3/bin/pip3 /usr/<span class="built_in">local</span>/bin/pip3</span><br></pre></td></tr></table></figure>
<h2 id="验证是否成功">验证是否成功</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python3 -V</span><br><span class="line">Python 3.8.1</span><br><span class="line">$ pip3 -V</span><br><span class="line">pip 19.2.3 from /usr/<span class="built_in">local</span>/python3/lib/python3.8/site-packages/pip (python 3.8)</span><br></pre></td></tr></table></figure>
<h2 id="参考">参考</h2>
<p><a href="https://www.cnblogs.com/anxminise/p/9650206.html" target="_blank" rel="noopener">Centos7安装Python3.7</a></p>
<p><a href="https://ywnz.com/linux/6297.html" target="_blank" rel="noopener">在CentOS 7/CentOS 8发行版上安装Python 3.8.1版本的方法</a></p>
]]></content>
      <categories>
        <category>日常学习</category>
      </categories>
      <tags>
        <tag>centos7</tag>
        <tag>linux</tag>
        <tag>python</tag>
        <tag>环境配置</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows terminal安装使用及美化(1)</title>
    <url>/post/c0de6c42.html</url>
    <content><![CDATA[<h2 id="写在前面">写在前面</h2>
<p>最近在做课程大作业，因为我用的是Windows10，所以需要频繁使用<code>cmd</code>和<code>power shell</code>，但是原本的窗口实在是，太丑了不管是<code>cmd</code>的傻大黑粗和难看的字体，还是<code>power shell</code>那奇异的蓝色背景，都是一言难尽，正好最近微软发布了<code>Windows terminal 1.0</code>,所以我就折腾了一下，搞出了一个稍微好看一点的终端，在这里记录一下。（其实还是为了折腾2333)</p>
<a id="more"></a>
<h2 id="安装">安装</h2>
<ol type="1">
<li>直接在 Windows 10 的 <code>应用商店</code> 里面安装。</li>
</ol>
<ul>
<li>桌面左下角点击 窗口图标， 输入 <code>store</code> , 点击打开 应用商店。</li>
<li>点击右上角搜索图标，输入 <code>terminal</code> ，选择 <code>Windows Terminal</code></li>
<li>根据提示选择安装即可。</li>
</ul>
<ol start="2" type="1">
<li><p>在GitHub下载安装</p>
<p>GitHub地址：<a href="https://github.com/microsoft/terminal/releases" target="_blank" rel="noopener" class="uri">https://github.com/microsoft/terminal/releases</a></p></li>
</ol>
<h2 id="基础设置">基础设置</h2>
<p>打开刚刚安装的<code>Windows terminal</code>（可以在开始菜单找到），默认打开的是<code>power shell</code>的蓝色界面，然后点击上面菜单栏的<strong>+</strong>旁边的向下箭头，选择设置；或者用快捷键<code>Ctrl+,</code>，打开设置文件。</p>
<p><img data-src="http://figure.cruisetian.top/img/Snipaste_2020-05-23_20-03-28.png" /></p>
<h3 id="设定缺省shell">设定缺省shell</h3>
<p>先找到 “profiles” 配置项，看里面 cmd.exe 对应的 <code>guid</code> 是什么，拷贝 cmd.exe 对应的 <code>guid</code> 到 “defaultProfile” 中，这样再打开Windows terminal打开的就是cmd了，当然你也可以自己设置这个参数。</p>
<h3 id="设定选中即复制">设定选中即复制</h3>
<p>修改 “copyOnSelect” 选项的值为 <code>true</code> ，如下所示</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"copyOnSelect": true,</span><br></pre></td></tr></table></figure>
<p>这样就只需要选中就可以自动复制到剪贴板了，比较方便。</p>
<h3 id="设定字体">设定字体</h3>
<p>在你使用的profile中加入如下配置即可</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"fontFace" : "Consolas",</span><br><span class="line">"fontSize" : 12,</span><br></pre></td></tr></table></figure>
<p><code>fontFace</code> 是字体名， 比如 Consolas、NSimsun、SimHei、Consolas，必须是本机能找到的字体文件。 <code>fontSize</code> 是字体大小。</p>
<p>比如我的设置：</p>
<p><img data-src="http://figure.cruisetian.top/img/Snipaste_2020-05-23_20-32-27.png" /></p>
<h3 id="设定配色">设定配色</h3>
<p>在“schema”配置项自行修改，每个人要求不一样，这里放一下我的配置</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"schemes": [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"Campbell"</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">"cursorColor"</span>: <span class="string">"#FFFFFF"</span>,</span><br><span class="line">    <span class="attr">"selectionBackground"</span>: <span class="string">"#ffffff"</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">"background"</span>: <span class="string">"#063d3a"</span>,</span><br><span class="line">    <span class="attr">"foreground"</span>: <span class="string">"#ece4e4"</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">"black"</span>: <span class="string">"#0C0C0C"</span>,</span><br><span class="line">    <span class="attr">"blue"</span>: <span class="string">"#0037DA"</span>,</span><br><span class="line">    <span class="attr">"cyan"</span>: <span class="string">"#3A96DD"</span>,</span><br><span class="line">    <span class="attr">"green"</span>: <span class="string">"#13A10E"</span>,</span><br><span class="line">    <span class="attr">"purple"</span>: <span class="string">"#881798"</span>,</span><br><span class="line">    <span class="attr">"red"</span>: <span class="string">"#C50F1F"</span>,</span><br><span class="line">    <span class="attr">"white"</span>: <span class="string">"#CCCCCC"</span>,</span><br><span class="line">    <span class="attr">"yellow"</span>: <span class="string">"#C19C00"</span>,</span><br><span class="line">    <span class="attr">"brightBlack"</span>: <span class="string">"#767676"</span>,</span><br><span class="line">    <span class="attr">"brightBlue"</span>: <span class="string">"#3B78FF"</span>,</span><br><span class="line">    <span class="attr">"brightCyan"</span>: <span class="string">"#61D6D6"</span>,</span><br><span class="line">    <span class="attr">"brightGreen"</span>: <span class="string">"#16C60C"</span>,</span><br><span class="line">    <span class="attr">"brightPurple"</span>: <span class="string">"#B4009E"</span>,</span><br><span class="line">    <span class="attr">"brightRed"</span>: <span class="string">"#E74856"</span>,</span><br><span class="line">    <span class="attr">"brightWhite"</span>: <span class="string">"#F2F2F2"</span>,</span><br><span class="line">    <span class="attr">"brightYellow"</span>: <span class="string">"#F9F1A5"</span></span><br><span class="line">  &#125;</span><br><span class="line">],</span><br></pre></td></tr></table></figure>
<p>大家可以在可以调色的文本编辑器中打开设置文件 settings.json ，直观的调整为你喜欢的颜色，推荐VS Code。</p>
]]></content>
      <categories>
        <category>软件分享</category>
      </categories>
      <tags>
        <tag>windows terminal</tag>
        <tag>设置</tag>
        <tag>终端</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows terminal安装使用及美化(2)</title>
    <url>/post/ebf33f81.html</url>
    <content><![CDATA[<h2 id="写在前面">写在前面</h2>
<p>上一个part只写了一些基础配置，这个part就写一写进阶的配置。主要包括power shell的美化，以及添加新的terminal，比如<code>git-bash</code>等。</p>
<h2 id="美化power-shell">美化Power shell</h2>
<p>本文我们用 <code>oh-my-posh</code> 在 PowerShell 中实现Linux中<code>oh-my-zsh</code> 的样子，部分效果如下：</p>
<figure>
<img data-src="http://figure.cruisetian.top/img/indications.png" alt="来自oh-my-posh官方主页" /><figcaption>来自oh-my-posh官方主页</figcaption>
</figure>
<blockquote>
<p>上一次失败命令（×）、管理员权限指示（⚡）、显示所登录的用户名和域名、所在工作目录指示（蓝色领带）、posh-git模块提供的Git状态指示器（黄色领带）</p>
</blockquote>
<a id="more"></a>
<h3 id="安装oh-my-posh和posh-git">安装oh-my-posh（和posh-git）</h3>
<p>首先需要以管理员权限启动 PowerShell，以便执行安装操作。(windows10快捷键为<code>Windows+X</code>,然后按A，选择管理员运行power shell)</p>
<p>首先安装Chocolatey</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Set-ExecutionPolicy</span> Bypass <span class="literal">-Scope</span> <span class="keyword">Process</span> <span class="literal">-Force</span>; iex ((<span class="built_in">New-Object</span> System.Net.WebClient).DownloadString(<span class="string">'https://chocolatey.org/install.ps1'</span>))</span><br></pre></td></tr></table></figure>
<p>用 Chocolatey安装 ConEmu</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">choco install ConEmu</span><br></pre></td></tr></table></figure>
<p>然后，运行命令以安装 posh-git，这是 oh-my-posh 的依赖</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Install-Module</span> posh<span class="literal">-git</span> <span class="literal">-Scope</span> CurrentUser</span><br></pre></td></tr></table></figure>
<p>接下来，运行命令以安装 oh-my-posh 本身</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Install-Module</span> oh<span class="literal">-my</span><span class="literal">-posh</span> <span class="literal">-Scope</span> CurrentUser</span><br></pre></td></tr></table></figure>
<h3 id="基本设置">基本设置</h3>
<p>安装完成后，输入</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Import-Module</span> posh<span class="literal">-git</span></span><br><span class="line"><span class="built_in">Import-Module</span> oh<span class="literal">-my</span><span class="literal">-posh</span></span><br><span class="line"><span class="built_in">Set-Theme</span> PowerLine</span><br></pre></td></tr></table></figure>
<p><strong>如果你的电脑里没有安装Git，在输入<code>Import-Module posh-git</code>会报错，解决方法是<a href="https://git-scm.com/" target="_blank" rel="noopener">安装Git</a>或者把这一行去掉，相应的下面的配置文件也要删除这一句</strong></p>
<p>但是这次使用<code>Import-Module</code>的指令，再次启动PowerShell就会发现没有效果，这是因为这些指令仅限于本次会话的PowerShell有效，因此，若要使这一效果在每次启动的时候都有效，那就要将其添加到启动脚本中。</p>
<p>使用记事本打开PS配置文件（如无则创建该文件）</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!(<span class="built_in">Test-Path</span> <span class="literal">-Path</span> <span class="variable">$PROFILE</span> )) &#123; <span class="built_in">New-Item</span> <span class="literal">-Type</span> File <span class="literal">-Path</span> <span class="variable">$PROFILE</span> <span class="literal">-Force</span> &#125;</span><br><span class="line">notepad <span class="variable">$PROFILE</span></span><br></pre></td></tr></table></figure>
<p>随后，在打开的记事本窗口里，在文末加入下面内容，以让Powershell在启动之时应用主题，然后保存。（仅对当前用户生效）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Import-Module posh-git</span><br><span class="line">Import-Module oh-my-posh</span><br><span class="line">Set-Theme Paradox</span><br></pre></td></tr></table></figure>
<p>关闭脚本禁用：允许Powershell运行脚本</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set-executionpolicy</span> remotesigned</span><br></pre></td></tr></table></figure>
<p>再度打开Powershell之时，你就会发现power shell变成了下面这副样子</p>
<p><img data-src="http://figure.cruisetian.top/img/Snipaste_2020-05-23_21-21-05.png" /></p>
<p>还是很丑，所以我们使用Windows terminal进行配置</p>
<h3 id="windows-terminal配置">Windows terminal配置</h3>
<p>打开Windows terminal，然后在下箭头处展开列表，选中设置打开JSON配置文件（也可使用默认的“Ctrl+,”组合键）后定位到profiles区域，可单独对不同终端进行配置。</p>
<p>其中各个参数的注释如下，可以选择自行修改</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">"profiles" :</span><br><span class="line">    [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"acrylicOpacity"</span> : <span class="number">0.70</span>, <span class="comment">//亚克力背景透明度（需启用useAcrylic）</span></span><br><span class="line">            <span class="attr">"background"</span> : <span class="string">"#012456"</span>, <span class="comment">//背景颜色，PS默认为蓝色</span></span><br><span class="line">            <span class="attr">"closeOnExit"</span> : <span class="literal">true</span>, <span class="comment">//关闭窗口的时候退出所有挂载的程序</span></span><br><span class="line">            <span class="attr">"colorScheme"</span> : <span class="string">"Dracula"</span>, <span class="comment">//配色方案（Dracula需导入）</span></span><br><span class="line">            <span class="attr">"commandline"</span> : <span class="string">"powershell.exe"</span>, <span class="comment">//此处终端打开PS</span></span><br><span class="line">            <span class="attr">"cursorColor"</span> : <span class="string">"#FFFFFF"</span>, <span class="comment">//光标颜色</span></span><br><span class="line">            <span class="attr">"cursorShape"</span> : <span class="string">"bar"</span>, <span class="comment">//光标形状（默认为bar，即条状）</span></span><br><span class="line">            <span class="attr">"fontFace"</span> : <span class="string">"Consolas"</span>, <span class="comment">//所用字体</span></span><br><span class="line">            <span class="attr">"fontSize"</span> : <span class="number">14</span>, <span class="comment">//字体大小</span></span><br><span class="line">            <span class="attr">"guid"</span> : <span class="string">"&#123;61c54bbd-c2c6-5271-96e7-009a87ff44bf&#125;"</span>, <span class="comment">//唯一标识符，随机生成</span></span><br><span class="line">            <span class="attr">"historySize"</span> : <span class="number">9001</span>, <span class="comment">//缓存大小</span></span><br><span class="line">            <span class="attr">"icon"</span> : <span class="string">"ms-appx:///ProfileIcons/&#123;61c54bbd-c2c6-5271-96e7-009a87ff44bf&#125;.png"</span>, <span class="comment">//图标</span></span><br><span class="line">            <span class="attr">"name"</span> : <span class="string">"Windows PowerShell"</span>, <span class="comment">//在下拉菜单里显示的名称</span></span><br><span class="line">            <span class="attr">"tabTitle"</span> : <span class="string">"Windows PowerShell"</span>, <span class="comment">//在选项卡上显示的名称</span></span><br><span class="line">            <span class="attr">"padding"</span> : <span class="string">"0, 0, 0, 0"</span>, <span class="comment">//内容的边框距，默认填充全部空间</span></span><br><span class="line">            <span class="attr">"snapOnInput"</span> : <span class="literal">true</span>, <span class="comment">//输入的时候自动滚动到输入位置</span></span><br><span class="line">            <span class="attr">"startingDirectory"</span> : <span class="string">"%USERPROFILE%"</span>, <span class="comment">//初始工作目录，默认为用户目录</span></span><br><span class="line">            <span class="attr">"useAcrylic"</span> : <span class="literal">true</span> <span class="comment">//使用亚克力效果</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure>
<p>这里贴一下我自己用的修改项，各个参数的效果我都用比较易懂的语言写在后面了</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"foreground" : "#ffffff",         //字体颜色</span><br><span class="line"><span class="comment">//"cursorColor" : "#fbff00",        //光标颜色</span></span><br><span class="line">"cursorShape" : "bar",              //光标类型</span><br><span class="line">"startingDirectory" : "%USERPROFILE%", //初始工作目录，默认为用户目录</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置背景</span></span><br><span class="line">"acrylicOpacity": 0.6,  //背景毛玻璃不透明度</span><br><span class="line">"useAcrylic": true,     //背景使用毛玻璃效果</span><br><span class="line">"background": "#0c0c0c"    //背景颜色</span><br></pre></td></tr></table></figure>
<h3 id="下载个性化字体支持特殊符号">下载个性化字体，支持特殊符号</h3>
<p>因为这个主题有一些特殊符号，比如闪电，叉号等，默认字体不支持，就会放几个框框在哪里，比较难看，所以下载一个支持特殊符号的字体并应用，字体链接如下：<a href="https://github.com/adam7/delugia-code/releases/download/v1910.04.1/Delugia.Nerd.Font.Complete.ttf" target="_blank" rel="noopener" class="uri">https://github.com/adam7/delugia-code/releases/download/v1910.04.1/Delugia.Nerd.Font.Complete.ttf</a></p>
<p>下载完以后点击安装即可，然后在power shell的json设置项，将字体改为 &quot;Delugia Nerd Font&quot;，即</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"fontFace": "Delugia Nerd Font",</span><br></pre></td></tr></table></figure>
<h2 id="增加一个新的终端以bash为例">增加一个新的终端（以bash为例）</h2>
<p>打开Windows terminal的配置文件（Win+,)</p>
<h3 id="新增一个-profile">新增一个 profile</h3>
<p>我们把原来的一个 profile 复制一份出来，这样我们就能够写一份自己的终端配置了。然后在下面粘贴一下，并进行一些修改，就比如我这样。</p>
<p><img data-src="http://figure.cruisetian.top/img/Snipaste_2020-05-23_21-52-52.png" /></p>
<h3 id="修改参数">修改参数</h3>
<p>其中你粘贴下去的文件有一些项必须要修改</p>
<ul>
<li><code>guid</code> 必须使用新的跟其他终端不重复的 guid，可以使用下面的guid的工具来生成：<a href="https://www.uuidgenerator.net/guid" target="_blank" rel="noopener">在线guid生成工具</a></li>
<li><code>commandline</code> 你需要改成你的新的终端的路径，如果你是通过安装 Git for Windows 而安装的 Git Bash，那么默认路径就是 <code>C:\Program Files\Git\bin\bash.exe</code>，否则请修改为你自己定义的路径</li>
<li><code>name</code> 改为终端的名称，这个大家可以自定义</li>
</ul>
<p>下面这些参数根据自己需要来修改</p>
<ul>
<li><code>useAcrylic</code> 使用毛玻璃效果</li>
<li><code>acrylicOpacity</code> 毛玻璃效果透明度</li>
<li><code>fontFace</code> 字体名称</li>
<li><code>fontSize</code> 字号大小</li>
<li><code>icon</code> 图标，路径修改为你自己图标的路径</li>
<li><code>startingDirectory</code> 初始路径</li>
</ul>
<p>这里提供一个git-bash的图标，有需要的可以自取</p>
<p><img data-src="http://figure.cruisetian.top/img/git-bash.jpg" /></p>
<p>最后保存这个配置文件，再点击Windows terminal的向下箭头，就可以看到你自己自定义的配置了。</p>
]]></content>
      <categories>
        <category>软件分享</category>
      </categories>
      <tags>
        <tag>windows terminal</tag>
        <tag>设置</tag>
        <tag>终端</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows10安装Ubuntu双系统</title>
    <url>/post/ce0e1ebb.html</url>
    <content><![CDATA[<h2 id="windows10安装ubuntu双系统教程">Windows10安装Ubuntu双系统教程</h2>
<h3 id="写在前面">写在前面</h3>
<p>之前一直用的Windows10系统，由于最近大作业要进行项目开发，而Linux系统对项目开发比较友好，所以准备学习一下Linux系统的基本操作。由于之前学习中接触过Ubuntu，而且Ubuntu生态较完善，出了问题网上比较好找解决办法，所以我选择在我原来电脑上再装一个Ubuntu。本人刚刚入门，也是个小白菜鸡，还望网上的各位大佬发现问题及时指出。</p>
<a id="more"></a>
<h3 id="准备工作">准备工作</h3>
<ol type="1">
<li>准备工具：
<ul>
<li>一台Windows10电脑，</li>
<li>一个U盘（不少于8GB），</li>
<li>写盘工具（推荐RUFUS，轻量，简洁好用而且免费）</li>
</ul></li>
<li>到Ubuntu官网下载系统镜像 <a href="https://ubuntu.com/download/desktop" target="_blank" rel="noopener" class="uri">https://ubuntu.com/download/desktop</a></li>
<li>将镜像写入U盘（！！注意，本步骤会格式化U盘，请先做好数据备份）
<ul>
<li>该过程可以到Ubuntu官网去找，这里给一个链接：<a href="https://ubuntu.com/tutorials/tutorial-create-a-usb-stick-on-windows#1-overview" target="_blank" rel="noopener">将系统镜像写入U盘</a></li>
</ul></li>
</ol>
<h3 id="在windows下创建硬盘空白分区">在Windows下创建硬盘空白分区</h3>
<p>可以使用以下两种方式：</p>
<ul>
<li>直接删除一个分区作为空白分区（不推荐）</li>
<li>找一个有较大空间且平时不怎么用的分区进行压缩（推荐）</li>
</ul>
<p>具体步骤如下：</p>
<ul>
<li>进入<em>我的电脑--管理--磁盘管理</em>，</li>
<li>选择一个有较大空间但平时用不了这么大的分区</li>
<li>进行压缩，压缩的步骤为：右键单击你选择的分区，然后点击<strong>压缩卷</strong>，填入压缩卷的大小，压缩卷产生的分区是用来装Ubuntu系统的，推荐50G以上，硬盘较大的可以多分一些（我选择分80GB）</li>
</ul>
<h3 id="关闭win10系统的快速启动和安全启动">关闭win10系统的快速启动和安全启动</h3>
<ol type="1">
<li><p>关闭快速启动</p>
<ul>
<li>进入Windows设置，点击“系统”，点击<strong>电源和睡眠</strong>，选择<strong>其他电源设置</strong></li>
<li><p>然后点击<strong>选择电源按钮的功能</strong></p></li>
<li>然后点击<strong>更改当前不可用的设置</strong></li>
<li><p>然后将<strong>启用快速启动（推荐）</strong>选项前的对号去掉，然后点击<strong>保存修改</strong></p></li>
</ul></li>
<li><p>关闭安全启动</p>
<ul>
<li>我的电脑是联想拯救者ISK-15，在开机的过程中，狂按F2键，进入BIOS模式，选择Security选项，将下面的Secure Boot设置成disabled。（补充：联想拯救者开机过程狂按F12会进入启动项的选择中）</li>
<li>可以在Boot选项查看快速启动是否关闭</li>
</ul></li>
</ol>
<h3 id="查看系统的启动模式">查看系统的启动模式</h3>
<p>使用快捷键<strong>Win+R</strong>，然后在跳出来的框中输入msinfo32，回车，在BIOS模式中如果显示<strong>传统</strong>，表示系统启动方式为Legacy BIOS；如果为<strong>UEFI</strong>，则显示UEFI(<strong>！！！记住，如果为传统的话后面有/boot分区，如果为UEFI，则为efi文件</strong>)</p>
<h3 id="安装过程">安装过程</h3>
<p>插上U盘启动盘，在开机的过程中不断按F12（注意，不同的电脑按键各不相同，需要根据自己的电脑型号改变），然后选择U盘启动方式<br>接下来就按照正常的U盘安装步骤进行就好了，其中有一个关键步骤，就是在安装图形界面的下一步，系统会提示你是否与windows 10 共存，我们不要点击那个，我们选择其他选项，这样自己方便管理一些。</p>
<p><strong>！！！注意:如果系统没提示你之前安装过windows 那么你的启动方式就错误了，你得回到BIOS页面下更改启动方式再次启动</strong></p>
<p>接下来就是对Ubuntu进行分区，其中显示<strong>空闲</strong>的那一项，就是你刚才在win系统上分出的区，看看后面的空间大小，也和你分的空间大小一致。 选中<strong>空闲</strong>那一行，点击<strong>+</strong>，这是要将整个<strong>空闲</strong>分区继续分区，以用来装Ubuntu系统。</p>
<p>我推荐的分区：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">大小</th>
<th style="text-align: center;">分区类型</th>
<th style="text-align: center;">分区位置</th>
<th style="text-align: center;">用于</th>
<th style="text-align: center;">挂载点</th>
<th style="text-align: center;">用途</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">20G</td>
<td style="text-align: center;">主分区</td>
<td style="text-align: center;">空间起始位置</td>
<td style="text-align: center;">Ext4日志文件系统</td>
<td style="text-align: center;">/</td>
<td style="text-align: center;">存放系统，相当于C盘</td>
</tr>
<tr class="even">
<td style="text-align: center;">4G/8G</td>
<td style="text-align: center;">逻辑分区</td>
<td style="text-align: center;">空间起始位置</td>
<td style="text-align: center;">交换空间</td>
<td style="text-align: center;">/swap</td>
<td style="text-align: center;">虚拟内存</td>
</tr>
<tr class="odd">
<td style="text-align: center;">200MB</td>
<td style="text-align: center;">逻辑分区</td>
<td style="text-align: center;">空间起始位置</td>
<td style="text-align: center;">Ext4日志文件系统</td>
<td style="text-align: center;">/boot or efi</td>
<td style="text-align: center;">引导分区</td>
</tr>
<tr class="even">
<td style="text-align: center;">剩余</td>
<td style="text-align: center;">逻辑/主分区</td>
<td style="text-align: center;">空间起始位置</td>
<td style="text-align: center;">Ext4日志文件系统</td>
<td style="text-align: center;">/home</td>
<td style="text-align: center;">储存数据用</td>
</tr>
</tbody>
</table>
<p><strong>第四次分区完成后请不要马上点 “安装”！！！ 第四次分区完成后请不要马上点 “安装”！！！ 第四次分区完成后请不要马上点 “安装”！！！</strong></p>
<p>记得在 <strong>安装启动引导器的设备：</strong> 选项中选择 <strong>/boot or efi</strong> 所在盘符，至此，点击 <strong>安装</strong>，一直等到出现安装完成重启的提示，重启就好了，然后你会发现，重启之后仍然是 Windows，还有最后一步。</p>
<h3 id="安装-easybcd-2.3"><strong>安装 EasyBCD 2.3</strong></h3>
<p>这个软件是用于系统配置创建多重启动系统的引导文件，也就是新创建一个启动文件，可以让你的电脑在启动的时候，有进入何种系统的选择。<strong>添加新条目</strong> -&gt;<strong>Linux/BSD</strong>-&gt;类型 <strong>Grub (Legacy)</strong> 驱动器，选择<strong>驱动器</strong>-&gt;<strong>添加条目</strong>，保存后重启计算机。</p>
<p>参考文章：<a href="https://www.cnblogs.com/masbay/p/10745170.html" target="_blank" rel="noopener" class="uri">https://www.cnblogs.com/masbay/p/10745170.html</a></p>
]]></content>
      <categories>
        <category>日常学习</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Linux</tag>
        <tag>Win</tag>
        <tag>双系统</tag>
      </tags>
  </entry>
  <entry>
    <title>conda安装虚拟环境</title>
    <url>/post/7615c371.html</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<p>不同的代码往往需要特定的运行环境。比如说有些代码需要在python3.6的环境下运行，有些代码需要在python2.7的环境下运行。这时就可以通过创建虚拟环境来营造代码运行适合的环境，而不会影响到自己本来的生产环境，所以就记录以下<code>conda</code>安装虚拟环境的命令，方便查阅。</p>
<p><code>conda</code>的安装就不在这里详述，自行安装。</p>
<a id="more"></a>
<h2 id="conda安装虚拟环境">conda安装虚拟环境</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda create -n your_env_name python=version（2.7、3.6等)</span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda create -n py3.7.3 python=3.7.3</span><br></pre></td></tr></table></figure>
<p>会出现以下结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Collecting package metadata (current_repodata.json): <span class="keyword">done</span></span><br><span class="line">Solving environment: failed with repodata from current_repodata.json, will retry with next repodata <span class="built_in">source</span>.</span><br><span class="line">Collecting package metadata (repodata.json): <span class="keyword">done</span></span><br><span class="line">Solving environment: <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Package Plan ##</span></span><br><span class="line"></span><br><span class="line">  environment location: /root/anaconda3/envs/py3.7.3</span><br><span class="line"></span><br><span class="line">  added / updated specs:</span><br><span class="line">    - python=3.7.3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">The following packages will be downloaded:</span><br><span class="line"></span><br><span class="line">    package                    |            build</span><br><span class="line">    ---------------------------|-----------------</span><br><span class="line">    _libgcc_mutex-0.1          |             main           3 KB  https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class="line">    ca-certificates-2020.6.24  |                0         125 KB  https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class="line">    certifi-2020.6.20          |           py37_0         156 KB  https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class="line">    libedit-3.1.20191231       |       h7b6447c_0         167 KB  https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class="line">    libffi-3.2.1               |       hd88cf55_4          40 KB  https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class="line">    libgcc-ng-9.1.0            |       hdf63c60_0         5.1 MB  https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class="line">    libstdcxx-ng-9.1.0         |       hdf63c60_0         3.1 MB  https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class="line">    ncurses-6.2                |       he6710b0_1         817 KB  https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class="line">    openssl-1.1.1g             |       h7b6447c_0         2.5 MB  https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class="line">    pip-20.1.1                 |           py37_1         1.7 MB  https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class="line">    python-3.7.3               |       h0371630_0        32.1 MB  https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class="line">    readline-7.0               |       h7b6447c_5         324 KB  https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class="line">    setuptools-47.3.1          |           py37_0         514 KB  https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class="line">    sqlite-3.32.3              |       h62c20be_0         1.1 MB  https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class="line">    tk-8.6.10                  |       hbc83047_0         3.0 MB  https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class="line">    wheel-0.34.2               |           py37_0          51 KB  https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class="line">    xz-5.2.5                   |       h7b6447c_0         341 KB  https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class="line">    zlib-1.2.11                |       h7b6447c_3         103 KB  https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class="line">    ------------------------------------------------------------</span><br><span class="line">                                           Total:        51.2 MB</span><br><span class="line"></span><br><span class="line">The following NEW packages will be INSTALLED:</span><br><span class="line"></span><br><span class="line">  _libgcc_mutex      anaconda/pkgs/main/linux-64::_libgcc_mutex-0.1-main</span><br><span class="line">  ca-certificates    anaconda/pkgs/main/linux-64::ca-certificates-2020.6.24-0</span><br><span class="line">  certifi            anaconda/pkgs/main/linux-64::certifi-2020.6.20-py37_0</span><br><span class="line">  libedit            anaconda/pkgs/main/linux-64::libedit-3.1.20191231-h7b6447c_0</span><br><span class="line">  libffi             anaconda/pkgs/main/linux-64::libffi-3.2.1-hd88cf55_4</span><br><span class="line">  libgcc-ng          anaconda/pkgs/main/linux-64::libgcc-ng-9.1.0-hdf63c60_0</span><br><span class="line">  libstdcxx-ng       anaconda/pkgs/main/linux-64::libstdcxx-ng-9.1.0-hdf63c60_0</span><br><span class="line">  ncurses            anaconda/pkgs/main/linux-64::ncurses-6.2-he6710b0_1</span><br><span class="line">  openssl            anaconda/pkgs/main/linux-64::openssl-1.1.1g-h7b6447c_0</span><br><span class="line">  pip                anaconda/pkgs/main/linux-64::pip-20.1.1-py37_1</span><br><span class="line">  python             anaconda/pkgs/main/linux-64::python-3.7.3-h0371630_0</span><br><span class="line">  readline           anaconda/pkgs/main/linux-64::readline-7.0-h7b6447c_5</span><br><span class="line">  setuptools         anaconda/pkgs/main/linux-64::setuptools-47.3.1-py37_0</span><br><span class="line">  sqlite             anaconda/pkgs/main/linux-64::sqlite-3.32.3-h62c20be_0</span><br><span class="line">  tk                 anaconda/pkgs/main/linux-64::tk-8.6.10-hbc83047_0</span><br><span class="line">  wheel              anaconda/pkgs/main/linux-64::wheel-0.34.2-py37_0</span><br><span class="line">  xz                 anaconda/pkgs/main/linux-64::xz-5.2.5-h7b6447c_0</span><br><span class="line">  zlib               anaconda/pkgs/main/linux-64::zlib-1.2.11-h7b6447c_3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Proceed ([y]/n)? y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Downloading and Extracting Packages</span><br><span class="line">libedit-3.1.20191231 | 167 KB    | <span class="comment">################################### | 100%</span></span><br><span class="line">xz-5.2.5             | 341 KB    | <span class="comment">################################### | 100%</span></span><br><span class="line">wheel-0.34.2         | 51 KB     | <span class="comment">################################### | 100%</span></span><br><span class="line">pip-20.1.1           | 1.7 MB    | <span class="comment">################################### | 100%</span></span><br><span class="line">openssl-1.1.1g       | 2.5 MB    | <span class="comment">################################### | 100%</span></span><br><span class="line">python-3.7.3         | 32.1 MB   | <span class="comment">################################### | 100%</span></span><br><span class="line">libstdcxx-ng-9.1.0   | 3.1 MB    | <span class="comment">################################### | 100%</span></span><br><span class="line">ca-certificates-2020 | 125 KB    | <span class="comment">################################### | 100%</span></span><br><span class="line">libffi-3.2.1         | 40 KB     | <span class="comment">################################### | 100%</span></span><br><span class="line">ncurses-6.2          | 817 KB    | <span class="comment">################################### | 100%</span></span><br><span class="line">certifi-2020.6.20    | 156 KB    | <span class="comment">################################### | 100%</span></span><br><span class="line">libgcc-ng-9.1.0      | 5.1 MB    | <span class="comment">################################### | 100%</span></span><br><span class="line">_libgcc_mutex-0.1    | 3 KB      | <span class="comment">################################### | 100%</span></span><br><span class="line">zlib-1.2.11          | 103 KB    | <span class="comment">################################### | 100%</span></span><br><span class="line">tk-8.6.10            | 3.0 MB    | <span class="comment">################################### | 100%</span></span><br><span class="line">setuptools-47.3.1    | 514 KB    | <span class="comment">################################### | 100%</span></span><br><span class="line">readline-7.0         | 324 KB    | <span class="comment">################################### | 100%</span></span><br><span class="line">sqlite-3.32.3        | 1.1 MB    | <span class="comment">################################### | 100%</span></span><br><span class="line">Preparing transaction: <span class="keyword">done</span></span><br><span class="line">Verifying transaction: <span class="keyword">done</span></span><br><span class="line">Executing transaction: <span class="keyword">done</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># To activate this environment, use</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     $ conda activate py3.7.3</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># To deactivate an active environment, use</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     $ conda deactivate</span></span><br></pre></td></tr></table></figure>
<p>激活虚拟环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda activate my_env_name</span><br></pre></td></tr></table></figure>
<p>激活之后，命令行的最前面就会出现虚拟环境的名字如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(py3.7.3) root@debian:~<span class="comment">#</span></span><br></pre></td></tr></table></figure>
<p>退出虚拟环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda deactivate</span><br></pre></td></tr></table></figure>
<h2 id="查看conda环境下所有的虚拟环境">查看Conda环境下所有的虚拟环境</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda info --envs</span><br></pre></td></tr></table></figure>
<h2 id="删除conda虚拟环境">删除Conda虚拟环境</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda remove -n my_env_name --all</span><br></pre></td></tr></table></figure>
<p><code>my_env_name</code>对应的就是要删除的虚拟环境名称</p>
]]></content>
      <categories>
        <category>日常学习</category>
      </categories>
      <tags>
        <tag>Anaconda</tag>
        <tag>虚拟环境</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows terminal安装使用及美化(3)</title>
    <url>/post/f2e80ec0.html</url>
    <content><![CDATA[<h2 id="写在前面">写在前面</h2>
<p>之前两个part写了一些关于Windows terminal的基础和进阶配置，配置好以后用了两天感觉不错，所以就准备把它作为Windows下主要使用的命令行工具，所以决定把它加到右键菜单里去，在这里记录一下过程，也算是有关Windows terminal的高阶分享吧。</p>
<a id="more"></a>
<h2 id="添加过程">添加过程</h2>
<h3 id="测试变量">测试变量</h3>
<p>下面的两个变量后面的操作需要使用到。所以，先测试下是否正常。用 <code>cmd</code> 分别输入这 2 句命令(使用<code>gitbash</code>无效的)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> %USERPROFILE%</span><br><span class="line"><span class="built_in">echo</span> %LOCALAPPDATA%</span><br></pre></td></tr></table></figure>
<p>如果有报错，接下来的操作，请把对应的部分进行替换。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">%USERPROFILE% =&gt; C:\Users\&#123;username&#125;</span><br><span class="line">%LOCALAPPDATA% =&gt; C:\Users\&#123;userName&#125;\AppData\Local</span><br></pre></td></tr></table></figure>
<p><strong>注意</strong> <code>{userName}</code>为自己的用户名</p>
<h3 id="获取图标">获取图标</h3>
<p>创建 Terminal 文件夹，用来存放图标。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir <span class="string">"%USERPROFILE%\AppData\Local\Terminal"</span></span><br></pre></td></tr></table></figure>
<p>从微软的Github上下载Windows Terminal的图标，地址如下:<a href="https://github.com/microsoft/terminal/blob/master/res/terminal.ico" target="_blank" rel="noopener" class="uri">https://github.com/microsoft/terminal/blob/master/res/terminal.ico</a> 然后将图标保存到<code>%USERPROFILE%\AppData\Local\Terminal</code>目录中。</p>
<h3 id="添加注册表文件">添加注册表文件</h3>
<p>新建一个文件，文件名随意 比如<code>wt.reg</code>。记得保存为<code>.reg</code>文件(名称随意，后缀名不可以错)，并添加以下内容然后保存。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Windows Registry Editor Version <span class="number">5.00</span></span><br><span class="line"></span><br><span class="line">[<span class="meta">HKEY_CLASSES_ROOT\Directory\Background\shell\wt</span>]</span><br><span class="line">@=<span class="string">"Windows Terminal Here"</span></span><br><span class="line"><span class="string">"Icon"</span>=<span class="string">"%USERPROFILE%\\AppData\\Local\\Terminal\\terminal.ico"</span></span><br><span class="line"></span><br><span class="line">[<span class="meta">HKEY_CLASSES_ROOT\Directory\Background\shell\wt\command</span>]</span><br><span class="line">@=<span class="string">"C:\\Users\\&#123;username&#125;\\AppData\\Local\\Microsoft\\WindowsApps\\wt.exe"</span></span><br></pre></td></tr></table></figure>
<p><strong>注意</strong> 上面的<code>{userName}</code>为自己的用户名</p>
<p>然后双击执行这个<code>.reg</code>文件就可以了。这时候就会发现右键菜单里面有了Windows Terminal Here选项。</p>
<h3 id="真正的windows-terminal-here">真正的Windows terminal &quot;Here&quot;</h3>
<p>执行完上面的操作你会发现虽然右键可以打开Windows terminal，但是在任何文件夹打开的 Windows terminal 都不是当前的目录，这还怎么叫做<code>here</code>呢。继续配置</p>
<p>打开Windows terminal的配置文件（在Windows terminal向下箭头的设置中），找到 <code>startingDirectory</code>改为：<code>./</code> 即：<code>&quot;startingDirectory&quot;: &quot;./&quot;</code>，就可以做到在当前目录打开啦。</p>
<h2 id="后记">后记</h2>
<p>到这里，Windows terminal的配置就基本结束啦，如果想要更多其它的效果，大家可以自己折腾，有什么不理解的或者更好的想法也可以在评论区里说出来，大家一起交流。</p>
]]></content>
      <categories>
        <category>软件分享</category>
      </categories>
      <tags>
        <tag>windows terminal</tag>
        <tag>设置</tag>
        <tag>终端</tag>
      </tags>
  </entry>
  <entry>
    <title>Gmail邮箱注册，谷歌账号注册</title>
    <url>/post/b02ca219.html</url>
    <content><![CDATA[<h2 id="写在前面">写在前面</h2>
<p>由于谷歌的政策原因，如今注册一个谷歌账户可以说是难上加难了，但是有时候又会有用谷歌服务的需求，所以这里就来分享一下如何快速地注册一个谷歌账户。</p>
<h2 id="说明">说明</h2>
<ul>
<li>一定要用【手机】注册（亲测电脑注册不上）</li>
<li>该方法不需要科学上网</li>
<li>在这篇文章发布时是可以注册的，但是也有可能以后谷歌政策的修改导致注册不上的情况，所以该方法有效期不定，但是目前看来还是很稳定的</li>
</ul>
<a id="more"></a>
<h2 id="注册过程">注册过程</h2>
<h3 id="下载手机版qq邮箱或者网易邮箱大师">下载手机版QQ邮箱或者网易邮箱大师</h3>
<p>这两款软件都可以在各大应用商店找到，二者选其一下载即可，因为这两款邮箱工具都自带谷歌邮箱服务加速，无需我们自己准备梯子！本文使用<strong>QQ邮箱</strong>演示。</p>
<h2 id="开始注册">开始注册</h2>
<ul>
<li>首先打开QQ邮箱，滑到底部，找到<strong>添加账户</strong>选项，点击</li>
</ul>
<p><img data-src="http://figure.cruisetian.top/img/Snipaste_2020-06-13_13-01-24.png" /></p>
<ul>
<li>然后在跳出的页面选择<strong>Gmail</strong></li>
</ul>
<p><img data-src="http://figure.cruisetian.top/img/Snipaste_2020-06-13_13-01-50.png" /></p>
<ul>
<li>点击<strong>创建账号</strong></li>
</ul>
<p><img data-src="http://figure.cruisetian.top/img/Snipaste_2020-06-13_13-02-10.png" /></p>
<ul>
<li>在接下来跳出的窗口中填入自己的各项信息以后点击<strong>下一步</strong></li>
</ul>
<p><img data-src="http://figure.cruisetian.top/img/Snipaste_2020-06-13_13-03-50.png" /></p>
<ul>
<li>之后会跳转到填写手机号的界面，在国家那里拉到最后，选择<strong>中国 +86</strong>，然后直接填写手机号即可，然后点击<strong>下一步</strong></li>
</ul>
<p><img data-src="http://figure.cruisetian.top/img/Snipaste_2020-06-13_13-21-05.png" /></p>
<ul>
<li>跳转到验证界面以后输入你刚刚输入的手机号收到的验证码，点击<strong>下一步</strong></li>
</ul>
<p><img data-src="http://figure.cruisetian.top/img/Snipaste_2020-06-13_13-21-45.png" /></p>
<ul>
<li>之后完善一下个人信息，填写一下生日，性别什么的就好了，辅助邮箱这个可填可不填，填写好以后点击<strong>下一步</strong>即可</li>
</ul>
<p><img data-src="http://figure.cruisetian.top/img/Snipaste_2020-06-13_13-23-23.png" /></p>
<ul>
<li>最后就是一些政策性的东西，自己看一看，根据自己的需求选择同意还是拒绝就好，操作完成以后账号就注册完成了</li>
</ul>
<h2 id="后记">后记</h2>
<p>整个过程比较简单，这里就是提供一个方法，如果还有其他方式，也欢迎留言交流。</p>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>Gmail</tag>
        <tag>谷歌账户</tag>
        <tag>国内注册</tag>
      </tags>
  </entry>
  <entry>
    <title>goindex-在国内使用你的谷歌网盘</title>
    <url>/post/1d96ecd4.html</url>
    <content><![CDATA[<h2 id="写在前面">写在前面</h2>
<p>谷歌云盘是一款极其好用的网盘，使用体验吊打百度网盘，不限速，而且甚至还可以获得无限空间，至于如何获得无限空间，这里就不说明了，有兴趣的可以自行谷歌。但是这么好用的一款网盘，由于大家都知道的原因，在国内并不能使用，只能科学上网使用，有时候需要下载文件时就需要浪费宝贵的代理流量，毕竟都是钱啊，所以今天就在这里分享一下通过Cloudflare来实现在国内访问并下载你谷歌网盘中的文件，不用消耗代理流量。</p>
<a id="more"></a>
<h2 id="注册cloudflare账户">注册Cloudflare账户</h2>
<p>Cloudflare是一个知名的提供免费的CDN服务和域名解析服务的服务商</p>
<p>首先注册一个Cloudflare账户，到下面这个地址：<a href="https://dash.cloudflare.com/sign-up" target="_blank" rel="noopener">Cloudflare注册</a>.</p>
<p><img data-src="http://figure.cruisetian.top/img/Snipaste_2020-06-12_19-34-42.png" /></p>
<p>注册完以后登录，可能会提示你添加站点，点击右上角你的账户标识然后点击<strong>账户主页</strong>就好了，在这个页面可以验证一下邮箱</p>
<p><img data-src="http://figure.cruisetian.top/img/Snipaste_2020-06-12_19-38-30.png" /></p>
<p><img data-src="http://figure.cruisetian.top/img/Snipaste_2020-06-12_19-40-56.png" /></p>
<p>验证完以后重新回到主页，点击右边的<strong>Workers</strong>,然后定义一个自己的名字，后来会显示在你的访问你的goindex服务的域名中，然后点击<strong>Set Up</strong></p>
<p><img data-src="http://figure.cruisetian.top/img/Snipaste_2020-06-12_19-44-52.png" /></p>
<p>进入到下一个界面，点击<strong>Continue with Free</strong></p>
<p><img data-src="http://figure.cruisetian.top/img/Snipaste_2020-06-12_19-48-11.png" /></p>
<p>然后接下来可以开始创建Workers，先做一些准备工作</p>
<h2 id="获取workers代码">获取Workers代码</h2>
<p>首先进入下面这个网址：<a href="https://gdindex-code-builder.glitch.me/" target="_blank" rel="noopener">goindex code builder</a>,(进入可能有点慢，稍微等一会)</p>
<p>进入以后按照步骤进行即可，点击<strong>Click me</strong></p>
<p><img data-src="http://figure.cruisetian.top/img/Snipaste_2020-06-12_19-57-18.png" /></p>
<p>之后会跳转到登录谷歌账号的页面，选择你注册Cloudflare账户的账号登录，之后的一些权限点<strong>允许</strong>即可，这时候会得到一行代码，点击右边复制按钮复制代码</p>
<p><img data-src="http://figure.cruisetian.top/img/Snipaste_2020-06-12_19-59-45.png" /></p>
<p>然后返回刚刚的网址将复制的代码粘贴进入<strong>Authorization Code</strong>框，然后接下来登录谷歌云盘，选择你想要部署的文件夹，点进去，此时浏览器的地址栏应该是这个样子的</p>
<p><img data-src="http://figure.cruisetian.top/img/Snipaste_2020-06-12_20-04-35.png" /></p>
<p>然后将浏览器的地址栏<strong>folders</strong>后面的部分复制下来，粘贴进<strong>Default Root ID</strong>框内</p>
<p><img data-src="http://figure.cruisetian.top/img/Snipaste_2020-06-12_20-06-46.png" /></p>
<p>然后接下来的配置就自己选择配置一下就好了，填完以后点击<strong>Get Code</strong>按钮</p>
<p><img data-src="http://figure.cruisetian.top/img/Snipaste_2020-06-12_20-07-51.png" /></p>
<p>这时候你会得到一堆代码，点击<strong>Copy the code to clipboard</strong>即可。</p>
<p><img data-src="http://figure.cruisetian.top/img/Snipaste_2020-06-12_20-10-54.png" /></p>
<h2 id="创建workers">创建Workers</h2>
<p>回到Cloudflare页面，点击<strong>Create a Worker</strong></p>
<p><img data-src="http://figure.cruisetian.top/img/Snipaste_2020-06-12_20-12-52.png" /></p>
<p>将原来<strong>Script</strong>框内的代码删除，然后把刚刚复制的代码粘贴进去，其中代码最开头的<code>self.props</code>中的内容可以修改，根据自己的需求进行修改即可</p>
<p><img data-src="http://figure.cruisetian.top/img/Snipaste_2020-06-12_20-16-39.png" /></p>
<p>然后可以修改一下workers的名字，一般默认的比较长，不太好记</p>
<p><img data-src="http://figure.cruisetian.top/img/Snipaste_2020-06-12_20-18-06.png" /></p>
<p>然后点击右侧的<strong>Preview</strong>预览一下生成的界面，下面展示的网址就是你之后要不翻墙访问你的谷歌云盘要输入的网址，可以复制一下</p>
<p><img data-src="http://figure.cruisetian.top/img/Snipaste_2020-06-12_20-23-40.png" /></p>
<p>如果预览没有问题就点击底部的<strong>Save and Deploy</strong>部署Workers即可</p>
<p><img data-src="http://figure.cruisetian.top/img/Snipaste_2020-06-12_20-20-51.png" /></p>
<p>之后就可以在浏览器输入刚刚复制的地址进行访问了。</p>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>goindex</tag>
        <tag>谷歌云盘</tag>
        <tag>Google Drive</tag>
        <tag>国内使用</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker设置HTTP/HTTPS代理</title>
    <url>/post/4315e63f.html</url>
    <content><![CDATA[<h2 id="写在前面">写在前面</h2>
<p>最近刚刚开始学习docker，抽了两天的空余时间了解了一下docker，今天正式在我的电脑上安装并使用docker，因为众所周知的原因，Docker在国内的使用比较艰难，虽然很多组织在国内提供了<code>mirror</code>，可以拉取各种官方镜像,但是大量的组织或个人的镜像都在docker hub，这一部分并没有被镜像同步。所以就需要给docker设置代理，帮助我们更好的使用docker。</p>
<a id="more"></a>
<h2 id="docker简介">Docker简介</h2>
<p>Docker容器与虚拟机类似，但原理上，容器是将操作系统层虚拟化，虚拟机则是虚拟化硬件，因此容器更具有便携性、高效地利用服务器。 容器更多的用于表示 软件的一个标准化单元。由于容器的标准化，因此它可以无视基础设施（Infrastructure）的差异，部署到任何一个地方。另外，Docker也为容器提供更强的业界的隔离兼容。</p>
<h2 id="前提条件">前提条件</h2>
<ul>
<li>拥有一个HTTP代理</li>
<li>Linux发行版的服务管理器使用的是systemd</li>
<li>我的系统是Ubuntu18.04，docker版本是19.03，能够正常设置</li>
</ul>
<h2 id="httphttps-proxy">HTTP/HTTPS proxy</h2>
<p>好了从这里开始就开始配置代理了。</p>
<h3 id="为docker服务创建docker.service.d-目录">为docker服务创建docker.service.d 目录：</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /etc/systemd/system/docker.service.d</span><br></pre></td></tr></table></figure>
<h3 id="创建http-或者https-代理文件并修改">创建HTTP 或者HTTPS 代理文件并修改:</h3>
<ul>
<li>HTTP:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/systemd/system/docker.service.d/http-proxy.conf</span><br></pre></td></tr></table></figure>
<p>然后按 'i'切换到输入模式，将以下配置填入，其中代理IP和端口根据你自己的情况来定。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Service]</span><br><span class="line">Environment=<span class="string">"HTTP_PROXY=http://proxy.example.com:80/"</span></span><br></pre></td></tr></table></figure>
<ul>
<li>HTTPS:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/systemd/system/docker.service.d/https-proxy.conf</span><br></pre></td></tr></table></figure>
<p>同样的，按 'i'切换到输入模式，将以下配置填入，其中代理IP和端口根据你自己的情况来定。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Service]</span><br><span class="line">Environment=<span class="string">"HTTPS_PROXY=https://proxy.example.com:443/"</span></span><br></pre></td></tr></table></figure>
<h3 id="局域网或者国内的registry不使用代理">局域网或者国内的registry不使用代理</h3>
<p>如果有局域网或者国内的registry，我们还需要使用 NO_PROXY 变量声明一下，比如你可以能国内的daocloud.io放有镜像:</p>
<ul>
<li>HTTP:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Service]</span><br><span class="line">Environment=<span class="string">"HTTP_PROXY=http://proxy.example.com:80/"</span> <span class="string">"NO_PROXY=localhost,127.0.0.1,daocloud.io"</span></span><br></pre></td></tr></table></figure>
<ul>
<li>HTTPS:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Service]</span><br><span class="line">Environment=<span class="string">"HTTPS_PROXY=https://proxy.example.com:443/"</span> <span class="string">"NO_PROXY=localhost,127.0.0.1,daocloud.io"</span></span><br></pre></td></tr></table></figure>
<h3 id="完成修改后刷新systemd配置">完成修改后刷新systemd配置</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure>
<h3 id="重启docker">重启Docker</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>
<h3 id="验证配置是否已加载">验证配置是否已加载</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl show --property=Environment docker</span><br></pre></td></tr></table></figure>
<p>输出应类似于以下语句：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Environment=HTTP_PROXY=http://proxy.example.com:80/</span><br><span class="line">or</span><br><span class="line">Environment=HTTPS_PROXY=https://proxy.example.com:443/</span><br></pre></td></tr></table></figure>
<p>好了，现在就可以愉快的使用Docker了。</p>
<h2 id="参考文档">参考文档：</h2>
<p><a href="https://docs.docker.com/config/daemon/systemd/" target="_blank" rel="noopener" class="uri">https://docs.docker.com/config/daemon/systemd/</a></p>
]]></content>
      <categories>
        <category>日常学习</category>
      </categories>
      <tags>
        <tag>代理</tag>
        <tag>Docker</tag>
        <tag>proxy</tag>
      </tags>
  </entry>
  <entry>
    <title>proxifier-让你实现真正的全局代理</title>
    <url>/post/64808312.html</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<p>目前很多人都使用上了Shadowsocks，V2ray，Trojan这类的socks5代理来实现科学上网，虽然这些代理通常有所谓的<em>全局代理</em>模式，但是我们在日常使用中就会发现，我们并不能利用这些代理来打游戏，从GitHub上clone项目依然慢的离谱，这是因为由于socks5代理模式原理的限制，使得这些socks5代理的<em>全局模式</em>并不能真正意义上实现全局代理，只能使网页浏览器，邮件服务器，文件传输这些服务实现代理。下面通过OSI模型来解释原理。</p>
<a id="more"></a>
<p><img data-src="http://figure.cruisetian.top/img/7541336-b87f3c6f5235b56d.png" /></p>
<p>因为上面提到的这些服务在网络层级中处于最上层应用层，上面提到的这些socks5类型的代理则处于第五层会话层，所以可以代理上边层级的数据，而游戏数据是直接通过传输层的协议TCP和UDP进行通讯的，所以不经过会话层也不需要表示层来解释，所以正常情况下你就算开了这些socks5代理的<em>全局模式</em>，也不能加速游戏因为代理不了跑在传输层的游戏通讯数据，而借助proxifier这类工具则可以实现真正意义上的全局代理。</p>
<h2 id="proxifier介绍">Proxifier介绍</h2>
<p>Proxifier是一款功能非常强大的代理客户端，支持Windows XP/Vista/Win7/Win10 和 MacOS，支持http/https、socks4/5、TCP、UDP等协议，可以指定端口，指定IP，指定域名、指定程序、指定用户名密码授权等运行模式，兼容性非常好，有点类似SOCKSCAP。</p>
<h2 id="安装">安装</h2>
<h3 id="proxifier下载">Proxifier下载</h3>
<p>官网发布多个版本，需要付费使用，同时也提供了 31 天的免费试用，其中<a href="https://www.baidu.com/s?wd=便携版&amp;tn=24004469_oem_dg&amp;rsv_dl=gh_pl_sl_csd" target="_blank" rel="noopener">便携版</a>不需要安装，直接双击运行，安装版则直接安装即可。<br>   Windows便携版：<a href="https://www.proxifier.com/distr/ProxifierPE.zip" target="_blank" rel="noopener">官网地址</a><br>   Windows安装版：<a href="https://www.proxifier.com/distr/ProxifierSetup.exe" target="_blank" rel="noopener">官网地址</a><br>   Mac版：<a href="https://www.proxifier.com/distr/ProxifierMac.zip" target="_blank" rel="noopener">官网地址</a></p>
<p>但由于Proxifier 官网下载地址国内无法访问，且是商业收费版，推荐下面的链接中下载汉化破解版 <a href="https://cruisetian.lanzous.com/icpyx6f" target="_blank" rel="noopener">Proxifier汉化注册版</a></p>
<h3 id="proxifier安装">Proxifier安装</h3>
<p>将下载下来的安装包解压以后，双击<strong>setup.exe</strong>，根据提示一步步安装，这里不再赘述。</p>
<h2 id="proxifier设置">Proxifier设置</h2>
<h3 id="代理服务器配置">代理服务器配置</h3>
<p>打开proxifier以后，点击菜单栏的<strong>配置文件-&gt;代理服务器</strong>,点击<strong>添加</strong></p>
<p><img data-src="http://figure.cruisetian.top/img/Snipaste_2020-05-17_13-59-07.png" /></p>
<p>然后填入你的代理服务器地址和端口，如果本地有ss,v2ray,trojan服务的话可以在你对应的客户端的设置中找到本地监听地址和监听端口，填入即可，协议我选择socks5协议</p>
<p><img data-src="http://figure.cruisetian.top/img/Snipaste_2020-05-17_14-00-56.png" /></p>
<p>点击检查，查看是否可用，如果如下显示“代理可在proxifier中使用”则说明设置正确</p>
<p><img data-src="http://figure.cruisetian.top/img/Snipaste_2020-05-17_14-05-51.png" /></p>
<p>然后点击<strong>确定</strong>，返回到设置界面，点击<strong>确定</strong>即可，接着会弹出一个窗口，提示你是否要把这个代理服务器作为默认代理，点击<strong>是</strong></p>
<p><img data-src="http://figure.cruisetian.top/img/Snipaste_2020-05-17_14-07-35.png" /></p>
<p>没什么问题的话，Proxifier 就可以正常使用了，它会将本机所有的联网全部通过配置的代理服务器发送和接收，此外你还会在程序主界面看到不少的日志信息</p>
<h3 id="代理规则设置">代理规则设置</h3>
<p>Proxifier 还可以自定义规则，进行个性化配置，点击菜单栏的<strong>配置文件-&gt;代理规则</strong>,点击添加即可增加新的规则<img data-src="http://figure.cruisetian.top/img/Snipaste_2020-05-17_14-16-41.png" /></p>
<p>名称随意，应用程序那一栏选择<strong>浏览</strong>即可选择你想要自定义设置的应用，在最后的动作那一栏选择直连或是走代理，根据个人情况进行选择，最后点击确定即可生效</p>
<p><img data-src="http://figure.cruisetian.top/img/Snipaste_2020-05-17_14-18-00.png" /></p>
<h2 id="后记">后记</h2>
<p>proxifier更多的个性化配置就根据自己的情况进行配置就好，这里就不再演示，比较每个人的需求不同。</p>
<p>文中示范所用的汉化破解版下载地址：<a href="https://cruisetian.lanzous.com/icpyx6f" target="_blank" rel="noopener" class="uri">https://cruisetian.lanzous.com/icpyx6f</a></p>
]]></content>
      <categories>
        <category>软件分享</category>
      </categories>
      <tags>
        <tag>代理</tag>
        <tag>proxifier</tag>
        <tag>全局代理</tag>
        <tag>游戏加速</tag>
      </tags>
  </entry>
  <entry>
    <title>rclone挂载谷歌云盘-为你的VPS扩容</title>
    <url>/post/c3c257f2.html</url>
    <content><![CDATA[<h2 id="写在前面">写在前面</h2>
<p><code>Rclone</code>是一个 <code>Github</code> 上面的一个开源项目，专门开发用来在 Linux 上面同步文件/文件夹，上传的一个命令行工具，利用<code>rclone</code>能将全世界多个热门的网盘挂载为系统本地磁盘，实现方便快捷的云盘文件管理效果。搭配无限空间的Google Drive网盘，相当于在电脑上或服务器上安装了一个无比巨大的磁盘，以此来实现扩容。</p>
<p>最近我就在我自己的服务器上试了一下，果然可以，所以就来记录一下，方便以后查看。</p>
<a id="more"></a>
<h2 id="说明">说明</h2>
<p>这里以Ubuntu18.04系统及Google Drive为例，记录一下安装步骤。</p>
<h2 id="安装">安装</h2>
<h3 id="安装rclone">安装<code>rclone</code></h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update &amp;&amp; curl https://rclone.org/install.sh | sudo bash</span><br></pre></td></tr></table></figure>
<h3 id="配置rclone">配置<code>rclone</code></h3>
<p>在终端输入 <code>rclone config</code> 进行配置</p>
<p>会出现以下信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">e) Edit existing remote</span><br><span class="line">n) New remote</span><br><span class="line">d) Delete remote</span><br><span class="line">r) Rename remote</span><br><span class="line">c) Copy remote</span><br><span class="line">s) Set configuration password</span><br><span class="line">q) Quit config</span><br><span class="line">e/n/d/r/c/s/q&gt; n <span class="comment">#选择n表示新建一个配置</span></span><br><span class="line">name&gt; gc1 <span class="comment">#输入你自己定义的配置名称，后边要用，所以得记住</span></span><br><span class="line">Type of storage to configure.</span><br><span class="line">Enter a string value. Press Enter <span class="keyword">for</span> the default (<span class="string">""</span>).</span><br><span class="line">Choose a number from below, or <span class="built_in">type</span> <span class="keyword">in</span> your own value</span><br><span class="line"> 1 / 1Fichier</span><br><span class="line">   \ <span class="string">"fichier"</span></span><br><span class="line"> 2 / Alias <span class="keyword">for</span> an existing remote</span><br><span class="line">   \ <span class="string">"alias"</span></span><br><span class="line"> 3 / Amazon Drive</span><br><span class="line">   \ <span class="string">"amazon cloud drive"</span></span><br><span class="line"> 4 / Amazon S3 Compliant Storage Provider (AWS, Alibaba, Ceph, Digital Ocean, Dreamhost, IBM COS, Minio, etc)</span><br><span class="line">   \ <span class="string">"s3"</span></span><br><span class="line"> 5 / Backblaze B2</span><br><span class="line">   \ <span class="string">"b2"</span></span><br><span class="line"> 6 / Box</span><br><span class="line">   \ <span class="string">"box"</span></span><br><span class="line"> 7 / Cache a remote</span><br><span class="line">   \ <span class="string">"cache"</span></span><br><span class="line"> 8 / Citrix Sharefile</span><br><span class="line">   \ <span class="string">"sharefile"</span></span><br><span class="line"> 9 / Dropbox</span><br><span class="line">   \ <span class="string">"dropbox"</span></span><br><span class="line">10 / Encrypt/Decrypt a remote</span><br><span class="line">   \ <span class="string">"crypt"</span></span><br><span class="line">11 / FTP Connection</span><br><span class="line">   \ <span class="string">"ftp"</span></span><br><span class="line">12 / Google Cloud Storage (this is not Google Drive)</span><br><span class="line">   \ <span class="string">"google cloud storage"</span></span><br><span class="line">13 / Google Drive</span><br><span class="line">   \ <span class="string">"drive"</span></span><br><span class="line">14 / Google Photos</span><br><span class="line">   \ <span class="string">"google photos"</span></span><br><span class="line">15 / Hubic</span><br><span class="line">   \ <span class="string">"hubic"</span></span><br><span class="line">16 / In memory object storage system.</span><br><span class="line">   \ <span class="string">"memory"</span></span><br><span class="line">17 / Jottacloud</span><br><span class="line">   \ <span class="string">"jottacloud"</span></span><br><span class="line">18 / Koofr</span><br><span class="line">   \ <span class="string">"koofr"</span></span><br><span class="line">19 / Local Disk</span><br><span class="line">   \ <span class="string">"local"</span></span><br><span class="line">20 / Mail.ru Cloud</span><br><span class="line">   \ <span class="string">"mailru"</span></span><br><span class="line">21 / Mega</span><br><span class="line">   \ <span class="string">"mega"</span></span><br><span class="line">22 / Microsoft Azure Blob Storage</span><br><span class="line">   \ <span class="string">"azureblob"</span></span><br><span class="line">23 / Microsoft OneDrive</span><br><span class="line">   \ <span class="string">"onedrive"</span></span><br><span class="line">24 / OpenDrive</span><br><span class="line">   \ <span class="string">"opendrive"</span></span><br><span class="line">25 / OpenStack Swift (Rackspace Cloud Files, Memset Memstore, OVH)</span><br><span class="line">   \ <span class="string">"swift"</span></span><br><span class="line">26 / Pcloud</span><br><span class="line">   \ <span class="string">"pcloud"</span></span><br><span class="line">27 / Put.io</span><br><span class="line">   \ <span class="string">"putio"</span></span><br><span class="line">28 / QingCloud Object Storage</span><br><span class="line">   \ <span class="string">"qingstor"</span></span><br><span class="line">29 / SSH/SFTP Connection</span><br><span class="line">   \ <span class="string">"sftp"</span></span><br><span class="line">30 / Sugarsync</span><br><span class="line">   \ <span class="string">"sugarsync"</span></span><br><span class="line">31 / Tardigrade Decentralized Cloud Storage</span><br><span class="line">   \ <span class="string">"tardigrade"</span></span><br><span class="line">32 / Transparently chunk/split large files</span><br><span class="line">   \ <span class="string">"chunker"</span></span><br><span class="line">33 / Union merges the contents of several upstream fs</span><br><span class="line">   \ <span class="string">"union"</span></span><br><span class="line">34 / Webdav</span><br><span class="line">   \ <span class="string">"webdav"</span></span><br><span class="line">35 / Yandex Disk</span><br><span class="line">   \ <span class="string">"yandex"</span></span><br><span class="line">36 / http Connection</span><br><span class="line">   \ <span class="string">"http"</span></span><br><span class="line">37 / premiumize.me</span><br><span class="line">   \ <span class="string">"premiumizeme"</span></span><br><span class="line">38 / seafile</span><br><span class="line">   \ <span class="string">"seafile"</span></span><br><span class="line">Storage&gt; 13 <span class="comment">#这里Google Drive对应的为13，所以填入13</span></span><br><span class="line">** See <span class="built_in">help</span> <span class="keyword">for</span> drive backend at: https://rclone.org/drive/ **</span><br><span class="line"></span><br><span class="line">Google Application Client Id</span><br><span class="line">Setting your own is recommended.</span><br><span class="line">See https://rclone.org/drive/<span class="comment">#making-your-own-client-id for how to create your own.</span></span><br><span class="line">If you leave this blank, it will use an internal key <span class="built_in">which</span> is low performance.</span><br><span class="line">Enter a string value. Press Enter <span class="keyword">for</span> the default (<span class="string">""</span>).</span><br><span class="line">client_id&gt; <span class="comment">#client_id可以填入自己的，也可以直接回车表示使用默认id</span></span><br><span class="line">Google Application Client Secret</span><br><span class="line">Setting your own is recommended.</span><br><span class="line">Enter a string value. Press Enter <span class="keyword">for</span> the default (<span class="string">""</span>).</span><br><span class="line">client_secret&gt;  <span class="comment">#client_secret跟client_id一样，上面使用默认这里就直接回车使用默认</span></span><br><span class="line">Scope that rclone should use when requesting access from drive.</span><br><span class="line">Enter a string value. Press Enter <span class="keyword">for</span> the default (<span class="string">""</span>).</span><br><span class="line">Choose a number from below, or <span class="built_in">type</span> <span class="keyword">in</span> your own value</span><br><span class="line"> 1 / Full access all files, excluding Application Data Folder.</span><br><span class="line">   \ <span class="string">"drive"</span></span><br><span class="line"> 2 / Read-only access to file metadata and file contents.</span><br><span class="line">   \ <span class="string">"drive.readonly"</span></span><br><span class="line">   / Access to files created by rclone only.</span><br><span class="line"> 3 | These are visible <span class="keyword">in</span> the drive website.</span><br><span class="line">   | File authorization is revoked when the user deauthorizes the app.</span><br><span class="line">   \ <span class="string">"drive.file"</span></span><br><span class="line">   / Allows <span class="built_in">read</span> and write access to the Application Data folder.</span><br><span class="line"> 4 | This is not visible <span class="keyword">in</span> the drive website.</span><br><span class="line">   \ <span class="string">"drive.appfolder"</span></span><br><span class="line">   / Allows <span class="built_in">read</span>-only access to file metadata but</span><br><span class="line"> 5 | does not allow any access to <span class="built_in">read</span> or download file content.</span><br><span class="line">   \ <span class="string">"drive.metadata.readonly"</span></span><br><span class="line">scope&gt; 1 <span class="comment">#选择1，给所有权限</span></span><br><span class="line">ID of the root folder</span><br><span class="line">Leave blank normally.</span><br><span class="line"></span><br><span class="line">Fill <span class="keyword">in</span> to access <span class="string">"Computers"</span> folders (see docs), or <span class="keyword">for</span> rclone to use</span><br><span class="line">a non root folder as its starting point.</span><br><span class="line"></span><br><span class="line">Note that <span class="keyword">if</span> this is blank, the first time rclone runs it will fill it</span><br><span class="line"><span class="keyword">in</span> with the ID of the root folder.</span><br><span class="line"></span><br><span class="line">Enter a string value. Press Enter <span class="keyword">for</span> the default (<span class="string">""</span>).</span><br><span class="line">root_folder_id&gt; <span class="comment">#这一项直接回车留空</span></span><br><span class="line">Service Account Credentials JSON file path</span><br><span class="line">Leave blank normally.</span><br><span class="line">Needed only <span class="keyword">if</span> you want use SA instead of interactive login.</span><br><span class="line">Enter a string value. Press Enter <span class="keyword">for</span> the default (<span class="string">""</span>).</span><br><span class="line">service_account_file&gt; <span class="comment">#这一项也直接回车留空</span></span><br><span class="line">Edit advanced config? (y/n)</span><br><span class="line">y) Yes</span><br><span class="line">n) No (default)</span><br><span class="line">y/n&gt; n <span class="comment">#输入n</span></span><br><span class="line">Remote config</span><br><span class="line">Use auto config?</span><br><span class="line"> * Say Y <span class="keyword">if</span> not sure</span><br><span class="line"> * Say N <span class="keyword">if</span> you are working on a remote or headless machine</span><br><span class="line">y) Yes (default)</span><br><span class="line">n) No</span><br><span class="line">y/n&gt; n <span class="comment">#输入n</span></span><br><span class="line">Please go to the following link: https://accounts.google.com/o/oauth2/auth?access_type=... <span class="comment">#将这里的网址复制到浏览器，选择你要挂载谷歌云盘的帐号以后点击允许就可以获得一串代码，复制代码</span></span><br><span class="line">Log <span class="keyword">in</span> and authorize rclone <span class="keyword">for</span> access</span><br><span class="line">Enter verification code&gt; ... <span class="comment">#将你刚刚复制的代码粘贴进来回车</span></span><br><span class="line">Configure this as a team drive?</span><br><span class="line">y) Yes</span><br><span class="line">n) No (default)</span><br><span class="line">y/n&gt; y <span class="comment">#如果想要挂载共享团队盘就选择y，否则就选择n，这里我选择的是y</span></span><br><span class="line">Fetching team drive list...</span><br><span class="line">Choose a number from below, or <span class="built_in">type</span> <span class="keyword">in</span> your own value</span><br><span class="line"> 1 / All File</span><br><span class="line">   \ <span class="string">"..."</span></span><br><span class="line">Enter a Team Drive ID&gt; 1 <span class="comment">#输入你想要挂载的共享盘序号</span></span><br><span class="line">--------------------</span><br><span class="line">[gc1]</span><br><span class="line"><span class="built_in">type</span> = drive</span><br><span class="line">scope = drive</span><br><span class="line">token = &#123;<span class="string">"access_token"</span>:...&#125;</span><br><span class="line">team_drive = 1</span><br><span class="line">--------------------</span><br><span class="line">y) Yes this is OK (default)</span><br><span class="line">e) Edit this remote</span><br><span class="line">d) Delete this remote</span><br><span class="line">y/e/d&gt; y <span class="comment">#上面显示的信息没问题的话就选择y</span></span><br><span class="line">Current remotes:</span><br><span class="line"></span><br><span class="line">Name                 Type</span><br><span class="line">====                 ====</span><br><span class="line">gc1                  drive</span><br><span class="line"></span><br><span class="line">e) Edit existing remote</span><br><span class="line">n) New remote</span><br><span class="line">d) Delete remote</span><br><span class="line">r) Rename remote</span><br><span class="line">c) Copy remote</span><br><span class="line">s) Set configuration password</span><br><span class="line">q) Quit config</span><br><span class="line">e/n/d/r/c/s/q&gt; q <span class="comment">#输入q保存退出配置</span></span><br></pre></td></tr></table></figure>
<p>上面所说的自己的<code>client_id</code>和<code>client_secret</code>的获取方法在这里：(摘自极一‘s Blog：<a href="https://www.jiyiblog.com/archives/031167.html" target="_blank" rel="noopener">Rclone安装教程 - 使用Rclone挂载Google Drive,OneDrive等网盘</a>)</p>
<blockquote>
<p>接着输入<code>client_id</code>及<code>client_secret</code>，这边可以直接按回车跳过，但是不推荐。跳过这个选项程序将使用公用API，导致在高峰时期上传失败。</p>
<p>API获取方法：<strong>(教育版帐号无法使用独立api，请忽略本方法）</strong></p>
<p>首先进入Google API网页启用API，地址: <a href="https://cdn.jsdelivr.net/gh/jer0y/CDN/uploads/2020/03/3606928597.png" target="_blank" rel="noopener"><img data-src="http://figure.cruisetian.top/img/3606928597.png" alt="API.png" /></a></p>
</blockquote>
<blockquote>
<p>接着再创建一个，地址：<a href="https://www.jiyiblog.com/go/aHR0cHM6Ly9jb25zb2xlLmRldmVsb3BlcnMuZ29vZ2xlLmNvbS9hcGlzL2NyZWRlbnRpYWxzL29hdXRoY2xpZW50" target="_blank" rel="noopener">点击进入</a></p>
<p><a href="https://cdn.jsdelivr.net/gh/jer0y/CDN/uploads/2020/03/253742622.png" target="_blank" rel="noopener"><img data-src="http://figure.cruisetian.top/img/253742622.png" alt="API2.png" /></a></p>
<p>应用类型选<code>其他</code>，名称随意。 接着就会给你ID和密钥，填到Rclone里即可</p>
</blockquote>
<h2 id="挂载硬盘这里坑比较多">挂载硬盘（这里坑比较多）</h2>
<p>首先我们要在服务器上创建一个文件夹(作为 Google 云盘的载体盘)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir /root/gdrive</span><br></pre></td></tr></table></figure>
<p>然后挂载磁盘</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将刚刚配置的gc1中的File文件夹挂载在/root/gdrive下</span></span><br><span class="line">rclone mount gc1:File /root/gdrive --allow-other --allow-non-empty --vfs-cache-mode writes &amp;</span><br></pre></td></tr></table></figure>
<p>之后运行<code>df -h</code>命令就可以查看挂载的磁盘了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">df -h</span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">udev            325M     0  325M   0% /dev</span><br><span class="line">tmpfs            72M  1.2M   70M   2% /run</span><br><span class="line">/dev/sda2        20G  4.5G   15G  24% /</span><br><span class="line">tmpfs           356M     0  356M   0% /dev/shm</span><br><span class="line">tmpfs           5.0M     0  5.0M   0% /run/lock</span><br><span class="line">tmpfs           356M     0  356M   0% /sys/fs/cgroup</span><br><span class="line">/dev/loop0       98M   98M     0 100% /snap/core/9289</span><br><span class="line">/dev/loop1       90M   90M     0 100% /snap/core/8268</span><br><span class="line">tmpfs            72M     0   72M   0% /run/user/0</span><br><span class="line">gc1:Book        1.0P     0  1.0P   0% /root/gdrive <span class="comment">#这里表示挂载上了</span></span><br></pre></td></tr></table></figure>
<p>卸载磁盘</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fusermount -qzu gdrive</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
      <tags>
        <tag>Google Drive</tag>
        <tag>rclone</tag>
        <tag>VPS扩容</tag>
        <tag>云盘挂载</tag>
      </tags>
  </entry>
  <entry>
    <title>为npm设置代理</title>
    <url>/post/603b46.html</url>
    <content><![CDATA[<h2 id="写在前面">写在前面</h2>
<p><strong>npm</strong>（全称 Node Package Manager，即“node包管理器”）是<a href="https://zh.wikipedia.org/wiki/Node.js" target="_blank" rel="noopener">Node.js</a>默认的、用<a href="https://zh.wikipedia.org/wiki/JavaScript" target="_blank" rel="noopener">JavaScript</a>编写的<a href="https://zh.wikipedia.org/wiki/軟體套件管理系統" target="_blank" rel="noopener">软件包管理系统</a>。</p>
<p>由于我们的开发环境由于安全因素在访问一些网站时需要使用代理，其中就包括npm的repositories网站，所以就需要修改npm的配置来加入代理。</p>
<p>下面简要介绍下npm的配置以及如何设置代理。</p>
<a id="more"></a>
<h2 id="为npm设置代理">为npm设置代理</h2>
<h3 id="设置http代理">设置http代理</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 假设本地代理端口为8080</span><br><span class="line">npm config set proxy &quot;http:&#x2F;&#x2F;localhost:8080&quot;</span><br><span class="line">npm config set https-proxy &quot;http:&#x2F;&#x2F;localhost:8080&quot;</span><br></pre></td></tr></table></figure>
<p>如果代理需要认证的话可以这样来设置。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 有用户密码的代理</span><br><span class="line">npm config set proxy &quot;http:&#x2F;&#x2F;username:password@localhost:8080&quot;</span><br><span class="line">npm confit set https-proxy &quot;http:&#x2F;&#x2F;username:password@localhost:8080&quot;</span><br></pre></td></tr></table></figure>
<h3 id="查看代理">查看代理</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm config get #或者使用下面这个，二者选一个</span><br><span class="line">npm config list</span><br></pre></td></tr></table></figure>
<h3 id="socks5-代理">socks5 代理</h3>
<p>npm 不支持 socks 代理，但是我们可以用一个工具将 http 代理转成 socks 代理，然后将 npm 代理地址设置到这个工具的地址。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 假设本地socks5代理端口为8081</span><br><span class="line"># 首先安装转换工具</span><br><span class="line">npm install -g http-proxy-to-socks</span><br><span class="line"># 然后使用这个工具监听8080端口,支持http代理，然后所有8080的http代理数据都将转换成socks的代理数据发送到8081上</span><br><span class="line">hpts -s localhost:8081 -p 8080</span><br><span class="line"># 最后设置npm代理为8080</span><br><span class="line">npm config set proxy &quot;http:&#x2F;&#x2F;localhost:8080&quot;</span><br><span class="line">npm config set https-proxy &quot;http:&#x2F;&#x2F;localhost:8080&quot;</span><br></pre></td></tr></table></figure>
<p>相当于又加了一个中间层，将 http 转成 socks。</p>
<h2 id="取消代理">取消代理</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm config delete proxy</span><br><span class="line">npm config delete https-proxy</span><br></pre></td></tr></table></figure>
<h2 id="后记">后记</h2>
<p>一般设置完代理的npm下载软件包就很快啦，但是还是跟代理的速度有关系，所以要选择质量较好的代理。</p>
]]></content>
      <categories>
        <category>系统设置</category>
      </categories>
      <tags>
        <tag>代理</tag>
        <tag>proxy</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>给你的hexo博客绑定域名</title>
    <url>/post/26a7e178.html</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<p>最近比较闲，利用hexo在GitHub上搭建了一个静态博客，那么既然是个人博客，当然要上自己的域名了，这样才能更<del>有个人特色</del>有逼格。</p>
<h2 id="搭建hexo博客并推送到github页面">搭建Hexo博客并推送到github页面</h2>
<p>这一步就不再多讲，大家可以自己去网上找相关教程，有很多。</p>
<p>这里给几个推荐链接：<a href="https://zhuanlan.zhihu.com/p/26625249" target="_blank" rel="noopener">GitHub+Hexo 搭建个人网站详细教程</a>, <a href="https://zhuanlan.zhihu.com/p/60578464" target="_blank" rel="noopener">使用 Hexo+GitHub 搭建个人免费博客教程（小白向）</a></p>
<p>差不多够用了。</p>
<a id="more"></a>
<h2 id="注册域名">注册域名</h2>
<p>可以去阿里云，腾讯云，狗爹，namesilo去购买一个域名，也可以到 <a href="%5Bhttps://www.freenom.com%5D(https://www.freenom.com/zh/index.html?lang=zh)">Freenom</a> 去申请一个免费的域名。</p>
<h2 id="解析域名">解析域名</h2>
<p>到你注册域名的地方，增加给你的域名做DNS解析，增加一条CNAME解析，指向你的博客，这里我以cloudflare为例：</p>
<p><img data-src="http://figure.cruisetian.top/img/6.png" /></p>
<h2 id="创建cname文件">创建CNAME文件</h2>
<p>在hexo项目下 source 文件下创建CNAME 文件（没有后缀名的），在里面写上购买的域名，如</p>
<p><img data-src="http://figure.cruisetian.top/img/3.png" /></p>
<h2 id="到github中填入自己的域名">到GitHub中填入自己的域名</h2>
<p>到你创建的页面repo中，找到setting→options，往下翻，找到Custom domain，然后在其中填入你解析的域名，点击Save保存。如，</p>
<p><img data-src="http://figure.cruisetian.top/img/4.png" /></p>
<p><img data-src="http://figure.cruisetian.top/img/5.png" /></p>
<p>然后在浏览器的地址栏输入自己的域名，就可以访问啦。</p>
]]></content>
      <categories>
        <category>日常学习</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>博客</tag>
        <tag>域名绑定</tag>
      </tags>
  </entry>
  <entry>
    <title>亿寻-百度云极速下载神器</title>
    <url>/post/2982de5b.html</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<p>百度网盘如今是国内使用者最多的网盘，但是百度网盘对普通用户甚至VIP用户限速，只有超级会员才可以享受到原本正常的下载速度的操作属实让人感觉到不爽，之前在pandownload还在的时候还好，可以快速地下载自己需要的文件，但是最近百度一波骚操作，把pandownload给搞没了，这可让众多百度网盘使用者十分难受，所以今天我就来分享一个pandownload的替代品以及它的使用方法。</p>
<a id="more"></a>
<h2 id="软件下载">软件下载</h2>
<p>大家可以到它的官方网站下载，这里给出地址：<a href="https://yixun.writeas.com/yi-xun" target="_blank" rel="noopener" class="uri">https://yixun.writeas.com/yi-xun</a></p>
<p>也可以从我这里的<a href="https://cruisetian.lanzous.com/b01bexope" target="_blank" rel="noopener">链接</a>(密码:1qq0)下载，都是一样的文件，大家如果不放心还请去上面的官方地址下载</p>
<h2 id="如何使用">如何使用</h2>
<h3 id="关于登录">关于登录</h3>
<p>首先解压压缩包以后，点击<strong>Yixun.exe</strong>运行程序，进入主界面以后，可以选择登录，当然，不登陆也不影响使用，关于登录请自行查看<strong>README.txt</strong>,作者给的有教程，这里就不再赘述。</p>
<h3 id="修改默认下载位置">修改默认下载位置</h3>
<p>点击<strong>工具-&gt;选项</strong>，就可以看到默认下载位置了，可以点击<strong>浏览</strong>自行修改。</p>
<p><img data-src="http://figure.cruisetian.top/img/Snipaste_2020-05-19_00-53-16.png" /></p>
<p><img data-src="http://figure.cruisetian.top/img/Snipaste_2020-05-19_00-55-54.png" /></p>
<h3 id="下载文件">下载文件</h3>
<p>复制百度网盘的分享链接（可以带提取码一起复制，软件会自动识别并帮你解析，就不用自己输入了），然后打开软件，点击<strong>文件-&gt;打开</strong>，</p>
<p><img data-src="http://figure.cruisetian.top/img/Snipaste_2020-05-19_01-01-34.png" /></p>
<p>在弹出的页面的<strong>地址：</strong>栏粘贴刚刚复制的链接，然后点击<strong>打开</strong>，</p>
<p><img data-src="http://figure.cruisetian.top/img/Snipaste_2020-05-19_01-03-42.png" /></p>
<p>就可以看到下面出现了一个文件，右键点击<strong>下载</strong>即可。</p>
<p><img data-src="http://figure.cruisetian.top/img/Snipaste_2020-05-19_01-04-37.png" /></p>
<p>接着会弹出一个黑色的页面，是正常现象，因为该软件调用的是aria2下载。在这个命令页面你可以查看当前下载速度(DL)，下载预计时间(ETA)，文件大小以及下载了多少，下面是我随便下载了一个文件测试出来的速度，在9M/s左右，整体还可以，比较稳定，反正比百度云那10kb/s强太多了。另外，下载速度跟资源好坏，自身的网络环境也是有一定关系，可能这个资源慢一些，那个资源快一些，都不一定，大家可以多试一试。</p>
<p><img data-src="http://figure.cruisetian.top/img/Snipaste_2020-05-18_11-31-14.png" /></p>
<p><strong>后续</strong>：之后有用这个软件下载了一些大文件，整体速度喜人，我家200M的带宽都跑满了，而且比较稳定，下载六个G的文件不到十分钟就能完成，下面是下载过程中我截的一张图，这速度可以说是可怕了。</p>
<p><img data-src="http://figure.cruisetian.top/img/Snipaste_2020-05-27_01-37-44.png" /> ## 后记</p>
<p>这个软件目前来说还是一个下载百度云的良方，大家如果觉得不错的话可以给作者一些鼓励和打赏，当然不排除以后会不太好用，所以我觉得最根本的方式还是换用其他网盘，目前来说国内的蓝奏云，天翼云，坚果云等都不错，如果大家有渠道的话可以尝试国外的谷歌云和Onedrive(onedrive国内也能用，就是速度不是很快，大概2~3M/s的样子，反正比百度云好多了，所以建议配合代理使用)，反正我在百度云上没存啥东西，确实依赖性不大，大家如果有大量资料在上面的话，还是建议开个会员，比较有保障。</p>
]]></content>
      <categories>
        <category>软件分享</category>
      </categories>
      <tags>
        <tag>百度网盘</tag>
        <tag>极速下载</tag>
        <tag>亿寻</tag>
        <tag>Pandownload</tag>
      </tags>
  </entry>
  <entry>
    <title>为git配置代理</title>
    <url>/post/30b83ef0.html</url>
    <content><![CDATA[<h2 id="写在前面">写在前面</h2>
<p>在国内，github虽然没有被墙，但是速度极慢，有时候想要clone一份代码要花很长时间，所以就考虑给git设置一个代理，这样能使连接的速度更快</p>
<p>通常我们 clone 代码时可以选择两种方式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//方式一：HTTP</span><br><span class="line">https://github.com/git/git.git</span><br><span class="line">//方式二：SSH</span><br><span class="line">git@github.com:git/git.git</span><br></pre></td></tr></table></figure>
<p>两种方式设置代理的方法是不同的，下面一一介绍。</p>
<a id="more"></a>
<h2 id="设置git-http代理">设置Git HTTP代理</h2>
<p>如果你手上的代理是 socks5 代理，如各平台的 Shadowsocks 客户端，trojan，v2ray等都提供一个本地的 socks5 代理，那么你可以这样设置，让 Git 通过 HTTP 链接 clone 代码时走 socks5 代理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;通过 http 链接 clone 代码时走 http 代理</span><br><span class="line">git config --global http.proxy &quot;socks5:&#x2F;&#x2F;127.0.0.1:1080&quot;</span><br><span class="line">&#x2F;&#x2F;通过 https 链接 clone 代码时走 http 代理</span><br><span class="line">git config --global https.proxy &quot;socks5:&#x2F;&#x2F;127.0.0.1:1080&quot;</span><br></pre></td></tr></table></figure>
<p>设置完成后，可以 clone 一份代码试一下有没有效果。如果没有设置错误的话，代码clone的速度应该会提高很多。</p>
<p>这些设置最终会保存在用户目录下的 <code>.gitconfig</code> 文件中，打开这个文件可以看到类似的几行配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[http]</span><br><span class="line">    proxy &#x3D; socks5:&#x2F;&#x2F;127.0.0.1:1080</span><br><span class="line">[https]</span><br><span class="line">    proxy &#x3D; socks5:&#x2F;&#x2F;127.0.0.1:1080</span><br></pre></td></tr></table></figure>
<p>如果端口有变动也可以直接在这里修改。</p>
<h2 id="设置-git-ssh-代理">设置 Git SSH 代理</h2>
<p>还有一种情况，我们通过 SSH 方法 clone 代码，提交代码，因为这样不用输入密码，通常我们会在自己的常用电脑上这么做。上面设置的 HTTP 代理对这种方式 clone 代码是没有影响的，也就是并不会加速，SSH 的代理需要单独设置，其实这个跟 Git 的关系已经不是很大，我们需要改的，是SSH 的配置。在用户目录下建立如下文件 ~/.ssh/config，对 GitHub 的域名做单独的处理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 这里必须是 github.com，因为这个跟我们 clone 代码时的链接有关</span><br><span class="line">Host github.com</span><br><span class="line">   # 如果用默认端口，这里是 github.com，如果想用443端口，这里就是 ssh.github.com 详见 https:&#x2F;&#x2F;help.github.com&#x2F;articles&#x2F;using-ssh-over-the-https-port&#x2F;</span><br><span class="line">   HostName github.com</span><br><span class="line">   User git</span><br><span class="line">   # 如果是 HTTP 代理，把下面这行取消注释，并把 proxyport 改成自己的 http 代理的端口</span><br><span class="line">   # ProxyCommand socat - PROXY:127.0.0.1:%h:%p,proxyport&#x3D;1080</span><br><span class="line">   # 如果是 socks5 代理，则把下面这行取消注释，并把 6666 改成自己 socks5 代理的端口</span><br><span class="line">   # ProxyCommand nc -v -x 127.0.0.1:1080 %h %p</span><br></pre></td></tr></table></figure>
<p>根据代码中的注释，设置自己的代理。</p>
<p>经过上面的设置，现在不管是用什么方式 clone 代码，都会走代理了，这里还是强调一下，代理要速度快才会有加速效果，如果代理一般或者很慢，可能还不如不走代理。</p>
]]></content>
      <categories>
        <category>系统设置</category>
      </categories>
      <tags>
        <tag>proxy</tag>
        <tag>git</tag>
        <tag>github</tag>
      </tags>
  </entry>
</search>
